// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataDefine.proto

package com.nibiru.creator.data;

public final class HotPotData {
  private HotPotData() {}
  public static void registerAllExtensions(
      com.nibiru.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.nibiru.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.nibiru.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   *切换类型
   * </pre>
   *
   * Protobuf enum {@code DataFactory.SwitchType}
   */
  public enum SwitchType
      implements com.nibiru.protobuf.ProtocolMessageEnum {
    /**
     * <code>SwitchType_Normal = 0;</code>
     */
    SwitchType_Normal(0),
    /**
     * <code>SwitchType_Chessboard = 1;</code>
     */
    SwitchType_Chessboard(1),
    /**
     * <code>SwitchType_Mosaic = 2;</code>
     */
    SwitchType_Mosaic(2),
    ;

    /**
     * <code>SwitchType_Normal = 0;</code>
     */
    public static final int SwitchType_Normal_VALUE = 0;
    /**
     * <code>SwitchType_Chessboard = 1;</code>
     */
    public static final int SwitchType_Chessboard_VALUE = 1;
    /**
     * <code>SwitchType_Mosaic = 2;</code>
     */
    public static final int SwitchType_Mosaic_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SwitchType valueOf(int value) {
      return forNumber(value);
    }

    public static SwitchType forNumber(int value) {
      switch (value) {
        case 0: return SwitchType_Normal;
        case 1: return SwitchType_Chessboard;
        case 2: return SwitchType_Mosaic;
        default: return null;
      }
    }

    public static com.nibiru.protobuf.Internal.EnumLiteMap<SwitchType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.nibiru.protobuf.Internal.EnumLiteMap<
        SwitchType> internalValueMap =
          new com.nibiru.protobuf.Internal.EnumLiteMap<SwitchType>() {
            public SwitchType findValueByNumber(int number) {
              return SwitchType.forNumber(number);
            }
          };

    public final com.nibiru.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.getDescriptor().getEnumTypes().get(0);
    }

    private static final SwitchType[] VALUES = values();

    public static SwitchType valueOf(
        com.nibiru.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SwitchType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DataFactory.SwitchType)
  }

  /**
   * <pre>
   *热点触发方式
   * </pre>
   *
   * Protobuf enum {@code DataFactory.DisplayMode}
   */
  public enum DisplayMode
      implements com.nibiru.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *点击
     * </pre>
     *
     * <code>DisplayMode_ClickShow = 0;</code>
     */
    DisplayMode_ClickShow(0),
    /**
     * <pre>
     *一直
     * </pre>
     *
     * <code>DisplayMode_AlwaysShow = 1;</code>
     */
    DisplayMode_AlwaysShow(1),
    /**
     * <pre>
     *悬停
     * </pre>
     *
     * <code>DisplayMode_HoverShow = 2;</code>
     */
    DisplayMode_HoverShow(2),
    ;

    /**
     * <pre>
     *点击
     * </pre>
     *
     * <code>DisplayMode_ClickShow = 0;</code>
     */
    public static final int DisplayMode_ClickShow_VALUE = 0;
    /**
     * <pre>
     *一直
     * </pre>
     *
     * <code>DisplayMode_AlwaysShow = 1;</code>
     */
    public static final int DisplayMode_AlwaysShow_VALUE = 1;
    /**
     * <pre>
     *悬停
     * </pre>
     *
     * <code>DisplayMode_HoverShow = 2;</code>
     */
    public static final int DisplayMode_HoverShow_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DisplayMode valueOf(int value) {
      return forNumber(value);
    }

    public static DisplayMode forNumber(int value) {
      switch (value) {
        case 0: return DisplayMode_ClickShow;
        case 1: return DisplayMode_AlwaysShow;
        case 2: return DisplayMode_HoverShow;
        default: return null;
      }
    }

    public static com.nibiru.protobuf.Internal.EnumLiteMap<DisplayMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.nibiru.protobuf.Internal.EnumLiteMap<
        DisplayMode> internalValueMap =
          new com.nibiru.protobuf.Internal.EnumLiteMap<DisplayMode>() {
            public DisplayMode findValueByNumber(int number) {
              return DisplayMode.forNumber(number);
            }
          };

    public final com.nibiru.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.getDescriptor().getEnumTypes().get(1);
    }

    private static final DisplayMode[] VALUES = values();

    public static DisplayMode valueOf(
        com.nibiru.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DisplayMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DataFactory.DisplayMode)
  }

  /**
   * <pre>
   *热点小时方式
   * </pre>
   *
   * Protobuf enum {@code DataFactory.DisappearMode}
   */
  public enum DisappearMode
      implements com.nibiru.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *点击
     * </pre>
     *
     * <code>DisappearMode_ClickHidden = 0;</code>
     */
    DisappearMode_ClickHidden(0),
    /**
     * <pre>
     *从不
     * </pre>
     *
     * <code>DisappearMode_Never = 1;</code>
     */
    DisappearMode_Never(1),
    /**
     * <pre>
     *失焦
     * </pre>
     *
     * <code>DisappearMode_OutFocusHidden = 2;</code>
     */
    DisappearMode_OutFocusHidden(2),
    ;

    /**
     * <pre>
     *点击
     * </pre>
     *
     * <code>DisappearMode_ClickHidden = 0;</code>
     */
    public static final int DisappearMode_ClickHidden_VALUE = 0;
    /**
     * <pre>
     *从不
     * </pre>
     *
     * <code>DisappearMode_Never = 1;</code>
     */
    public static final int DisappearMode_Never_VALUE = 1;
    /**
     * <pre>
     *失焦
     * </pre>
     *
     * <code>DisappearMode_OutFocusHidden = 2;</code>
     */
    public static final int DisappearMode_OutFocusHidden_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DisappearMode valueOf(int value) {
      return forNumber(value);
    }

    public static DisappearMode forNumber(int value) {
      switch (value) {
        case 0: return DisappearMode_ClickHidden;
        case 1: return DisappearMode_Never;
        case 2: return DisappearMode_OutFocusHidden;
        default: return null;
      }
    }

    public static com.nibiru.protobuf.Internal.EnumLiteMap<DisappearMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.nibiru.protobuf.Internal.EnumLiteMap<
        DisappearMode> internalValueMap =
          new com.nibiru.protobuf.Internal.EnumLiteMap<DisappearMode>() {
            public DisappearMode findValueByNumber(int number) {
              return DisappearMode.forNumber(number);
            }
          };

    public final com.nibiru.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.getDescriptor().getEnumTypes().get(2);
    }

    private static final DisappearMode[] VALUES = values();

    public static DisappearMode valueOf(
        com.nibiru.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DisappearMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DataFactory.DisappearMode)
  }

  /**
   * <pre>
   *图片格式
   * </pre>
   *
   * Protobuf enum {@code DataFactory.ImageType}
   */
  public enum ImageType
      implements com.nibiru.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *2D
     * </pre>
     *
     * <code>ImageType_2D = 0;</code>
     */
    ImageType_2D(0),
    /**
     * <pre>
     *3D
     * </pre>
     *
     * <code>ImageType_3D = 1;</code>
     */
    ImageType_3D(1),
    /**
     * <pre>
     *全景
     * </pre>
     *
     * <code>ImageType_VR = 2;</code>
     */
    ImageType_VR(2),
    ;

    /**
     * <pre>
     *2D
     * </pre>
     *
     * <code>ImageType_2D = 0;</code>
     */
    public static final int ImageType_2D_VALUE = 0;
    /**
     * <pre>
     *3D
     * </pre>
     *
     * <code>ImageType_3D = 1;</code>
     */
    public static final int ImageType_3D_VALUE = 1;
    /**
     * <pre>
     *全景
     * </pre>
     *
     * <code>ImageType_VR = 2;</code>
     */
    public static final int ImageType_VR_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ImageType valueOf(int value) {
      return forNumber(value);
    }

    public static ImageType forNumber(int value) {
      switch (value) {
        case 0: return ImageType_2D;
        case 1: return ImageType_3D;
        case 2: return ImageType_VR;
        default: return null;
      }
    }

    public static com.nibiru.protobuf.Internal.EnumLiteMap<ImageType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.nibiru.protobuf.Internal.EnumLiteMap<
        ImageType> internalValueMap =
          new com.nibiru.protobuf.Internal.EnumLiteMap<ImageType>() {
            public ImageType findValueByNumber(int number) {
              return ImageType.forNumber(number);
            }
          };

    public final com.nibiru.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.getDescriptor().getEnumTypes().get(3);
    }

    private static final ImageType[] VALUES = values();

    public static ImageType valueOf(
        com.nibiru.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ImageType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DataFactory.ImageType)
  }

  /**
   * <pre>
   *视频格式
   * </pre>
   *
   * Protobuf enum {@code DataFactory.VideoType}
   */
  public enum VideoType
      implements com.nibiru.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *2D
     * </pre>
     *
     * <code>VideoType_2DNormal = 0;</code>
     */
    VideoType_2DNormal(0),
    /**
     * <pre>
     *3D
     * </pre>
     *
     * <code>VideoType_3DNormal = 1;</code>
     */
    VideoType_3DNormal(1),
    /**
     * <pre>
     *全景
     * </pre>
     *
     * <code>VideoType_VR = 2;</code>
     */
    VideoType_VR(2),
    ;

    /**
     * <pre>
     *2D
     * </pre>
     *
     * <code>VideoType_2DNormal = 0;</code>
     */
    public static final int VideoType_2DNormal_VALUE = 0;
    /**
     * <pre>
     *3D
     * </pre>
     *
     * <code>VideoType_3DNormal = 1;</code>
     */
    public static final int VideoType_3DNormal_VALUE = 1;
    /**
     * <pre>
     *全景
     * </pre>
     *
     * <code>VideoType_VR = 2;</code>
     */
    public static final int VideoType_VR_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static VideoType valueOf(int value) {
      return forNumber(value);
    }

    public static VideoType forNumber(int value) {
      switch (value) {
        case 0: return VideoType_2DNormal;
        case 1: return VideoType_3DNormal;
        case 2: return VideoType_VR;
        default: return null;
      }
    }

    public static com.nibiru.protobuf.Internal.EnumLiteMap<VideoType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.nibiru.protobuf.Internal.EnumLiteMap<
        VideoType> internalValueMap =
          new com.nibiru.protobuf.Internal.EnumLiteMap<VideoType>() {
            public VideoType findValueByNumber(int number) {
              return VideoType.forNumber(number);
            }
          };

    public final com.nibiru.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.getDescriptor().getEnumTypes().get(4);
    }

    private static final VideoType[] VALUES = values();

    public static VideoType valueOf(
        com.nibiru.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private VideoType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DataFactory.VideoType)
  }

  /**
   * <pre>
   *场景渲染格式
   * </pre>
   *
   * Protobuf enum {@code DataFactory.SceneRenderMode}
   */
  public enum SceneRenderMode
      implements com.nibiru.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *2D
     * </pre>
     *
     * <code>SceneType_2DNormal = 0;</code>
     */
    SceneType_2DNormal(0),
    /**
     * <pre>
     *3D
     * </pre>
     *
     * <code>SceneType_3DNormal = 1;</code>
     */
    SceneType_3DNormal(1),
    /**
     * <pre>
     *全景
     * </pre>
     *
     * <code>SceneType_VR = 2;</code>
     */
    SceneType_VR(2),
    ;

    /**
     * <pre>
     *2D
     * </pre>
     *
     * <code>SceneType_2DNormal = 0;</code>
     */
    public static final int SceneType_2DNormal_VALUE = 0;
    /**
     * <pre>
     *3D
     * </pre>
     *
     * <code>SceneType_3DNormal = 1;</code>
     */
    public static final int SceneType_3DNormal_VALUE = 1;
    /**
     * <pre>
     *全景
     * </pre>
     *
     * <code>SceneType_VR = 2;</code>
     */
    public static final int SceneType_VR_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SceneRenderMode valueOf(int value) {
      return forNumber(value);
    }

    public static SceneRenderMode forNumber(int value) {
      switch (value) {
        case 0: return SceneType_2DNormal;
        case 1: return SceneType_3DNormal;
        case 2: return SceneType_VR;
        default: return null;
      }
    }

    public static com.nibiru.protobuf.Internal.EnumLiteMap<SceneRenderMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.nibiru.protobuf.Internal.EnumLiteMap<
        SceneRenderMode> internalValueMap =
          new com.nibiru.protobuf.Internal.EnumLiteMap<SceneRenderMode>() {
            public SceneRenderMode findValueByNumber(int number) {
              return SceneRenderMode.forNumber(number);
            }
          };

    public final com.nibiru.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.getDescriptor().getEnumTypes().get(5);
    }

    private static final SceneRenderMode[] VALUES = values();

    public static SceneRenderMode valueOf(
        com.nibiru.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SceneRenderMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DataFactory.SceneRenderMode)
  }

  /**
   * <pre>
   *视频源
   * </pre>
   *
   * Protobuf enum {@code DataFactory.VideoSourceMode}
   */
  public enum VideoSourceMode
      implements com.nibiru.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *本地
     * </pre>
     *
     * <code>VideoSourceMode_Local = 0;</code>
     */
    VideoSourceMode_Local(0),
    /**
     * <pre>
     *WEB
     * </pre>
     *
     * <code>VideoSourceMode_Web = 1;</code>
     */
    VideoSourceMode_Web(1),
    ;

    /**
     * <pre>
     *本地
     * </pre>
     *
     * <code>VideoSourceMode_Local = 0;</code>
     */
    public static final int VideoSourceMode_Local_VALUE = 0;
    /**
     * <pre>
     *WEB
     * </pre>
     *
     * <code>VideoSourceMode_Web = 1;</code>
     */
    public static final int VideoSourceMode_Web_VALUE = 1;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static VideoSourceMode valueOf(int value) {
      return forNumber(value);
    }

    public static VideoSourceMode forNumber(int value) {
      switch (value) {
        case 0: return VideoSourceMode_Local;
        case 1: return VideoSourceMode_Web;
        default: return null;
      }
    }

    public static com.nibiru.protobuf.Internal.EnumLiteMap<VideoSourceMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.nibiru.protobuf.Internal.EnumLiteMap<
        VideoSourceMode> internalValueMap =
          new com.nibiru.protobuf.Internal.EnumLiteMap<VideoSourceMode>() {
            public VideoSourceMode findValueByNumber(int number) {
              return VideoSourceMode.forNumber(number);
            }
          };

    public final com.nibiru.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.getDescriptor().getEnumTypes().get(6);
    }

    private static final VideoSourceMode[] VALUES = values();

    public static VideoSourceMode valueOf(
        com.nibiru.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private VideoSourceMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DataFactory.VideoSourceMode)
  }

  /**
   * <pre>
   *图文热点的组合方式
   * </pre>
   *
   * Protobuf enum {@code DataFactory.ImageTxtMode}
   */
  public enum ImageTxtMode
      implements com.nibiru.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *水平
     * </pre>
     *
     * <code>Horizontal_Mode = 0;</code>
     */
    Horizontal_Mode(0),
    /**
     * <pre>
     *垂直
     * </pre>
     *
     * <code>Vertical_Mode = 1;</code>
     */
    Vertical_Mode(1),
    ;

    /**
     * <pre>
     *水平
     * </pre>
     *
     * <code>Horizontal_Mode = 0;</code>
     */
    public static final int Horizontal_Mode_VALUE = 0;
    /**
     * <pre>
     *垂直
     * </pre>
     *
     * <code>Vertical_Mode = 1;</code>
     */
    public static final int Vertical_Mode_VALUE = 1;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ImageTxtMode valueOf(int value) {
      return forNumber(value);
    }

    public static ImageTxtMode forNumber(int value) {
      switch (value) {
        case 0: return Horizontal_Mode;
        case 1: return Vertical_Mode;
        default: return null;
      }
    }

    public static com.nibiru.protobuf.Internal.EnumLiteMap<ImageTxtMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.nibiru.protobuf.Internal.EnumLiteMap<
        ImageTxtMode> internalValueMap =
          new com.nibiru.protobuf.Internal.EnumLiteMap<ImageTxtMode>() {
            public ImageTxtMode findValueByNumber(int number) {
              return ImageTxtMode.forNumber(number);
            }
          };

    public final com.nibiru.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.getDescriptor().getEnumTypes().get(7);
    }

    private static final ImageTxtMode[] VALUES = values();

    public static ImageTxtMode valueOf(
        com.nibiru.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ImageTxtMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DataFactory.ImageTxtMode)
  }

  /**
   * <pre>
   *热点类型
   * </pre>
   *
   * Protobuf enum {@code DataFactory.HotPotEnum}
   */
  public enum HotPotEnum
      implements com.nibiru.protobuf.ProtocolMessageEnum {
    /**
     * <code>HotPotEnum_NULL = 0;</code>
     */
    HotPotEnum_NULL(0),
    /**
     * <code>HotPotEnum_Incubator = 1;</code>
     */
    HotPotEnum_Incubator(1),
    /**
     * <pre>
     *文本热点
     * </pre>
     *
     * <code>HotPotEnum_Label = 2;</code>
     */
    HotPotEnum_Label(2),
    /**
     * <pre>
     *图片热点
     * </pre>
     *
     * <code>HotPotEnum_Image = 3;</code>
     */
    HotPotEnum_Image(3),
    /**
     * <pre>
     *视频热点
     * </pre>
     *
     * <code>HotPotEnum_Video = 4;</code>
     */
    HotPotEnum_Video(4),
    /**
     * <pre>
     *音频热点
     * </pre>
     *
     * <code>HotPotEnum_Audio = 5;</code>
     */
    HotPotEnum_Audio(5),
    /**
     * <pre>
     *切换热点
     * </pre>
     *
     * <code>HotPotEnum_SceneSwitch = 6;</code>
     */
    HotPotEnum_SceneSwitch(6),
    /**
     * <pre>
     *图集热点
     * </pre>
     *
     * <code>HotPotEnum_ImageList = 7;</code>
     */
    HotPotEnum_ImageList(7),
    /**
     * <pre>
     *图文热点
     * </pre>
     *
     * <code>HotPotEnum_ImageTxt = 8;</code>
     */
    HotPotEnum_ImageTxt(8),
    /**
     * <pre>
     *模型热点
     * </pre>
     *
     * <code>HotPotEnum_Model = 9;</code>
     */
    HotPotEnum_Model(9),
    /**
     * <pre>
     *超链接热点
     * </pre>
     *
     * <code>HotPotEnum_HyperLink = 10;</code>
     */
    HotPotEnum_HyperLink(10),
    /**
     * <pre>
     *3DExhibits热点，类似超链接热点
     * </pre>
     *
     * <code>HotPotEnum_3DExhibits = 11;</code>
     */
    HotPotEnum_3DExhibits(11),
    /**
     * <pre>
     *ARExhibits热点，类似3DExhibits热点
     * </pre>
     *
     * <code>HotPotEnum_ARExhibits = 12;</code>
     */
    HotPotEnum_ARExhibits(12),
    ;

    /**
     * <code>HotPotEnum_NULL = 0;</code>
     */
    public static final int HotPotEnum_NULL_VALUE = 0;
    /**
     * <code>HotPotEnum_Incubator = 1;</code>
     */
    public static final int HotPotEnum_Incubator_VALUE = 1;
    /**
     * <pre>
     *文本热点
     * </pre>
     *
     * <code>HotPotEnum_Label = 2;</code>
     */
    public static final int HotPotEnum_Label_VALUE = 2;
    /**
     * <pre>
     *图片热点
     * </pre>
     *
     * <code>HotPotEnum_Image = 3;</code>
     */
    public static final int HotPotEnum_Image_VALUE = 3;
    /**
     * <pre>
     *视频热点
     * </pre>
     *
     * <code>HotPotEnum_Video = 4;</code>
     */
    public static final int HotPotEnum_Video_VALUE = 4;
    /**
     * <pre>
     *音频热点
     * </pre>
     *
     * <code>HotPotEnum_Audio = 5;</code>
     */
    public static final int HotPotEnum_Audio_VALUE = 5;
    /**
     * <pre>
     *切换热点
     * </pre>
     *
     * <code>HotPotEnum_SceneSwitch = 6;</code>
     */
    public static final int HotPotEnum_SceneSwitch_VALUE = 6;
    /**
     * <pre>
     *图集热点
     * </pre>
     *
     * <code>HotPotEnum_ImageList = 7;</code>
     */
    public static final int HotPotEnum_ImageList_VALUE = 7;
    /**
     * <pre>
     *图文热点
     * </pre>
     *
     * <code>HotPotEnum_ImageTxt = 8;</code>
     */
    public static final int HotPotEnum_ImageTxt_VALUE = 8;
    /**
     * <pre>
     *模型热点
     * </pre>
     *
     * <code>HotPotEnum_Model = 9;</code>
     */
    public static final int HotPotEnum_Model_VALUE = 9;
    /**
     * <pre>
     *超链接热点
     * </pre>
     *
     * <code>HotPotEnum_HyperLink = 10;</code>
     */
    public static final int HotPotEnum_HyperLink_VALUE = 10;
    /**
     * <pre>
     *3DExhibits热点，类似超链接热点
     * </pre>
     *
     * <code>HotPotEnum_3DExhibits = 11;</code>
     */
    public static final int HotPotEnum_3DExhibits_VALUE = 11;
    /**
     * <pre>
     *ARExhibits热点，类似3DExhibits热点
     * </pre>
     *
     * <code>HotPotEnum_ARExhibits = 12;</code>
     */
    public static final int HotPotEnum_ARExhibits_VALUE = 12;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HotPotEnum valueOf(int value) {
      return forNumber(value);
    }

    public static HotPotEnum forNumber(int value) {
      switch (value) {
        case 0: return HotPotEnum_NULL;
        case 1: return HotPotEnum_Incubator;
        case 2: return HotPotEnum_Label;
        case 3: return HotPotEnum_Image;
        case 4: return HotPotEnum_Video;
        case 5: return HotPotEnum_Audio;
        case 6: return HotPotEnum_SceneSwitch;
        case 7: return HotPotEnum_ImageList;
        case 8: return HotPotEnum_ImageTxt;
        case 9: return HotPotEnum_Model;
        case 10: return HotPotEnum_HyperLink;
        case 11: return HotPotEnum_3DExhibits;
        case 12: return HotPotEnum_ARExhibits;
        default: return null;
      }
    }

    public static com.nibiru.protobuf.Internal.EnumLiteMap<HotPotEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.nibiru.protobuf.Internal.EnumLiteMap<
        HotPotEnum> internalValueMap =
          new com.nibiru.protobuf.Internal.EnumLiteMap<HotPotEnum>() {
            public HotPotEnum findValueByNumber(int number) {
              return HotPotEnum.forNumber(number);
            }
          };

    public final com.nibiru.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.nibiru.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.getDescriptor().getEnumTypes().get(8);
    }

    private static final HotPotEnum[] VALUES = values();

    public static HotPotEnum valueOf(
        com.nibiru.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HotPotEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DataFactory.HotPotEnum)
  }

  public interface ProjVersionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.ProjVersion)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <code>required string version = 1;</code>
     */
    boolean hasVersion();
    /**
     * <code>required string version = 1;</code>
     */
    java.lang.String getVersion();
    /**
     * <code>required string version = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getVersionBytes();
  }
  /**
   * <pre>
   *版本控制
   * </pre>
   *
   * Protobuf type {@code DataFactory.ProjVersion}
   */
  public  static final class ProjVersion extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.ProjVersion)
      ProjVersionOrBuilder {
    // Use ProjVersion.newBuilder() to construct.
    private ProjVersion(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProjVersion() {
      version_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProjVersion(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              version_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ProjVersion_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ProjVersion_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.ProjVersion.class, com.nibiru.creator.data.HotPotData.ProjVersion.Builder.class);
    }

    private int bitField0_;
    public static final int VERSION_FIELD_NUMBER = 1;
    private volatile java.lang.Object version_;
    /**
     * <code>required string version = 1;</code>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string version = 1;</code>
     */
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          version_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string version = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, version_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, version_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.ProjVersion)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.ProjVersion other = (com.nibiru.creator.data.HotPotData.ProjVersion) obj;

      boolean result = true;
      result = result && (hasVersion() == other.hasVersion());
      if (hasVersion()) {
        result = result && getVersion()
            .equals(other.getVersion());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.ProjVersion parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ProjVersion parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ProjVersion parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ProjVersion parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ProjVersion parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ProjVersion parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ProjVersion parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ProjVersion parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ProjVersion parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ProjVersion parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.ProjVersion prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *版本控制
     * </pre>
     *
     * Protobuf type {@code DataFactory.ProjVersion}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.ProjVersion)
        com.nibiru.creator.data.HotPotData.ProjVersionOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ProjVersion_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ProjVersion_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.ProjVersion.class, com.nibiru.creator.data.HotPotData.ProjVersion.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.ProjVersion.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        version_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ProjVersion_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.ProjVersion getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.ProjVersion.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.ProjVersion build() {
        com.nibiru.creator.data.HotPotData.ProjVersion result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.ProjVersion buildPartial() {
        com.nibiru.creator.data.HotPotData.ProjVersion result = new com.nibiru.creator.data.HotPotData.ProjVersion(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.version_ = version_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.ProjVersion) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.ProjVersion)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.ProjVersion other) {
        if (other == com.nibiru.creator.data.HotPotData.ProjVersion.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          bitField0_ |= 0x00000001;
          version_ = other.version_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVersion()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.ProjVersion parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.ProjVersion) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object version_ = "";
      /**
       * <code>required string version = 1;</code>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string version = 1;</code>
       */
      public java.lang.String getVersion() {
        java.lang.Object ref = version_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            version_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string version = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getVersionBytes() {
        java.lang.Object ref = version_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          version_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string version = 1;</code>
       */
      public Builder setVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string version = 1;</code>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = getDefaultInstance().getVersion();
        onChanged();
        return this;
      }
      /**
       * <code>required string version = 1;</code>
       */
      public Builder setVersionBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        version_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.ProjVersion)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.ProjVersion)
    private static final com.nibiru.creator.data.HotPotData.ProjVersion DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.ProjVersion();
    }

    public static com.nibiru.creator.data.HotPotData.ProjVersion getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<ProjVersion>
        PARSER = new com.nibiru.protobuf.AbstractParser<ProjVersion>() {
      public ProjVersion parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new ProjVersion(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<ProjVersion> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<ProjVersion> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.ProjVersion getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Vec2OrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.Vec2)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <code>required float m_X = 1;</code>
     */
    boolean hasMX();
    /**
     * <code>required float m_X = 1;</code>
     */
    float getMX();

    /**
     * <code>required float m_Y = 2;</code>
     */
    boolean hasMY();
    /**
     * <code>required float m_Y = 2;</code>
     */
    float getMY();
  }
  /**
   * <pre>
   *自定义数据结构，用于存放二维数据
   * </pre>
   *
   * Protobuf type {@code DataFactory.Vec2}
   */
  public  static final class Vec2 extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.Vec2)
      Vec2OrBuilder {
    // Use Vec2.newBuilder() to construct.
    private Vec2(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Vec2() {
      mX_ = 0F;
      mY_ = 0F;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Vec2(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              mX_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              mY_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec2_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec2_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.Vec2.class, com.nibiru.creator.data.HotPotData.Vec2.Builder.class);
    }

    private int bitField0_;
    public static final int M_X_FIELD_NUMBER = 1;
    private float mX_;
    /**
     * <code>required float m_X = 1;</code>
     */
    public boolean hasMX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float m_X = 1;</code>
     */
    public float getMX() {
      return mX_;
    }

    public static final int M_Y_FIELD_NUMBER = 2;
    private float mY_;
    /**
     * <code>required float m_Y = 2;</code>
     */
    public boolean hasMY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float m_Y = 2;</code>
     */
    public float getMY() {
      return mY_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, mX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, mY_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(1, mX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(2, mY_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.Vec2)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.Vec2 other = (com.nibiru.creator.data.HotPotData.Vec2) obj;

      boolean result = true;
      result = result && (hasMX() == other.hasMX());
      if (hasMX()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMX())
            == java.lang.Float.floatToIntBits(
                other.getMX()));
      }
      result = result && (hasMY() == other.hasMY());
      if (hasMY()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMY())
            == java.lang.Float.floatToIntBits(
                other.getMY()));
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMX()) {
        hash = (37 * hash) + M_X_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMX());
      }
      if (hasMY()) {
        hash = (37 * hash) + M_Y_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMY());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.Vec2 parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Vec2 parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec2 parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Vec2 parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec2 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Vec2 parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec2 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Vec2 parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec2 parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Vec2 parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.Vec2 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *自定义数据结构，用于存放二维数据
     * </pre>
     *
     * Protobuf type {@code DataFactory.Vec2}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.Vec2)
        com.nibiru.creator.data.HotPotData.Vec2OrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec2_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec2_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.Vec2.class, com.nibiru.creator.data.HotPotData.Vec2.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.Vec2.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        mY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec2_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.Vec2 getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.Vec2 build() {
        com.nibiru.creator.data.HotPotData.Vec2 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.Vec2 buildPartial() {
        com.nibiru.creator.data.HotPotData.Vec2 result = new com.nibiru.creator.data.HotPotData.Vec2(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mX_ = mX_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mY_ = mY_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.Vec2) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.Vec2)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.Vec2 other) {
        if (other == com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) return this;
        if (other.hasMX()) {
          setMX(other.getMX());
        }
        if (other.hasMY()) {
          setMY(other.getMY());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMX()) {
          return false;
        }
        if (!hasMY()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.Vec2 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.Vec2) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float mX_ ;
      /**
       * <code>required float m_X = 1;</code>
       */
      public boolean hasMX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float m_X = 1;</code>
       */
      public float getMX() {
        return mX_;
      }
      /**
       * <code>required float m_X = 1;</code>
       */
      public Builder setMX(float value) {
        bitField0_ |= 0x00000001;
        mX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_X = 1;</code>
       */
      public Builder clearMX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mX_ = 0F;
        onChanged();
        return this;
      }

      private float mY_ ;
      /**
       * <code>required float m_Y = 2;</code>
       */
      public boolean hasMY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float m_Y = 2;</code>
       */
      public float getMY() {
        return mY_;
      }
      /**
       * <code>required float m_Y = 2;</code>
       */
      public Builder setMY(float value) {
        bitField0_ |= 0x00000002;
        mY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_Y = 2;</code>
       */
      public Builder clearMY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mY_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.Vec2)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.Vec2)
    private static final com.nibiru.creator.data.HotPotData.Vec2 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.Vec2();
    }

    public static com.nibiru.creator.data.HotPotData.Vec2 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<Vec2>
        PARSER = new com.nibiru.protobuf.AbstractParser<Vec2>() {
      public Vec2 parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new Vec2(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<Vec2> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<Vec2> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.Vec2 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Vec3OrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.Vec3)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <code>required float m_X = 1;</code>
     */
    boolean hasMX();
    /**
     * <code>required float m_X = 1;</code>
     */
    float getMX();

    /**
     * <code>required float m_Y = 2;</code>
     */
    boolean hasMY();
    /**
     * <code>required float m_Y = 2;</code>
     */
    float getMY();

    /**
     * <code>required float m_Z = 3;</code>
     */
    boolean hasMZ();
    /**
     * <code>required float m_Z = 3;</code>
     */
    float getMZ();
  }
  /**
   * <pre>
   *自定义数据结构，用于存放三维数据
   * </pre>
   *
   * Protobuf type {@code DataFactory.Vec3}
   */
  public  static final class Vec3 extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.Vec3)
      Vec3OrBuilder {
    // Use Vec3.newBuilder() to construct.
    private Vec3(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Vec3() {
      mX_ = 0F;
      mY_ = 0F;
      mZ_ = 0F;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Vec3(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              mX_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              mY_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              mZ_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec3_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec3_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.Vec3.class, com.nibiru.creator.data.HotPotData.Vec3.Builder.class);
    }

    private int bitField0_;
    public static final int M_X_FIELD_NUMBER = 1;
    private float mX_;
    /**
     * <code>required float m_X = 1;</code>
     */
    public boolean hasMX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float m_X = 1;</code>
     */
    public float getMX() {
      return mX_;
    }

    public static final int M_Y_FIELD_NUMBER = 2;
    private float mY_;
    /**
     * <code>required float m_Y = 2;</code>
     */
    public boolean hasMY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float m_Y = 2;</code>
     */
    public float getMY() {
      return mY_;
    }

    public static final int M_Z_FIELD_NUMBER = 3;
    private float mZ_;
    /**
     * <code>required float m_Z = 3;</code>
     */
    public boolean hasMZ() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float m_Z = 3;</code>
     */
    public float getMZ() {
      return mZ_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, mX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, mY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, mZ_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(1, mX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(2, mY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(3, mZ_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.Vec3)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.Vec3 other = (com.nibiru.creator.data.HotPotData.Vec3) obj;

      boolean result = true;
      result = result && (hasMX() == other.hasMX());
      if (hasMX()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMX())
            == java.lang.Float.floatToIntBits(
                other.getMX()));
      }
      result = result && (hasMY() == other.hasMY());
      if (hasMY()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMY())
            == java.lang.Float.floatToIntBits(
                other.getMY()));
      }
      result = result && (hasMZ() == other.hasMZ());
      if (hasMZ()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMZ())
            == java.lang.Float.floatToIntBits(
                other.getMZ()));
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMX()) {
        hash = (37 * hash) + M_X_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMX());
      }
      if (hasMY()) {
        hash = (37 * hash) + M_Y_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMY());
      }
      if (hasMZ()) {
        hash = (37 * hash) + M_Z_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMZ());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.Vec3 parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Vec3 parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec3 parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Vec3 parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec3 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Vec3 parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec3 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Vec3 parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec3 parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Vec3 parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.Vec3 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *自定义数据结构，用于存放三维数据
     * </pre>
     *
     * Protobuf type {@code DataFactory.Vec3}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.Vec3)
        com.nibiru.creator.data.HotPotData.Vec3OrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec3_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec3_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.Vec3.class, com.nibiru.creator.data.HotPotData.Vec3.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.Vec3.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        mY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        mZ_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec3_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.Vec3 getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.Vec3 build() {
        com.nibiru.creator.data.HotPotData.Vec3 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.Vec3 buildPartial() {
        com.nibiru.creator.data.HotPotData.Vec3 result = new com.nibiru.creator.data.HotPotData.Vec3(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mX_ = mX_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mY_ = mY_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mZ_ = mZ_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.Vec3) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.Vec3)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.Vec3 other) {
        if (other == com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance()) return this;
        if (other.hasMX()) {
          setMX(other.getMX());
        }
        if (other.hasMY()) {
          setMY(other.getMY());
        }
        if (other.hasMZ()) {
          setMZ(other.getMZ());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMX()) {
          return false;
        }
        if (!hasMY()) {
          return false;
        }
        if (!hasMZ()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.Vec3 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.Vec3) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float mX_ ;
      /**
       * <code>required float m_X = 1;</code>
       */
      public boolean hasMX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float m_X = 1;</code>
       */
      public float getMX() {
        return mX_;
      }
      /**
       * <code>required float m_X = 1;</code>
       */
      public Builder setMX(float value) {
        bitField0_ |= 0x00000001;
        mX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_X = 1;</code>
       */
      public Builder clearMX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mX_ = 0F;
        onChanged();
        return this;
      }

      private float mY_ ;
      /**
       * <code>required float m_Y = 2;</code>
       */
      public boolean hasMY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float m_Y = 2;</code>
       */
      public float getMY() {
        return mY_;
      }
      /**
       * <code>required float m_Y = 2;</code>
       */
      public Builder setMY(float value) {
        bitField0_ |= 0x00000002;
        mY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_Y = 2;</code>
       */
      public Builder clearMY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mY_ = 0F;
        onChanged();
        return this;
      }

      private float mZ_ ;
      /**
       * <code>required float m_Z = 3;</code>
       */
      public boolean hasMZ() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float m_Z = 3;</code>
       */
      public float getMZ() {
        return mZ_;
      }
      /**
       * <code>required float m_Z = 3;</code>
       */
      public Builder setMZ(float value) {
        bitField0_ |= 0x00000004;
        mZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_Z = 3;</code>
       */
      public Builder clearMZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mZ_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.Vec3)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.Vec3)
    private static final com.nibiru.creator.data.HotPotData.Vec3 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.Vec3();
    }

    public static com.nibiru.creator.data.HotPotData.Vec3 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<Vec3>
        PARSER = new com.nibiru.protobuf.AbstractParser<Vec3>() {
      public Vec3 parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new Vec3(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<Vec3> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<Vec3> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.Vec3 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Vec4OrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.Vec4)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <code>required float m_X = 1;</code>
     */
    boolean hasMX();
    /**
     * <code>required float m_X = 1;</code>
     */
    float getMX();

    /**
     * <code>required float m_Y = 2;</code>
     */
    boolean hasMY();
    /**
     * <code>required float m_Y = 2;</code>
     */
    float getMY();

    /**
     * <code>required float m_Z = 3;</code>
     */
    boolean hasMZ();
    /**
     * <code>required float m_Z = 3;</code>
     */
    float getMZ();

    /**
     * <code>required float m_W = 4;</code>
     */
    boolean hasMW();
    /**
     * <code>required float m_W = 4;</code>
     */
    float getMW();
  }
  /**
   * <pre>
   *自定义数据结构，用于存放四维数据
   * </pre>
   *
   * Protobuf type {@code DataFactory.Vec4}
   */
  public  static final class Vec4 extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.Vec4)
      Vec4OrBuilder {
    // Use Vec4.newBuilder() to construct.
    private Vec4(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Vec4() {
      mX_ = 0F;
      mY_ = 0F;
      mZ_ = 0F;
      mW_ = 0F;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Vec4(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              mX_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              mY_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              mZ_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              mW_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec4_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec4_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.Vec4.class, com.nibiru.creator.data.HotPotData.Vec4.Builder.class);
    }

    private int bitField0_;
    public static final int M_X_FIELD_NUMBER = 1;
    private float mX_;
    /**
     * <code>required float m_X = 1;</code>
     */
    public boolean hasMX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float m_X = 1;</code>
     */
    public float getMX() {
      return mX_;
    }

    public static final int M_Y_FIELD_NUMBER = 2;
    private float mY_;
    /**
     * <code>required float m_Y = 2;</code>
     */
    public boolean hasMY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float m_Y = 2;</code>
     */
    public float getMY() {
      return mY_;
    }

    public static final int M_Z_FIELD_NUMBER = 3;
    private float mZ_;
    /**
     * <code>required float m_Z = 3;</code>
     */
    public boolean hasMZ() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float m_Z = 3;</code>
     */
    public float getMZ() {
      return mZ_;
    }

    public static final int M_W_FIELD_NUMBER = 4;
    private float mW_;
    /**
     * <code>required float m_W = 4;</code>
     */
    public boolean hasMW() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float m_W = 4;</code>
     */
    public float getMW() {
      return mW_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMW()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, mX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, mY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, mZ_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, mW_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(1, mX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(2, mY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(3, mZ_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(4, mW_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.Vec4)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.Vec4 other = (com.nibiru.creator.data.HotPotData.Vec4) obj;

      boolean result = true;
      result = result && (hasMX() == other.hasMX());
      if (hasMX()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMX())
            == java.lang.Float.floatToIntBits(
                other.getMX()));
      }
      result = result && (hasMY() == other.hasMY());
      if (hasMY()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMY())
            == java.lang.Float.floatToIntBits(
                other.getMY()));
      }
      result = result && (hasMZ() == other.hasMZ());
      if (hasMZ()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMZ())
            == java.lang.Float.floatToIntBits(
                other.getMZ()));
      }
      result = result && (hasMW() == other.hasMW());
      if (hasMW()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMW())
            == java.lang.Float.floatToIntBits(
                other.getMW()));
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMX()) {
        hash = (37 * hash) + M_X_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMX());
      }
      if (hasMY()) {
        hash = (37 * hash) + M_Y_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMY());
      }
      if (hasMZ()) {
        hash = (37 * hash) + M_Z_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMZ());
      }
      if (hasMW()) {
        hash = (37 * hash) + M_W_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMW());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.Vec4 parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Vec4 parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec4 parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Vec4 parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec4 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Vec4 parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec4 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Vec4 parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Vec4 parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Vec4 parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.Vec4 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *自定义数据结构，用于存放四维数据
     * </pre>
     *
     * Protobuf type {@code DataFactory.Vec4}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.Vec4)
        com.nibiru.creator.data.HotPotData.Vec4OrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec4_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec4_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.Vec4.class, com.nibiru.creator.data.HotPotData.Vec4.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.Vec4.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        mY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        mZ_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        mW_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Vec4_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.Vec4 getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.Vec4 build() {
        com.nibiru.creator.data.HotPotData.Vec4 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.Vec4 buildPartial() {
        com.nibiru.creator.data.HotPotData.Vec4 result = new com.nibiru.creator.data.HotPotData.Vec4(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mX_ = mX_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mY_ = mY_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mZ_ = mZ_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mW_ = mW_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.Vec4) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.Vec4)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.Vec4 other) {
        if (other == com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance()) return this;
        if (other.hasMX()) {
          setMX(other.getMX());
        }
        if (other.hasMY()) {
          setMY(other.getMY());
        }
        if (other.hasMZ()) {
          setMZ(other.getMZ());
        }
        if (other.hasMW()) {
          setMW(other.getMW());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMX()) {
          return false;
        }
        if (!hasMY()) {
          return false;
        }
        if (!hasMZ()) {
          return false;
        }
        if (!hasMW()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.Vec4 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.Vec4) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float mX_ ;
      /**
       * <code>required float m_X = 1;</code>
       */
      public boolean hasMX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float m_X = 1;</code>
       */
      public float getMX() {
        return mX_;
      }
      /**
       * <code>required float m_X = 1;</code>
       */
      public Builder setMX(float value) {
        bitField0_ |= 0x00000001;
        mX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_X = 1;</code>
       */
      public Builder clearMX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mX_ = 0F;
        onChanged();
        return this;
      }

      private float mY_ ;
      /**
       * <code>required float m_Y = 2;</code>
       */
      public boolean hasMY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float m_Y = 2;</code>
       */
      public float getMY() {
        return mY_;
      }
      /**
       * <code>required float m_Y = 2;</code>
       */
      public Builder setMY(float value) {
        bitField0_ |= 0x00000002;
        mY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_Y = 2;</code>
       */
      public Builder clearMY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mY_ = 0F;
        onChanged();
        return this;
      }

      private float mZ_ ;
      /**
       * <code>required float m_Z = 3;</code>
       */
      public boolean hasMZ() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float m_Z = 3;</code>
       */
      public float getMZ() {
        return mZ_;
      }
      /**
       * <code>required float m_Z = 3;</code>
       */
      public Builder setMZ(float value) {
        bitField0_ |= 0x00000004;
        mZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_Z = 3;</code>
       */
      public Builder clearMZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mZ_ = 0F;
        onChanged();
        return this;
      }

      private float mW_ ;
      /**
       * <code>required float m_W = 4;</code>
       */
      public boolean hasMW() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float m_W = 4;</code>
       */
      public float getMW() {
        return mW_;
      }
      /**
       * <code>required float m_W = 4;</code>
       */
      public Builder setMW(float value) {
        bitField0_ |= 0x00000008;
        mW_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_W = 4;</code>
       */
      public Builder clearMW() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mW_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.Vec4)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.Vec4)
    private static final com.nibiru.creator.data.HotPotData.Vec4 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.Vec4();
    }

    public static com.nibiru.creator.data.HotPotData.Vec4 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<Vec4>
        PARSER = new com.nibiru.protobuf.AbstractParser<Vec4>() {
      public Vec4 parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new Vec4(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<Vec4> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<Vec4> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.Vec4 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface QuaternionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.Quaternion)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <code>required float m_Scalar = 1;</code>
     */
    boolean hasMScalar();
    /**
     * <code>required float m_Scalar = 1;</code>
     */
    float getMScalar();

    /**
     * <code>required float m_X = 2;</code>
     */
    boolean hasMX();
    /**
     * <code>required float m_X = 2;</code>
     */
    float getMX();

    /**
     * <code>required float m_Y = 3;</code>
     */
    boolean hasMY();
    /**
     * <code>required float m_Y = 3;</code>
     */
    float getMY();

    /**
     * <code>required float m_Z = 4;</code>
     */
    boolean hasMZ();
    /**
     * <code>required float m_Z = 4;</code>
     */
    float getMZ();
  }
  /**
   * <pre>
   * 四元数
   * </pre>
   *
   * Protobuf type {@code DataFactory.Quaternion}
   */
  public  static final class Quaternion extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.Quaternion)
      QuaternionOrBuilder {
    // Use Quaternion.newBuilder() to construct.
    private Quaternion(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Quaternion() {
      mScalar_ = 0F;
      mX_ = 0F;
      mY_ = 0F;
      mZ_ = 0F;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Quaternion(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              mScalar_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              mX_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              mY_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              mZ_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Quaternion_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Quaternion_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.Quaternion.class, com.nibiru.creator.data.HotPotData.Quaternion.Builder.class);
    }

    private int bitField0_;
    public static final int M_SCALAR_FIELD_NUMBER = 1;
    private float mScalar_;
    /**
     * <code>required float m_Scalar = 1;</code>
     */
    public boolean hasMScalar() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float m_Scalar = 1;</code>
     */
    public float getMScalar() {
      return mScalar_;
    }

    public static final int M_X_FIELD_NUMBER = 2;
    private float mX_;
    /**
     * <code>required float m_X = 2;</code>
     */
    public boolean hasMX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float m_X = 2;</code>
     */
    public float getMX() {
      return mX_;
    }

    public static final int M_Y_FIELD_NUMBER = 3;
    private float mY_;
    /**
     * <code>required float m_Y = 3;</code>
     */
    public boolean hasMY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float m_Y = 3;</code>
     */
    public float getMY() {
      return mY_;
    }

    public static final int M_Z_FIELD_NUMBER = 4;
    private float mZ_;
    /**
     * <code>required float m_Z = 4;</code>
     */
    public boolean hasMZ() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float m_Z = 4;</code>
     */
    public float getMZ() {
      return mZ_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMScalar()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, mScalar_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, mX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, mY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, mZ_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(1, mScalar_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(2, mX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(3, mY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(4, mZ_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.Quaternion)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.Quaternion other = (com.nibiru.creator.data.HotPotData.Quaternion) obj;

      boolean result = true;
      result = result && (hasMScalar() == other.hasMScalar());
      if (hasMScalar()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMScalar())
            == java.lang.Float.floatToIntBits(
                other.getMScalar()));
      }
      result = result && (hasMX() == other.hasMX());
      if (hasMX()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMX())
            == java.lang.Float.floatToIntBits(
                other.getMX()));
      }
      result = result && (hasMY() == other.hasMY());
      if (hasMY()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMY())
            == java.lang.Float.floatToIntBits(
                other.getMY()));
      }
      result = result && (hasMZ() == other.hasMZ());
      if (hasMZ()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMZ())
            == java.lang.Float.floatToIntBits(
                other.getMZ()));
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMScalar()) {
        hash = (37 * hash) + M_SCALAR_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMScalar());
      }
      if (hasMX()) {
        hash = (37 * hash) + M_X_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMX());
      }
      if (hasMY()) {
        hash = (37 * hash) + M_Y_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMY());
      }
      if (hasMZ()) {
        hash = (37 * hash) + M_Z_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMZ());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.Quaternion parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Quaternion parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Quaternion parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Quaternion parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Quaternion parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Quaternion parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Quaternion parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Quaternion parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Quaternion parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Quaternion parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.Quaternion prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 四元数
     * </pre>
     *
     * Protobuf type {@code DataFactory.Quaternion}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.Quaternion)
        com.nibiru.creator.data.HotPotData.QuaternionOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Quaternion_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Quaternion_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.Quaternion.class, com.nibiru.creator.data.HotPotData.Quaternion.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.Quaternion.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mScalar_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        mX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        mY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        mZ_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Quaternion_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.Quaternion getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.Quaternion build() {
        com.nibiru.creator.data.HotPotData.Quaternion result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.Quaternion buildPartial() {
        com.nibiru.creator.data.HotPotData.Quaternion result = new com.nibiru.creator.data.HotPotData.Quaternion(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mScalar_ = mScalar_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mX_ = mX_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mY_ = mY_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mZ_ = mZ_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.Quaternion) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.Quaternion)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.Quaternion other) {
        if (other == com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance()) return this;
        if (other.hasMScalar()) {
          setMScalar(other.getMScalar());
        }
        if (other.hasMX()) {
          setMX(other.getMX());
        }
        if (other.hasMY()) {
          setMY(other.getMY());
        }
        if (other.hasMZ()) {
          setMZ(other.getMZ());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMScalar()) {
          return false;
        }
        if (!hasMX()) {
          return false;
        }
        if (!hasMY()) {
          return false;
        }
        if (!hasMZ()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.Quaternion parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.Quaternion) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float mScalar_ ;
      /**
       * <code>required float m_Scalar = 1;</code>
       */
      public boolean hasMScalar() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float m_Scalar = 1;</code>
       */
      public float getMScalar() {
        return mScalar_;
      }
      /**
       * <code>required float m_Scalar = 1;</code>
       */
      public Builder setMScalar(float value) {
        bitField0_ |= 0x00000001;
        mScalar_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_Scalar = 1;</code>
       */
      public Builder clearMScalar() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mScalar_ = 0F;
        onChanged();
        return this;
      }

      private float mX_ ;
      /**
       * <code>required float m_X = 2;</code>
       */
      public boolean hasMX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float m_X = 2;</code>
       */
      public float getMX() {
        return mX_;
      }
      /**
       * <code>required float m_X = 2;</code>
       */
      public Builder setMX(float value) {
        bitField0_ |= 0x00000002;
        mX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_X = 2;</code>
       */
      public Builder clearMX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mX_ = 0F;
        onChanged();
        return this;
      }

      private float mY_ ;
      /**
       * <code>required float m_Y = 3;</code>
       */
      public boolean hasMY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float m_Y = 3;</code>
       */
      public float getMY() {
        return mY_;
      }
      /**
       * <code>required float m_Y = 3;</code>
       */
      public Builder setMY(float value) {
        bitField0_ |= 0x00000004;
        mY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_Y = 3;</code>
       */
      public Builder clearMY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mY_ = 0F;
        onChanged();
        return this;
      }

      private float mZ_ ;
      /**
       * <code>required float m_Z = 4;</code>
       */
      public boolean hasMZ() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float m_Z = 4;</code>
       */
      public float getMZ() {
        return mZ_;
      }
      /**
       * <code>required float m_Z = 4;</code>
       */
      public Builder setMZ(float value) {
        bitField0_ |= 0x00000008;
        mZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float m_Z = 4;</code>
       */
      public Builder clearMZ() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mZ_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.Quaternion)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.Quaternion)
    private static final com.nibiru.creator.data.HotPotData.Quaternion DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.Quaternion();
    }

    public static com.nibiru.creator.data.HotPotData.Quaternion getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<Quaternion>
        PARSER = new com.nibiru.protobuf.AbstractParser<Quaternion>() {
      public Quaternion parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new Quaternion(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<Quaternion> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<Quaternion> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.Quaternion getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HotPotAppearanceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.HotPotAppearance)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *热点图标路径
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    boolean hasMAppearanceImage();
    /**
     * <pre>
     *热点图标路径
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    java.lang.String getMAppearanceImage();
    /**
     * <pre>
     *热点图标路径
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMAppearanceImageBytes();

    /**
     * <pre>
     *锚点位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    boolean hasMAnchorPoint();
    /**
     * <pre>
     *锚点位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMAnchorPoint();
    /**
     * <pre>
     *锚点位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMAnchorPointOrBuilder();

    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    boolean hasMAppearanceName();
    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    java.lang.String getMAppearanceName();
    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMAppearanceNameBytes();

    /**
     * <pre>
     *模型缩放比例
     * </pre>
     *
     * <code>optional float m_scaleSize = 4;</code>
     */
    boolean hasMScaleSize();
    /**
     * <pre>
     *模型缩放比例
     * </pre>
     *
     * <code>optional float m_scaleSize = 4;</code>
     */
    float getMScaleSize();

    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
     */
    boolean hasMTranslate();
    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec3 getMTranslate();
    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec3OrBuilder getMTranslateOrBuilder();

    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
     */
    boolean hasMRotation();
    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
     */
    com.nibiru.creator.data.HotPotData.Quaternion getMRotation();
    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
     */
    com.nibiru.creator.data.HotPotData.QuaternionOrBuilder getMRotationOrBuilder();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional int32 m_Count = 8;</code>
     */
    boolean hasMCount();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional int32 m_Count = 8;</code>
     */
    int getMCount();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
     */
    boolean hasMTranslateSize();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec3 getMTranslateSize();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec3OrBuilder getMTranslateSizeOrBuilder();
  }
  /**
   * <pre>
   *热点的外观
   * </pre>
   *
   * Protobuf type {@code DataFactory.HotPotAppearance}
   */
  public  static final class HotPotAppearance extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.HotPotAppearance)
      HotPotAppearanceOrBuilder {
    // Use HotPotAppearance.newBuilder() to construct.
    private HotPotAppearance(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HotPotAppearance() {
      mAppearanceImage_ = "";
      mAppearanceName_ = "";
      mScaleSize_ = 0F;
      mFileUrl_ = "";
      mCount_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HotPotAppearance(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mAppearanceImage_ = bs;
              break;
            }
            case 18: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mAnchorPoint_.toBuilder();
              }
              mAnchorPoint_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mAnchorPoint_);
                mAnchorPoint_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mAppearanceName_ = bs;
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              mScaleSize_ = input.readFloat();
              break;
            }
            case 42: {
              com.nibiru.creator.data.HotPotData.Vec3.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = mTranslate_.toBuilder();
              }
              mTranslate_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec3.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mTranslate_);
                mTranslate_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.nibiru.creator.data.HotPotData.Quaternion.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = mRotation_.toBuilder();
              }
              mRotation_ = input.readMessage(com.nibiru.creator.data.HotPotData.Quaternion.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mRotation_);
                mRotation_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              mFileUrl_ = bs;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              mCount_ = input.readInt32();
              break;
            }
            case 74: {
              com.nibiru.creator.data.HotPotData.Vec3.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = mTranslateSize_.toBuilder();
              }
              mTranslateSize_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec3.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mTranslateSize_);
                mTranslateSize_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPotAppearance_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPotAppearance_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.HotPotAppearance.class, com.nibiru.creator.data.HotPotData.HotPotAppearance.Builder.class);
    }

    private int bitField0_;
    public static final int M_APPEARANCEIMAGE_FIELD_NUMBER = 1;
    private volatile java.lang.Object mAppearanceImage_;
    /**
     * <pre>
     *热点图标路径
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    public boolean hasMAppearanceImage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *热点图标路径
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    public java.lang.String getMAppearanceImage() {
      java.lang.Object ref = mAppearanceImage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mAppearanceImage_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *热点图标路径
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMAppearanceImageBytes() {
      java.lang.Object ref = mAppearanceImage_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mAppearanceImage_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ANCHORPOINT_FIELD_NUMBER = 2;
    private com.nibiru.creator.data.HotPotData.Vec2 mAnchorPoint_;
    /**
     * <pre>
     *锚点位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    public boolean hasMAnchorPoint() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *锚点位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMAnchorPoint() {
      return mAnchorPoint_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mAnchorPoint_;
    }
    /**
     * <pre>
     *锚点位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMAnchorPointOrBuilder() {
      return mAnchorPoint_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mAnchorPoint_;
    }

    public static final int M_APPEARANCENAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object mAppearanceName_;
    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    public boolean hasMAppearanceName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    public java.lang.String getMAppearanceName() {
      java.lang.Object ref = mAppearanceName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mAppearanceName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMAppearanceNameBytes() {
      java.lang.Object ref = mAppearanceName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mAppearanceName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_SCALESIZE_FIELD_NUMBER = 4;
    private float mScaleSize_;
    /**
     * <pre>
     *模型缩放比例
     * </pre>
     *
     * <code>optional float m_scaleSize = 4;</code>
     */
    public boolean hasMScaleSize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *模型缩放比例
     * </pre>
     *
     * <code>optional float m_scaleSize = 4;</code>
     */
    public float getMScaleSize() {
      return mScaleSize_;
    }

    public static final int M_TRANSLATE_FIELD_NUMBER = 5;
    private com.nibiru.creator.data.HotPotData.Vec3 mTranslate_;
    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
     */
    public boolean hasMTranslate() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec3 getMTranslate() {
      return mTranslate_ == null ? com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslate_;
    }
    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec3OrBuilder getMTranslateOrBuilder() {
      return mTranslate_ == null ? com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslate_;
    }

    public static final int M_ROTATION_FIELD_NUMBER = 6;
    private com.nibiru.creator.data.HotPotData.Quaternion mRotation_;
    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
     */
    public boolean hasMRotation() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
     */
    public com.nibiru.creator.data.HotPotData.Quaternion getMRotation() {
      return mRotation_ == null ? com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance() : mRotation_;
    }
    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
     */
    public com.nibiru.creator.data.HotPotData.QuaternionOrBuilder getMRotationOrBuilder() {
      return mRotation_ == null ? com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance() : mRotation_;
    }

    public static final int M_FILEURL_FIELD_NUMBER = 7;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_COUNT_FIELD_NUMBER = 8;
    private int mCount_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional int32 m_Count = 8;</code>
     */
    public boolean hasMCount() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional int32 m_Count = 8;</code>
     */
    public int getMCount() {
      return mCount_;
    }

    public static final int M_TRANSLATESIZE_FIELD_NUMBER = 9;
    private com.nibiru.creator.data.HotPotData.Vec3 mTranslateSize_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
     */
    public boolean hasMTranslateSize() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec3 getMTranslateSize() {
      return mTranslateSize_ == null ? com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslateSize_;
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec3OrBuilder getMTranslateSizeOrBuilder() {
      return mTranslateSize_ == null ? com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslateSize_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMAppearanceImage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAnchorPoint()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAppearanceName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMAnchorPoint().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMTranslate()) {
        if (!getMTranslate().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMRotation()) {
        if (!getMRotation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMTranslateSize()) {
        if (!getMTranslateSize().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mAppearanceImage_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getMAnchorPoint());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mAppearanceName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, mScaleSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getMTranslate());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, getMRotation());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 7, mFileUrl_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, mCount_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, getMTranslateSize());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mAppearanceImage_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(2, getMAnchorPoint());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mAppearanceName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(4, mScaleSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(5, getMTranslate());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(6, getMRotation());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(7, mFileUrl_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(8, mCount_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(9, getMTranslateSize());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.HotPotAppearance)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.HotPotAppearance other = (com.nibiru.creator.data.HotPotData.HotPotAppearance) obj;

      boolean result = true;
      result = result && (hasMAppearanceImage() == other.hasMAppearanceImage());
      if (hasMAppearanceImage()) {
        result = result && getMAppearanceImage()
            .equals(other.getMAppearanceImage());
      }
      result = result && (hasMAnchorPoint() == other.hasMAnchorPoint());
      if (hasMAnchorPoint()) {
        result = result && getMAnchorPoint()
            .equals(other.getMAnchorPoint());
      }
      result = result && (hasMAppearanceName() == other.hasMAppearanceName());
      if (hasMAppearanceName()) {
        result = result && getMAppearanceName()
            .equals(other.getMAppearanceName());
      }
      result = result && (hasMScaleSize() == other.hasMScaleSize());
      if (hasMScaleSize()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMScaleSize())
            == java.lang.Float.floatToIntBits(
                other.getMScaleSize()));
      }
      result = result && (hasMTranslate() == other.hasMTranslate());
      if (hasMTranslate()) {
        result = result && getMTranslate()
            .equals(other.getMTranslate());
      }
      result = result && (hasMRotation() == other.hasMRotation());
      if (hasMRotation()) {
        result = result && getMRotation()
            .equals(other.getMRotation());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && (hasMCount() == other.hasMCount());
      if (hasMCount()) {
        result = result && (getMCount()
            == other.getMCount());
      }
      result = result && (hasMTranslateSize() == other.hasMTranslateSize());
      if (hasMTranslateSize()) {
        result = result && getMTranslateSize()
            .equals(other.getMTranslateSize());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMAppearanceImage()) {
        hash = (37 * hash) + M_APPEARANCEIMAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMAppearanceImage().hashCode();
      }
      if (hasMAnchorPoint()) {
        hash = (37 * hash) + M_ANCHORPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getMAnchorPoint().hashCode();
      }
      if (hasMAppearanceName()) {
        hash = (37 * hash) + M_APPEARANCENAME_FIELD_NUMBER;
        hash = (53 * hash) + getMAppearanceName().hashCode();
      }
      if (hasMScaleSize()) {
        hash = (37 * hash) + M_SCALESIZE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMScaleSize());
      }
      if (hasMTranslate()) {
        hash = (37 * hash) + M_TRANSLATE_FIELD_NUMBER;
        hash = (53 * hash) + getMTranslate().hashCode();
      }
      if (hasMRotation()) {
        hash = (37 * hash) + M_ROTATION_FIELD_NUMBER;
        hash = (53 * hash) + getMRotation().hashCode();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      if (hasMCount()) {
        hash = (37 * hash) + M_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getMCount();
      }
      if (hasMTranslateSize()) {
        hash = (37 * hash) + M_TRANSLATESIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMTranslateSize().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.HotPotAppearance parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAppearance parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAppearance parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAppearance parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAppearance parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAppearance parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAppearance parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAppearance parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAppearance parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAppearance parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.HotPotAppearance prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *热点的外观
     * </pre>
     *
     * Protobuf type {@code DataFactory.HotPotAppearance}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.HotPotAppearance)
        com.nibiru.creator.data.HotPotData.HotPotAppearanceOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPotAppearance_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPotAppearance_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.HotPotAppearance.class, com.nibiru.creator.data.HotPotData.HotPotAppearance.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.HotPotAppearance.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMAnchorPointFieldBuilder();
          getMTranslateFieldBuilder();
          getMRotationFieldBuilder();
          getMTranslateSizeFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mAppearanceImage_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (mAnchorPointBuilder_ == null) {
          mAnchorPoint_ = null;
        } else {
          mAnchorPointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        mAppearanceName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        mScaleSize_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (mTranslateBuilder_ == null) {
          mTranslate_ = null;
        } else {
          mTranslateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (mRotationBuilder_ == null) {
          mRotation_ = null;
        } else {
          mRotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        mCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        if (mTranslateSizeBuilder_ == null) {
          mTranslateSize_ = null;
        } else {
          mTranslateSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPotAppearance_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.HotPotAppearance getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.HotPotAppearance.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.HotPotAppearance build() {
        com.nibiru.creator.data.HotPotData.HotPotAppearance result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.HotPotAppearance buildPartial() {
        com.nibiru.creator.data.HotPotData.HotPotAppearance result = new com.nibiru.creator.data.HotPotData.HotPotAppearance(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mAppearanceImage_ = mAppearanceImage_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (mAnchorPointBuilder_ == null) {
          result.mAnchorPoint_ = mAnchorPoint_;
        } else {
          result.mAnchorPoint_ = mAnchorPointBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mAppearanceName_ = mAppearanceName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mScaleSize_ = mScaleSize_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (mTranslateBuilder_ == null) {
          result.mTranslate_ = mTranslate_;
        } else {
          result.mTranslate_ = mTranslateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (mRotationBuilder_ == null) {
          result.mRotation_ = mRotation_;
        } else {
          result.mRotation_ = mRotationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mFileUrl_ = mFileUrl_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mCount_ = mCount_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (mTranslateSizeBuilder_ == null) {
          result.mTranslateSize_ = mTranslateSize_;
        } else {
          result.mTranslateSize_ = mTranslateSizeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.HotPotAppearance) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.HotPotAppearance)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.HotPotAppearance other) {
        if (other == com.nibiru.creator.data.HotPotData.HotPotAppearance.getDefaultInstance()) return this;
        if (other.hasMAppearanceImage()) {
          bitField0_ |= 0x00000001;
          mAppearanceImage_ = other.mAppearanceImage_;
          onChanged();
        }
        if (other.hasMAnchorPoint()) {
          mergeMAnchorPoint(other.getMAnchorPoint());
        }
        if (other.hasMAppearanceName()) {
          bitField0_ |= 0x00000004;
          mAppearanceName_ = other.mAppearanceName_;
          onChanged();
        }
        if (other.hasMScaleSize()) {
          setMScaleSize(other.getMScaleSize());
        }
        if (other.hasMTranslate()) {
          mergeMTranslate(other.getMTranslate());
        }
        if (other.hasMRotation()) {
          mergeMRotation(other.getMRotation());
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00000040;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        if (other.hasMCount()) {
          setMCount(other.getMCount());
        }
        if (other.hasMTranslateSize()) {
          mergeMTranslateSize(other.getMTranslateSize());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMAppearanceImage()) {
          return false;
        }
        if (!hasMAnchorPoint()) {
          return false;
        }
        if (!hasMAppearanceName()) {
          return false;
        }
        if (!getMAnchorPoint().isInitialized()) {
          return false;
        }
        if (hasMTranslate()) {
          if (!getMTranslate().isInitialized()) {
            return false;
          }
        }
        if (hasMRotation()) {
          if (!getMRotation().isInitialized()) {
            return false;
          }
        }
        if (hasMTranslateSize()) {
          if (!getMTranslateSize().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.HotPotAppearance parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.HotPotAppearance) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mAppearanceImage_ = "";
      /**
       * <pre>
       *热点图标路径
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public boolean hasMAppearanceImage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *热点图标路径
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public java.lang.String getMAppearanceImage() {
        java.lang.Object ref = mAppearanceImage_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mAppearanceImage_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *热点图标路径
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMAppearanceImageBytes() {
        java.lang.Object ref = mAppearanceImage_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mAppearanceImage_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *热点图标路径
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public Builder setMAppearanceImage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mAppearanceImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点图标路径
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public Builder clearMAppearanceImage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mAppearanceImage_ = getDefaultInstance().getMAppearanceImage();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点图标路径
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public Builder setMAppearanceImageBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mAppearanceImage_ = value;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mAnchorPoint_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mAnchorPointBuilder_;
      /**
       * <pre>
       *锚点位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public boolean hasMAnchorPoint() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *锚点位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMAnchorPoint() {
        if (mAnchorPointBuilder_ == null) {
          return mAnchorPoint_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mAnchorPoint_;
        } else {
          return mAnchorPointBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *锚点位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public Builder setMAnchorPoint(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mAnchorPointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mAnchorPoint_ = value;
          onChanged();
        } else {
          mAnchorPointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *锚点位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public Builder setMAnchorPoint(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mAnchorPointBuilder_ == null) {
          mAnchorPoint_ = builderForValue.build();
          onChanged();
        } else {
          mAnchorPointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *锚点位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public Builder mergeMAnchorPoint(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mAnchorPointBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              mAnchorPoint_ != null &&
              mAnchorPoint_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mAnchorPoint_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mAnchorPoint_).mergeFrom(value).buildPartial();
          } else {
            mAnchorPoint_ = value;
          }
          onChanged();
        } else {
          mAnchorPointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *锚点位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public Builder clearMAnchorPoint() {
        if (mAnchorPointBuilder_ == null) {
          mAnchorPoint_ = null;
          onChanged();
        } else {
          mAnchorPointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       *锚点位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMAnchorPointBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMAnchorPointFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *锚点位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMAnchorPointOrBuilder() {
        if (mAnchorPointBuilder_ != null) {
          return mAnchorPointBuilder_.getMessageOrBuilder();
        } else {
          return mAnchorPoint_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mAnchorPoint_;
        }
      }
      /**
       * <pre>
       *锚点位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMAnchorPointFieldBuilder() {
        if (mAnchorPointBuilder_ == null) {
          mAnchorPointBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMAnchorPoint(),
                  getParentForChildren(),
                  isClean());
          mAnchorPoint_ = null;
        }
        return mAnchorPointBuilder_;
      }

      private java.lang.Object mAppearanceName_ = "";
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public boolean hasMAppearanceName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public java.lang.String getMAppearanceName() {
        java.lang.Object ref = mAppearanceName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mAppearanceName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMAppearanceNameBytes() {
        java.lang.Object ref = mAppearanceName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mAppearanceName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public Builder setMAppearanceName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mAppearanceName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public Builder clearMAppearanceName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mAppearanceName_ = getDefaultInstance().getMAppearanceName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public Builder setMAppearanceNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mAppearanceName_ = value;
        onChanged();
        return this;
      }

      private float mScaleSize_ ;
      /**
       * <pre>
       *模型缩放比例
       * </pre>
       *
       * <code>optional float m_scaleSize = 4;</code>
       */
      public boolean hasMScaleSize() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *模型缩放比例
       * </pre>
       *
       * <code>optional float m_scaleSize = 4;</code>
       */
      public float getMScaleSize() {
        return mScaleSize_;
      }
      /**
       * <pre>
       *模型缩放比例
       * </pre>
       *
       * <code>optional float m_scaleSize = 4;</code>
       */
      public Builder setMScaleSize(float value) {
        bitField0_ |= 0x00000008;
        mScaleSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *模型缩放比例
       * </pre>
       *
       * <code>optional float m_scaleSize = 4;</code>
       */
      public Builder clearMScaleSize() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mScaleSize_ = 0F;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec3 mTranslate_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec3, com.nibiru.creator.data.HotPotData.Vec3.Builder, com.nibiru.creator.data.HotPotData.Vec3OrBuilder> mTranslateBuilder_;
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
       */
      public boolean hasMTranslate() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec3 getMTranslate() {
        if (mTranslateBuilder_ == null) {
          return mTranslate_ == null ? com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslate_;
        } else {
          return mTranslateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
       */
      public Builder setMTranslate(com.nibiru.creator.data.HotPotData.Vec3 value) {
        if (mTranslateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mTranslate_ = value;
          onChanged();
        } else {
          mTranslateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
       */
      public Builder setMTranslate(
          com.nibiru.creator.data.HotPotData.Vec3.Builder builderForValue) {
        if (mTranslateBuilder_ == null) {
          mTranslate_ = builderForValue.build();
          onChanged();
        } else {
          mTranslateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
       */
      public Builder mergeMTranslate(com.nibiru.creator.data.HotPotData.Vec3 value) {
        if (mTranslateBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              mTranslate_ != null &&
              mTranslate_ != com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance()) {
            mTranslate_ =
              com.nibiru.creator.data.HotPotData.Vec3.newBuilder(mTranslate_).mergeFrom(value).buildPartial();
          } else {
            mTranslate_ = value;
          }
          onChanged();
        } else {
          mTranslateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
       */
      public Builder clearMTranslate() {
        if (mTranslateBuilder_ == null) {
          mTranslate_ = null;
          onChanged();
        } else {
          mTranslateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec3.Builder getMTranslateBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMTranslateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec3OrBuilder getMTranslateOrBuilder() {
        if (mTranslateBuilder_ != null) {
          return mTranslateBuilder_.getMessageOrBuilder();
        } else {
          return mTranslate_ == null ?
              com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslate_;
        }
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_translate = 5;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec3, com.nibiru.creator.data.HotPotData.Vec3.Builder, com.nibiru.creator.data.HotPotData.Vec3OrBuilder> 
          getMTranslateFieldBuilder() {
        if (mTranslateBuilder_ == null) {
          mTranslateBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec3, com.nibiru.creator.data.HotPotData.Vec3.Builder, com.nibiru.creator.data.HotPotData.Vec3OrBuilder>(
                  getMTranslate(),
                  getParentForChildren(),
                  isClean());
          mTranslate_ = null;
        }
        return mTranslateBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.Quaternion mRotation_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Quaternion, com.nibiru.creator.data.HotPotData.Quaternion.Builder, com.nibiru.creator.data.HotPotData.QuaternionOrBuilder> mRotationBuilder_;
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
       */
      public boolean hasMRotation() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.Quaternion getMRotation() {
        if (mRotationBuilder_ == null) {
          return mRotation_ == null ? com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance() : mRotation_;
        } else {
          return mRotationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
       */
      public Builder setMRotation(com.nibiru.creator.data.HotPotData.Quaternion value) {
        if (mRotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mRotation_ = value;
          onChanged();
        } else {
          mRotationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
       */
      public Builder setMRotation(
          com.nibiru.creator.data.HotPotData.Quaternion.Builder builderForValue) {
        if (mRotationBuilder_ == null) {
          mRotation_ = builderForValue.build();
          onChanged();
        } else {
          mRotationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
       */
      public Builder mergeMRotation(com.nibiru.creator.data.HotPotData.Quaternion value) {
        if (mRotationBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              mRotation_ != null &&
              mRotation_ != com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance()) {
            mRotation_ =
              com.nibiru.creator.data.HotPotData.Quaternion.newBuilder(mRotation_).mergeFrom(value).buildPartial();
          } else {
            mRotation_ = value;
          }
          onChanged();
        } else {
          mRotationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
       */
      public Builder clearMRotation() {
        if (mRotationBuilder_ == null) {
          mRotation_ = null;
          onChanged();
        } else {
          mRotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.Quaternion.Builder getMRotationBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getMRotationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.QuaternionOrBuilder getMRotationOrBuilder() {
        if (mRotationBuilder_ != null) {
          return mRotationBuilder_.getMessageOrBuilder();
        } else {
          return mRotation_ == null ?
              com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance() : mRotation_;
        }
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>optional .DataFactory.Quaternion m_rotation = 6;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Quaternion, com.nibiru.creator.data.HotPotData.Quaternion.Builder, com.nibiru.creator.data.HotPotData.QuaternionOrBuilder> 
          getMRotationFieldBuilder() {
        if (mRotationBuilder_ == null) {
          mRotationBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Quaternion, com.nibiru.creator.data.HotPotData.Quaternion.Builder, com.nibiru.creator.data.HotPotData.QuaternionOrBuilder>(
                  getMRotation(),
                  getParentForChildren(),
                  isClean());
          mRotation_ = null;
        }
        return mRotationBuilder_;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mFileUrl_ = value;
        onChanged();
        return this;
      }

      private int mCount_ ;
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional int32 m_Count = 8;</code>
       */
      public boolean hasMCount() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional int32 m_Count = 8;</code>
       */
      public int getMCount() {
        return mCount_;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional int32 m_Count = 8;</code>
       */
      public Builder setMCount(int value) {
        bitField0_ |= 0x00000080;
        mCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional int32 m_Count = 8;</code>
       */
      public Builder clearMCount() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mCount_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec3 mTranslateSize_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec3, com.nibiru.creator.data.HotPotData.Vec3.Builder, com.nibiru.creator.data.HotPotData.Vec3OrBuilder> mTranslateSizeBuilder_;
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
       */
      public boolean hasMTranslateSize() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec3 getMTranslateSize() {
        if (mTranslateSizeBuilder_ == null) {
          return mTranslateSize_ == null ? com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslateSize_;
        } else {
          return mTranslateSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
       */
      public Builder setMTranslateSize(com.nibiru.creator.data.HotPotData.Vec3 value) {
        if (mTranslateSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mTranslateSize_ = value;
          onChanged();
        } else {
          mTranslateSizeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
       */
      public Builder setMTranslateSize(
          com.nibiru.creator.data.HotPotData.Vec3.Builder builderForValue) {
        if (mTranslateSizeBuilder_ == null) {
          mTranslateSize_ = builderForValue.build();
          onChanged();
        } else {
          mTranslateSizeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
       */
      public Builder mergeMTranslateSize(com.nibiru.creator.data.HotPotData.Vec3 value) {
        if (mTranslateSizeBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              mTranslateSize_ != null &&
              mTranslateSize_ != com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance()) {
            mTranslateSize_ =
              com.nibiru.creator.data.HotPotData.Vec3.newBuilder(mTranslateSize_).mergeFrom(value).buildPartial();
          } else {
            mTranslateSize_ = value;
          }
          onChanged();
        } else {
          mTranslateSizeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
       */
      public Builder clearMTranslateSize() {
        if (mTranslateSizeBuilder_ == null) {
          mTranslateSize_ = null;
          onChanged();
        } else {
          mTranslateSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec3.Builder getMTranslateSizeBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getMTranslateSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec3OrBuilder getMTranslateSizeOrBuilder() {
        if (mTranslateSizeBuilder_ != null) {
          return mTranslateSizeBuilder_.getMessageOrBuilder();
        } else {
          return mTranslateSize_ == null ?
              com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslateSize_;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional .DataFactory.Vec3 m_TranslateSize = 9;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec3, com.nibiru.creator.data.HotPotData.Vec3.Builder, com.nibiru.creator.data.HotPotData.Vec3OrBuilder> 
          getMTranslateSizeFieldBuilder() {
        if (mTranslateSizeBuilder_ == null) {
          mTranslateSizeBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec3, com.nibiru.creator.data.HotPotData.Vec3.Builder, com.nibiru.creator.data.HotPotData.Vec3OrBuilder>(
                  getMTranslateSize(),
                  getParentForChildren(),
                  isClean());
          mTranslateSize_ = null;
        }
        return mTranslateSizeBuilder_;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.HotPotAppearance)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.HotPotAppearance)
    private static final com.nibiru.creator.data.HotPotData.HotPotAppearance DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.HotPotAppearance();
    }

    public static com.nibiru.creator.data.HotPotData.HotPotAppearance getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<HotPotAppearance>
        PARSER = new com.nibiru.protobuf.AbstractParser<HotPotAppearance>() {
      public HotPotAppearance parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new HotPotAppearance(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<HotPotAppearance> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<HotPotAppearance> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.HotPotAppearance getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HotPotAttributeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.HotPotAttribute)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *类型
     * </pre>
     *
     * <code>required .DataFactory.HotPotEnum m_HotPotType = 1;</code>
     */
    boolean hasMHotPotType();
    /**
     * <pre>
     *类型
     * </pre>
     *
     * <code>required .DataFactory.HotPotEnum m_HotPotType = 1;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPotEnum getMHotPotType();

    /**
     * <pre>
     *外观
     * </pre>
     *
     * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
     */
    boolean hasMAppearance();
    /**
     * <pre>
     *外观
     * </pre>
     *
     * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPotAppearance getMAppearance();
    /**
     * <pre>
     *外观
     * </pre>
     *
     * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPotAppearanceOrBuilder getMAppearanceOrBuilder();
  }
  /**
   * <pre>
   *热点的属性
   * </pre>
   *
   * Protobuf type {@code DataFactory.HotPotAttribute}
   */
  public  static final class HotPotAttribute extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.HotPotAttribute)
      HotPotAttributeOrBuilder {
    // Use HotPotAttribute.newBuilder() to construct.
    private HotPotAttribute(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HotPotAttribute() {
      mHotPotType_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HotPotAttribute(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.HotPotEnum value = com.nibiru.creator.data.HotPotData.HotPotEnum.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                mHotPotType_ = rawValue;
              }
              break;
            }
            case 18: {
              com.nibiru.creator.data.HotPotData.HotPotAppearance.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mAppearance_.toBuilder();
              }
              mAppearance_ = input.readMessage(com.nibiru.creator.data.HotPotData.HotPotAppearance.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mAppearance_);
                mAppearance_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPotAttribute_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPotAttribute_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.HotPotAttribute.class, com.nibiru.creator.data.HotPotData.HotPotAttribute.Builder.class);
    }

    private int bitField0_;
    public static final int M_HOTPOTTYPE_FIELD_NUMBER = 1;
    private int mHotPotType_;
    /**
     * <pre>
     *类型
     * </pre>
     *
     * <code>required .DataFactory.HotPotEnum m_HotPotType = 1;</code>
     */
    public boolean hasMHotPotType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *类型
     * </pre>
     *
     * <code>required .DataFactory.HotPotEnum m_HotPotType = 1;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPotEnum getMHotPotType() {
      com.nibiru.creator.data.HotPotData.HotPotEnum result = com.nibiru.creator.data.HotPotData.HotPotEnum.valueOf(mHotPotType_);
      return result == null ? com.nibiru.creator.data.HotPotData.HotPotEnum.HotPotEnum_NULL : result;
    }

    public static final int M_APPEARANCE_FIELD_NUMBER = 2;
    private com.nibiru.creator.data.HotPotData.HotPotAppearance mAppearance_;
    /**
     * <pre>
     *外观
     * </pre>
     *
     * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
     */
    public boolean hasMAppearance() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *外观
     * </pre>
     *
     * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPotAppearance getMAppearance() {
      return mAppearance_ == null ? com.nibiru.creator.data.HotPotData.HotPotAppearance.getDefaultInstance() : mAppearance_;
    }
    /**
     * <pre>
     *外观
     * </pre>
     *
     * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPotAppearanceOrBuilder getMAppearanceOrBuilder() {
      return mAppearance_ == null ? com.nibiru.creator.data.HotPotData.HotPotAppearance.getDefaultInstance() : mAppearance_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMHotPotType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAppearance()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMAppearance().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, mHotPotType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getMAppearance());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(1, mHotPotType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(2, getMAppearance());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.HotPotAttribute)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.HotPotAttribute other = (com.nibiru.creator.data.HotPotData.HotPotAttribute) obj;

      boolean result = true;
      result = result && (hasMHotPotType() == other.hasMHotPotType());
      if (hasMHotPotType()) {
        result = result && mHotPotType_ == other.mHotPotType_;
      }
      result = result && (hasMAppearance() == other.hasMAppearance());
      if (hasMAppearance()) {
        result = result && getMAppearance()
            .equals(other.getMAppearance());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMHotPotType()) {
        hash = (37 * hash) + M_HOTPOTTYPE_FIELD_NUMBER;
        hash = (53 * hash) + mHotPotType_;
      }
      if (hasMAppearance()) {
        hash = (37 * hash) + M_APPEARANCE_FIELD_NUMBER;
        hash = (53 * hash) + getMAppearance().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.HotPotAttribute parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAttribute parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAttribute parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAttribute parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAttribute parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAttribute parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAttribute parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAttribute parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAttribute parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HotPotAttribute parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.HotPotAttribute prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *热点的属性
     * </pre>
     *
     * Protobuf type {@code DataFactory.HotPotAttribute}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.HotPotAttribute)
        com.nibiru.creator.data.HotPotData.HotPotAttributeOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPotAttribute_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPotAttribute_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.HotPotAttribute.class, com.nibiru.creator.data.HotPotData.HotPotAttribute.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.HotPotAttribute.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMAppearanceFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mHotPotType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (mAppearanceBuilder_ == null) {
          mAppearance_ = null;
        } else {
          mAppearanceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPotAttribute_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.HotPotAttribute getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.HotPotAttribute.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.HotPotAttribute build() {
        com.nibiru.creator.data.HotPotData.HotPotAttribute result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.HotPotAttribute buildPartial() {
        com.nibiru.creator.data.HotPotData.HotPotAttribute result = new com.nibiru.creator.data.HotPotData.HotPotAttribute(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mHotPotType_ = mHotPotType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (mAppearanceBuilder_ == null) {
          result.mAppearance_ = mAppearance_;
        } else {
          result.mAppearance_ = mAppearanceBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.HotPotAttribute) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.HotPotAttribute)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.HotPotAttribute other) {
        if (other == com.nibiru.creator.data.HotPotData.HotPotAttribute.getDefaultInstance()) return this;
        if (other.hasMHotPotType()) {
          setMHotPotType(other.getMHotPotType());
        }
        if (other.hasMAppearance()) {
          mergeMAppearance(other.getMAppearance());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMHotPotType()) {
          return false;
        }
        if (!hasMAppearance()) {
          return false;
        }
        if (!getMAppearance().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.HotPotAttribute parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.HotPotAttribute) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int mHotPotType_ = 0;
      /**
       * <pre>
       *类型
       * </pre>
       *
       * <code>required .DataFactory.HotPotEnum m_HotPotType = 1;</code>
       */
      public boolean hasMHotPotType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *类型
       * </pre>
       *
       * <code>required .DataFactory.HotPotEnum m_HotPotType = 1;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotEnum getMHotPotType() {
        com.nibiru.creator.data.HotPotData.HotPotEnum result = com.nibiru.creator.data.HotPotData.HotPotEnum.valueOf(mHotPotType_);
        return result == null ? com.nibiru.creator.data.HotPotData.HotPotEnum.HotPotEnum_NULL : result;
      }
      /**
       * <pre>
       *类型
       * </pre>
       *
       * <code>required .DataFactory.HotPotEnum m_HotPotType = 1;</code>
       */
      public Builder setMHotPotType(com.nibiru.creator.data.HotPotData.HotPotEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        mHotPotType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *类型
       * </pre>
       *
       * <code>required .DataFactory.HotPotEnum m_HotPotType = 1;</code>
       */
      public Builder clearMHotPotType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mHotPotType_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.HotPotAppearance mAppearance_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPotAppearance, com.nibiru.creator.data.HotPotData.HotPotAppearance.Builder, com.nibiru.creator.data.HotPotData.HotPotAppearanceOrBuilder> mAppearanceBuilder_;
      /**
       * <pre>
       *外观
       * </pre>
       *
       * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
       */
      public boolean hasMAppearance() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *外观
       * </pre>
       *
       * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotAppearance getMAppearance() {
        if (mAppearanceBuilder_ == null) {
          return mAppearance_ == null ? com.nibiru.creator.data.HotPotData.HotPotAppearance.getDefaultInstance() : mAppearance_;
        } else {
          return mAppearanceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *外观
       * </pre>
       *
       * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
       */
      public Builder setMAppearance(com.nibiru.creator.data.HotPotData.HotPotAppearance value) {
        if (mAppearanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mAppearance_ = value;
          onChanged();
        } else {
          mAppearanceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *外观
       * </pre>
       *
       * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
       */
      public Builder setMAppearance(
          com.nibiru.creator.data.HotPotData.HotPotAppearance.Builder builderForValue) {
        if (mAppearanceBuilder_ == null) {
          mAppearance_ = builderForValue.build();
          onChanged();
        } else {
          mAppearanceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *外观
       * </pre>
       *
       * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
       */
      public Builder mergeMAppearance(com.nibiru.creator.data.HotPotData.HotPotAppearance value) {
        if (mAppearanceBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              mAppearance_ != null &&
              mAppearance_ != com.nibiru.creator.data.HotPotData.HotPotAppearance.getDefaultInstance()) {
            mAppearance_ =
              com.nibiru.creator.data.HotPotData.HotPotAppearance.newBuilder(mAppearance_).mergeFrom(value).buildPartial();
          } else {
            mAppearance_ = value;
          }
          onChanged();
        } else {
          mAppearanceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *外观
       * </pre>
       *
       * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
       */
      public Builder clearMAppearance() {
        if (mAppearanceBuilder_ == null) {
          mAppearance_ = null;
          onChanged();
        } else {
          mAppearanceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       *外观
       * </pre>
       *
       * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotAppearance.Builder getMAppearanceBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMAppearanceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *外观
       * </pre>
       *
       * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotAppearanceOrBuilder getMAppearanceOrBuilder() {
        if (mAppearanceBuilder_ != null) {
          return mAppearanceBuilder_.getMessageOrBuilder();
        } else {
          return mAppearance_ == null ?
              com.nibiru.creator.data.HotPotData.HotPotAppearance.getDefaultInstance() : mAppearance_;
        }
      }
      /**
       * <pre>
       *外观
       * </pre>
       *
       * <code>required .DataFactory.HotPotAppearance m_Appearance = 2;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPotAppearance, com.nibiru.creator.data.HotPotData.HotPotAppearance.Builder, com.nibiru.creator.data.HotPotData.HotPotAppearanceOrBuilder> 
          getMAppearanceFieldBuilder() {
        if (mAppearanceBuilder_ == null) {
          mAppearanceBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.HotPotAppearance, com.nibiru.creator.data.HotPotData.HotPotAppearance.Builder, com.nibiru.creator.data.HotPotData.HotPotAppearanceOrBuilder>(
                  getMAppearance(),
                  getParentForChildren(),
                  isClean());
          mAppearance_ = null;
        }
        return mAppearanceBuilder_;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.HotPotAttribute)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.HotPotAttribute)
    private static final com.nibiru.creator.data.HotPotData.HotPotAttribute DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.HotPotAttribute();
    }

    public static com.nibiru.creator.data.HotPotData.HotPotAttribute getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<HotPotAttribute>
        PARSER = new com.nibiru.protobuf.AbstractParser<HotPotAttribute>() {
      public HotPotAttribute parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new HotPotAttribute(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<HotPotAttribute> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<HotPotAttribute> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.HotPotAttribute getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImageHotPotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.ImageHotPot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImageName = 1;</code>
     */
    boolean hasMImageName();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImageName = 1;</code>
     */
    java.lang.String getMImageName();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImageName = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMImageNameBytes();

    /**
     * <pre>
     *图片类型
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 2;</code>
     */
    boolean hasMImageType();
    /**
     * <pre>
     *图片类型
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.ImageType getMImageType();

    /**
     * <pre>
     *图片显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
     */
    boolean hasMShowSize();
    /**
     * <pre>
     *图片显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMShowSize();
    /**
     * <pre>
     *图片显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowSizeOrBuilder();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();
  }
  /**
   * <pre>
   *图片热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.ImageHotPot}
   */
  public  static final class ImageHotPot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.ImageHotPot)
      ImageHotPotOrBuilder {
    // Use ImageHotPot.newBuilder() to construct.
    private ImageHotPot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImageHotPot() {
      mImageName_ = "";
      mImageType_ = 0;
      mFileUrl_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ImageHotPot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mImageName_ = bs;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.ImageType value = com.nibiru.creator.data.HotPotData.ImageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                mImageType_ = rawValue;
              }
              break;
            }
            case 26: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = mShowSize_.toBuilder();
              }
              mShowSize_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mShowSize_);
                mShowSize_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              mFileUrl_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageHotPot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageHotPot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.ImageHotPot.class, com.nibiru.creator.data.HotPotData.ImageHotPot.Builder.class);
    }

    private int bitField0_;
    public static final int M_IMAGENAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object mImageName_;
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImageName = 1;</code>
     */
    public boolean hasMImageName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImageName = 1;</code>
     */
    public java.lang.String getMImageName() {
      java.lang.Object ref = mImageName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mImageName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImageName = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMImageNameBytes() {
      java.lang.Object ref = mImageName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mImageName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_IMAGETYPE_FIELD_NUMBER = 2;
    private int mImageType_;
    /**
     * <pre>
     *图片类型
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 2;</code>
     */
    public boolean hasMImageType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *图片类型
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.ImageType getMImageType() {
      com.nibiru.creator.data.HotPotData.ImageType result = com.nibiru.creator.data.HotPotData.ImageType.valueOf(mImageType_);
      return result == null ? com.nibiru.creator.data.HotPotData.ImageType.ImageType_2D : result;
    }

    public static final int M_SHOWSIZE_FIELD_NUMBER = 3;
    private com.nibiru.creator.data.HotPotData.Vec2 mShowSize_;
    /**
     * <pre>
     *图片显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
     */
    public boolean hasMShowSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *图片显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMShowSize() {
      return mShowSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowSize_;
    }
    /**
     * <pre>
     *图片显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowSizeOrBuilder() {
      return mShowSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowSize_;
    }

    public static final int M_FILEURL_FIELD_NUMBER = 4;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMImageName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMImageType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMShowSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMShowSize().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mImageName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, mImageType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getMShowSize());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 4, mFileUrl_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mImageName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(2, mImageType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(3, getMShowSize());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(4, mFileUrl_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.ImageHotPot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.ImageHotPot other = (com.nibiru.creator.data.HotPotData.ImageHotPot) obj;

      boolean result = true;
      result = result && (hasMImageName() == other.hasMImageName());
      if (hasMImageName()) {
        result = result && getMImageName()
            .equals(other.getMImageName());
      }
      result = result && (hasMImageType() == other.hasMImageType());
      if (hasMImageType()) {
        result = result && mImageType_ == other.mImageType_;
      }
      result = result && (hasMShowSize() == other.hasMShowSize());
      if (hasMShowSize()) {
        result = result && getMShowSize()
            .equals(other.getMShowSize());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMImageName()) {
        hash = (37 * hash) + M_IMAGENAME_FIELD_NUMBER;
        hash = (53 * hash) + getMImageName().hashCode();
      }
      if (hasMImageType()) {
        hash = (37 * hash) + M_IMAGETYPE_FIELD_NUMBER;
        hash = (53 * hash) + mImageType_;
      }
      if (hasMShowSize()) {
        hash = (37 * hash) + M_SHOWSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMShowSize().hashCode();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.ImageHotPot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ImageHotPot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageHotPot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ImageHotPot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageHotPot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ImageHotPot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageHotPot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ImageHotPot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ImageHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.ImageHotPot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *图片热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.ImageHotPot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.ImageHotPot)
        com.nibiru.creator.data.HotPotData.ImageHotPotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageHotPot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageHotPot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.ImageHotPot.class, com.nibiru.creator.data.HotPotData.ImageHotPot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.ImageHotPot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMShowSizeFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mImageName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mImageType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (mShowSizeBuilder_ == null) {
          mShowSize_ = null;
        } else {
          mShowSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageHotPot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.ImageHotPot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.ImageHotPot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.ImageHotPot build() {
        com.nibiru.creator.data.HotPotData.ImageHotPot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.ImageHotPot buildPartial() {
        com.nibiru.creator.data.HotPotData.ImageHotPot result = new com.nibiru.creator.data.HotPotData.ImageHotPot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mImageName_ = mImageName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mImageType_ = mImageType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (mShowSizeBuilder_ == null) {
          result.mShowSize_ = mShowSize_;
        } else {
          result.mShowSize_ = mShowSizeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mFileUrl_ = mFileUrl_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.ImageHotPot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.ImageHotPot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.ImageHotPot other) {
        if (other == com.nibiru.creator.data.HotPotData.ImageHotPot.getDefaultInstance()) return this;
        if (other.hasMImageName()) {
          bitField0_ |= 0x00000001;
          mImageName_ = other.mImageName_;
          onChanged();
        }
        if (other.hasMImageType()) {
          setMImageType(other.getMImageType());
        }
        if (other.hasMShowSize()) {
          mergeMShowSize(other.getMShowSize());
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00000008;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMImageName()) {
          return false;
        }
        if (!hasMImageType()) {
          return false;
        }
        if (!hasMShowSize()) {
          return false;
        }
        if (!getMShowSize().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.ImageHotPot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.ImageHotPot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mImageName_ = "";
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImageName = 1;</code>
       */
      public boolean hasMImageName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImageName = 1;</code>
       */
      public java.lang.String getMImageName() {
        java.lang.Object ref = mImageName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mImageName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImageName = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMImageNameBytes() {
        java.lang.Object ref = mImageName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mImageName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImageName = 1;</code>
       */
      public Builder setMImageName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mImageName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImageName = 1;</code>
       */
      public Builder clearMImageName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mImageName_ = getDefaultInstance().getMImageName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImageName = 1;</code>
       */
      public Builder setMImageNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mImageName_ = value;
        onChanged();
        return this;
      }

      private int mImageType_ = 0;
      /**
       * <pre>
       *图片类型
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 2;</code>
       */
      public boolean hasMImageType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *图片类型
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageType getMImageType() {
        com.nibiru.creator.data.HotPotData.ImageType result = com.nibiru.creator.data.HotPotData.ImageType.valueOf(mImageType_);
        return result == null ? com.nibiru.creator.data.HotPotData.ImageType.ImageType_2D : result;
      }
      /**
       * <pre>
       *图片类型
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 2;</code>
       */
      public Builder setMImageType(com.nibiru.creator.data.HotPotData.ImageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        mImageType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片类型
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 2;</code>
       */
      public Builder clearMImageType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mImageType_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mShowSize_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mShowSizeBuilder_;
      /**
       * <pre>
       *图片显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
       */
      public boolean hasMShowSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *图片显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMShowSize() {
        if (mShowSizeBuilder_ == null) {
          return mShowSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowSize_;
        } else {
          return mShowSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *图片显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
       */
      public Builder setMShowSize(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mShowSize_ = value;
          onChanged();
        } else {
          mShowSizeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *图片显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
       */
      public Builder setMShowSize(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mShowSizeBuilder_ == null) {
          mShowSize_ = builderForValue.build();
          onChanged();
        } else {
          mShowSizeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *图片显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
       */
      public Builder mergeMShowSize(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowSizeBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              mShowSize_ != null &&
              mShowSize_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mShowSize_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mShowSize_).mergeFrom(value).buildPartial();
          } else {
            mShowSize_ = value;
          }
          onChanged();
        } else {
          mShowSizeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *图片显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
       */
      public Builder clearMShowSize() {
        if (mShowSizeBuilder_ == null) {
          mShowSize_ = null;
          onChanged();
        } else {
          mShowSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       *图片显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMShowSizeBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMShowSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *图片显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowSizeOrBuilder() {
        if (mShowSizeBuilder_ != null) {
          return mShowSizeBuilder_.getMessageOrBuilder();
        } else {
          return mShowSize_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowSize_;
        }
      }
      /**
       * <pre>
       *图片显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 3;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMShowSizeFieldBuilder() {
        if (mShowSizeBuilder_ == null) {
          mShowSizeBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMShowSize(),
                  getParentForChildren(),
                  isClean());
          mShowSize_ = null;
        }
        return mShowSizeBuilder_;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.ImageHotPot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.ImageHotPot)
    private static final com.nibiru.creator.data.HotPotData.ImageHotPot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.ImageHotPot();
    }

    public static com.nibiru.creator.data.HotPotData.ImageHotPot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<ImageHotPot>
        PARSER = new com.nibiru.protobuf.AbstractParser<ImageHotPot>() {
      public ImageHotPot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new ImageHotPot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<ImageHotPot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<ImageHotPot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.ImageHotPot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VideoImageHotPotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.VideoImageHotPot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *视频路径
     * </pre>
     *
     * <code>required string m_VideoName = 1;</code>
     */
    boolean hasMVideoName();
    /**
     * <pre>
     *视频路径
     * </pre>
     *
     * <code>required string m_VideoName = 1;</code>
     */
    java.lang.String getMVideoName();
    /**
     * <pre>
     *视频路径
     * </pre>
     *
     * <code>required string m_VideoName = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMVideoNameBytes();

    /**
     * <pre>
     *视频类型
     * </pre>
     *
     * <code>required .DataFactory.VideoType m_VideoType = 2;</code>
     */
    boolean hasMVideoType();
    /**
     * <pre>
     *视频类型
     * </pre>
     *
     * <code>required .DataFactory.VideoType m_VideoType = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.VideoType getMVideoType();

    /**
     * <pre>
     *视频显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
     */
    boolean hasMShowRect();
    /**
     * <pre>
     *视频显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMShowRect();
    /**
     * <pre>
     *视频显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder();

    /**
     * <pre>
     * </pre>
     *
     * <code>optional .DataFactory.VideoSourceMode m_SourceMode = 4;</code>
     */
    boolean hasMSourceMode();
    /**
     * <pre>
     * </pre>
     *
     * <code>optional .DataFactory.VideoSourceMode m_SourceMode = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.VideoSourceMode getMSourceMode();

    /**
     * <pre>
     *视频截图路径
     * </pre>
     *
     * <code>optional string m_snappath = 5;</code>
     */
    boolean hasMSnappath();
    /**
     * <pre>
     *视频截图路径
     * </pre>
     *
     * <code>optional string m_snappath = 5;</code>
     */
    java.lang.String getMSnappath();
    /**
     * <pre>
     *视频截图路径
     * </pre>
     *
     * <code>optional string m_snappath = 5;</code>
     */
    com.nibiru.protobuf.ByteString
        getMSnappathBytes();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 8;</code>
     */
    boolean hasMIconUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 8;</code>
     */
    java.lang.String getMIconUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 8;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIconUrlBytes();
  }
  /**
   * <pre>
   *视频热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.VideoImageHotPot}
   */
  public  static final class VideoImageHotPot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.VideoImageHotPot)
      VideoImageHotPotOrBuilder {
    // Use VideoImageHotPot.newBuilder() to construct.
    private VideoImageHotPot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private VideoImageHotPot() {
      mVideoName_ = "";
      mVideoType_ = 0;
      mSourceMode_ = 0;
      mSnappath_ = "";
      mFileUrl_ = "";
      mIconUrl_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private VideoImageHotPot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mVideoName_ = bs;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.VideoType value = com.nibiru.creator.data.HotPotData.VideoType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                mVideoType_ = rawValue;
              }
              break;
            }
            case 26: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = mShowRect_.toBuilder();
              }
              mShowRect_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mShowRect_);
                mShowRect_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.VideoSourceMode value = com.nibiru.creator.data.HotPotData.VideoSourceMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                mSourceMode_ = rawValue;
              }
              break;
            }
            case 42: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              mSnappath_ = bs;
              break;
            }
            case 58: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              mFileUrl_ = bs;
              break;
            }
            case 66: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              mIconUrl_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_VideoImageHotPot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_VideoImageHotPot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.VideoImageHotPot.class, com.nibiru.creator.data.HotPotData.VideoImageHotPot.Builder.class);
    }

    private int bitField0_;
    public static final int M_VIDEONAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object mVideoName_;
    /**
     * <pre>
     *视频路径
     * </pre>
     *
     * <code>required string m_VideoName = 1;</code>
     */
    public boolean hasMVideoName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *视频路径
     * </pre>
     *
     * <code>required string m_VideoName = 1;</code>
     */
    public java.lang.String getMVideoName() {
      java.lang.Object ref = mVideoName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mVideoName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *视频路径
     * </pre>
     *
     * <code>required string m_VideoName = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMVideoNameBytes() {
      java.lang.Object ref = mVideoName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mVideoName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_VIDEOTYPE_FIELD_NUMBER = 2;
    private int mVideoType_;
    /**
     * <pre>
     *视频类型
     * </pre>
     *
     * <code>required .DataFactory.VideoType m_VideoType = 2;</code>
     */
    public boolean hasMVideoType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *视频类型
     * </pre>
     *
     * <code>required .DataFactory.VideoType m_VideoType = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.VideoType getMVideoType() {
      com.nibiru.creator.data.HotPotData.VideoType result = com.nibiru.creator.data.HotPotData.VideoType.valueOf(mVideoType_);
      return result == null ? com.nibiru.creator.data.HotPotData.VideoType.VideoType_2DNormal : result;
    }

    public static final int M_SHOWRECT_FIELD_NUMBER = 3;
    private com.nibiru.creator.data.HotPotData.Vec2 mShowRect_;
    /**
     * <pre>
     *视频显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
     */
    public boolean hasMShowRect() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *视频显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMShowRect() {
      return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
    }
    /**
     * <pre>
     *视频显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder() {
      return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
    }

    public static final int M_SOURCEMODE_FIELD_NUMBER = 4;
    private int mSourceMode_;
    /**
     * <pre>
     * </pre>
     *
     * <code>optional .DataFactory.VideoSourceMode m_SourceMode = 4;</code>
     */
    public boolean hasMSourceMode() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>optional .DataFactory.VideoSourceMode m_SourceMode = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.VideoSourceMode getMSourceMode() {
      com.nibiru.creator.data.HotPotData.VideoSourceMode result = com.nibiru.creator.data.HotPotData.VideoSourceMode.valueOf(mSourceMode_);
      return result == null ? com.nibiru.creator.data.HotPotData.VideoSourceMode.VideoSourceMode_Local : result;
    }

    public static final int M_SNAPPATH_FIELD_NUMBER = 5;
    private volatile java.lang.Object mSnappath_;
    /**
     * <pre>
     *视频截图路径
     * </pre>
     *
     * <code>optional string m_snappath = 5;</code>
     */
    public boolean hasMSnappath() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *视频截图路径
     * </pre>
     *
     * <code>optional string m_snappath = 5;</code>
     */
    public java.lang.String getMSnappath() {
      java.lang.Object ref = mSnappath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mSnappath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *视频截图路径
     * </pre>
     *
     * <code>optional string m_snappath = 5;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMSnappathBytes() {
      java.lang.Object ref = mSnappath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mSnappath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_FILEURL_FIELD_NUMBER = 7;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 7;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ICONURL_FIELD_NUMBER = 8;
    private volatile java.lang.Object mIconUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 8;</code>
     */
    public boolean hasMIconUrl() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 8;</code>
     */
    public java.lang.String getMIconUrl() {
      java.lang.Object ref = mIconUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mIconUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 8;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIconUrlBytes() {
      java.lang.Object ref = mIconUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mIconUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMVideoName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMVideoType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMShowRect()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMShowRect().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mVideoName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, mVideoType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getMShowRect());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, mSourceMode_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 5, mSnappath_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 7, mFileUrl_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 8, mIconUrl_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mVideoName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(2, mVideoType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(3, getMShowRect());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(4, mSourceMode_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(5, mSnappath_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(7, mFileUrl_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(8, mIconUrl_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.VideoImageHotPot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.VideoImageHotPot other = (com.nibiru.creator.data.HotPotData.VideoImageHotPot) obj;

      boolean result = true;
      result = result && (hasMVideoName() == other.hasMVideoName());
      if (hasMVideoName()) {
        result = result && getMVideoName()
            .equals(other.getMVideoName());
      }
      result = result && (hasMVideoType() == other.hasMVideoType());
      if (hasMVideoType()) {
        result = result && mVideoType_ == other.mVideoType_;
      }
      result = result && (hasMShowRect() == other.hasMShowRect());
      if (hasMShowRect()) {
        result = result && getMShowRect()
            .equals(other.getMShowRect());
      }
      result = result && (hasMSourceMode() == other.hasMSourceMode());
      if (hasMSourceMode()) {
        result = result && mSourceMode_ == other.mSourceMode_;
      }
      result = result && (hasMSnappath() == other.hasMSnappath());
      if (hasMSnappath()) {
        result = result && getMSnappath()
            .equals(other.getMSnappath());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && (hasMIconUrl() == other.hasMIconUrl());
      if (hasMIconUrl()) {
        result = result && getMIconUrl()
            .equals(other.getMIconUrl());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMVideoName()) {
        hash = (37 * hash) + M_VIDEONAME_FIELD_NUMBER;
        hash = (53 * hash) + getMVideoName().hashCode();
      }
      if (hasMVideoType()) {
        hash = (37 * hash) + M_VIDEOTYPE_FIELD_NUMBER;
        hash = (53 * hash) + mVideoType_;
      }
      if (hasMShowRect()) {
        hash = (37 * hash) + M_SHOWRECT_FIELD_NUMBER;
        hash = (53 * hash) + getMShowRect().hashCode();
      }
      if (hasMSourceMode()) {
        hash = (37 * hash) + M_SOURCEMODE_FIELD_NUMBER;
        hash = (53 * hash) + mSourceMode_;
      }
      if (hasMSnappath()) {
        hash = (37 * hash) + M_SNAPPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMSnappath().hashCode();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      if (hasMIconUrl()) {
        hash = (37 * hash) + M_ICONURL_FIELD_NUMBER;
        hash = (53 * hash) + getMIconUrl().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.VideoImageHotPot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *视频热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.VideoImageHotPot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.VideoImageHotPot)
        com.nibiru.creator.data.HotPotData.VideoImageHotPotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_VideoImageHotPot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_VideoImageHotPot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.VideoImageHotPot.class, com.nibiru.creator.data.HotPotData.VideoImageHotPot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.VideoImageHotPot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMShowRectFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mVideoName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mVideoType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (mShowRectBuilder_ == null) {
          mShowRect_ = null;
        } else {
          mShowRectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        mSourceMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        mSnappath_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        mIconUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_VideoImageHotPot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.VideoImageHotPot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.VideoImageHotPot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.VideoImageHotPot build() {
        com.nibiru.creator.data.HotPotData.VideoImageHotPot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.VideoImageHotPot buildPartial() {
        com.nibiru.creator.data.HotPotData.VideoImageHotPot result = new com.nibiru.creator.data.HotPotData.VideoImageHotPot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mVideoName_ = mVideoName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mVideoType_ = mVideoType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (mShowRectBuilder_ == null) {
          result.mShowRect_ = mShowRect_;
        } else {
          result.mShowRect_ = mShowRectBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mSourceMode_ = mSourceMode_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mSnappath_ = mSnappath_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mFileUrl_ = mFileUrl_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mIconUrl_ = mIconUrl_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.VideoImageHotPot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.VideoImageHotPot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.VideoImageHotPot other) {
        if (other == com.nibiru.creator.data.HotPotData.VideoImageHotPot.getDefaultInstance()) return this;
        if (other.hasMVideoName()) {
          bitField0_ |= 0x00000001;
          mVideoName_ = other.mVideoName_;
          onChanged();
        }
        if (other.hasMVideoType()) {
          setMVideoType(other.getMVideoType());
        }
        if (other.hasMShowRect()) {
          mergeMShowRect(other.getMShowRect());
        }
        if (other.hasMSourceMode()) {
          setMSourceMode(other.getMSourceMode());
        }
        if (other.hasMSnappath()) {
          bitField0_ |= 0x00000010;
          mSnappath_ = other.mSnappath_;
          onChanged();
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00000020;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        if (other.hasMIconUrl()) {
          bitField0_ |= 0x00000040;
          mIconUrl_ = other.mIconUrl_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMVideoName()) {
          return false;
        }
        if (!hasMVideoType()) {
          return false;
        }
        if (!hasMShowRect()) {
          return false;
        }
        if (!getMShowRect().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.VideoImageHotPot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.VideoImageHotPot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mVideoName_ = "";
      /**
       * <pre>
       *视频路径
       * </pre>
       *
       * <code>required string m_VideoName = 1;</code>
       */
      public boolean hasMVideoName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *视频路径
       * </pre>
       *
       * <code>required string m_VideoName = 1;</code>
       */
      public java.lang.String getMVideoName() {
        java.lang.Object ref = mVideoName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mVideoName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *视频路径
       * </pre>
       *
       * <code>required string m_VideoName = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMVideoNameBytes() {
        java.lang.Object ref = mVideoName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mVideoName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *视频路径
       * </pre>
       *
       * <code>required string m_VideoName = 1;</code>
       */
      public Builder setMVideoName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mVideoName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *视频路径
       * </pre>
       *
       * <code>required string m_VideoName = 1;</code>
       */
      public Builder clearMVideoName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mVideoName_ = getDefaultInstance().getMVideoName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *视频路径
       * </pre>
       *
       * <code>required string m_VideoName = 1;</code>
       */
      public Builder setMVideoNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mVideoName_ = value;
        onChanged();
        return this;
      }

      private int mVideoType_ = 0;
      /**
       * <pre>
       *视频类型
       * </pre>
       *
       * <code>required .DataFactory.VideoType m_VideoType = 2;</code>
       */
      public boolean hasMVideoType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *视频类型
       * </pre>
       *
       * <code>required .DataFactory.VideoType m_VideoType = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.VideoType getMVideoType() {
        com.nibiru.creator.data.HotPotData.VideoType result = com.nibiru.creator.data.HotPotData.VideoType.valueOf(mVideoType_);
        return result == null ? com.nibiru.creator.data.HotPotData.VideoType.VideoType_2DNormal : result;
      }
      /**
       * <pre>
       *视频类型
       * </pre>
       *
       * <code>required .DataFactory.VideoType m_VideoType = 2;</code>
       */
      public Builder setMVideoType(com.nibiru.creator.data.HotPotData.VideoType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        mVideoType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *视频类型
       * </pre>
       *
       * <code>required .DataFactory.VideoType m_VideoType = 2;</code>
       */
      public Builder clearMVideoType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mVideoType_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mShowRect_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mShowRectBuilder_;
      /**
       * <pre>
       *视频显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
       */
      public boolean hasMShowRect() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *视频显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMShowRect() {
        if (mShowRectBuilder_ == null) {
          return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
        } else {
          return mShowRectBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *视频显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
       */
      public Builder setMShowRect(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowRectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mShowRect_ = value;
          onChanged();
        } else {
          mShowRectBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *视频显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
       */
      public Builder setMShowRect(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mShowRectBuilder_ == null) {
          mShowRect_ = builderForValue.build();
          onChanged();
        } else {
          mShowRectBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *视频显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
       */
      public Builder mergeMShowRect(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowRectBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              mShowRect_ != null &&
              mShowRect_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mShowRect_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mShowRect_).mergeFrom(value).buildPartial();
          } else {
            mShowRect_ = value;
          }
          onChanged();
        } else {
          mShowRectBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *视频显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
       */
      public Builder clearMShowRect() {
        if (mShowRectBuilder_ == null) {
          mShowRect_ = null;
          onChanged();
        } else {
          mShowRectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       *视频显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMShowRectBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMShowRectFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *视频显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder() {
        if (mShowRectBuilder_ != null) {
          return mShowRectBuilder_.getMessageOrBuilder();
        } else {
          return mShowRect_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
        }
      }
      /**
       * <pre>
       *视频显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 3;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMShowRectFieldBuilder() {
        if (mShowRectBuilder_ == null) {
          mShowRectBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMShowRect(),
                  getParentForChildren(),
                  isClean());
          mShowRect_ = null;
        }
        return mShowRectBuilder_;
      }

      private int mSourceMode_ = 0;
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .DataFactory.VideoSourceMode m_SourceMode = 4;</code>
       */
      public boolean hasMSourceMode() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .DataFactory.VideoSourceMode m_SourceMode = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.VideoSourceMode getMSourceMode() {
        com.nibiru.creator.data.HotPotData.VideoSourceMode result = com.nibiru.creator.data.HotPotData.VideoSourceMode.valueOf(mSourceMode_);
        return result == null ? com.nibiru.creator.data.HotPotData.VideoSourceMode.VideoSourceMode_Local : result;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .DataFactory.VideoSourceMode m_SourceMode = 4;</code>
       */
      public Builder setMSourceMode(com.nibiru.creator.data.HotPotData.VideoSourceMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        mSourceMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional .DataFactory.VideoSourceMode m_SourceMode = 4;</code>
       */
      public Builder clearMSourceMode() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mSourceMode_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mSnappath_ = "";
      /**
       * <pre>
       *视频截图路径
       * </pre>
       *
       * <code>optional string m_snappath = 5;</code>
       */
      public boolean hasMSnappath() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *视频截图路径
       * </pre>
       *
       * <code>optional string m_snappath = 5;</code>
       */
      public java.lang.String getMSnappath() {
        java.lang.Object ref = mSnappath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mSnappath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *视频截图路径
       * </pre>
       *
       * <code>optional string m_snappath = 5;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMSnappathBytes() {
        java.lang.Object ref = mSnappath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mSnappath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *视频截图路径
       * </pre>
       *
       * <code>optional string m_snappath = 5;</code>
       */
      public Builder setMSnappath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mSnappath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *视频截图路径
       * </pre>
       *
       * <code>optional string m_snappath = 5;</code>
       */
      public Builder clearMSnappath() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mSnappath_ = getDefaultInstance().getMSnappath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *视频截图路径
       * </pre>
       *
       * <code>optional string m_snappath = 5;</code>
       */
      public Builder setMSnappathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mSnappath_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 7;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mFileUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mIconUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 8;</code>
       */
      public boolean hasMIconUrl() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 8;</code>
       */
      public java.lang.String getMIconUrl() {
        java.lang.Object ref = mIconUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mIconUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 8;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIconUrlBytes() {
        java.lang.Object ref = mIconUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mIconUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 8;</code>
       */
      public Builder setMIconUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mIconUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 8;</code>
       */
      public Builder clearMIconUrl() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mIconUrl_ = getDefaultInstance().getMIconUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 8;</code>
       */
      public Builder setMIconUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mIconUrl_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.VideoImageHotPot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.VideoImageHotPot)
    private static final com.nibiru.creator.data.HotPotData.VideoImageHotPot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.VideoImageHotPot();
    }

    public static com.nibiru.creator.data.HotPotData.VideoImageHotPot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<VideoImageHotPot>
        PARSER = new com.nibiru.protobuf.AbstractParser<VideoImageHotPot>() {
      public VideoImageHotPot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new VideoImageHotPot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<VideoImageHotPot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<VideoImageHotPot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.VideoImageHotPot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LabelHotPotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.LabelHotPot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *热点文本内容
     * </pre>
     *
     * <code>required string m_Title = 1;</code>
     */
    boolean hasMTitle();
    /**
     * <pre>
     *热点文本内容
     * </pre>
     *
     * <code>required string m_Title = 1;</code>
     */
    java.lang.String getMTitle();
    /**
     * <pre>
     *热点文本内容
     * </pre>
     *
     * <code>required string m_Title = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMTitleBytes();

    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
     */
    boolean hasMFontColor();
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4 getMFontColor();
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFontColorOrBuilder();

    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>required float m_CharSize = 3;</code>
     */
    boolean hasMCharSize();
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>required float m_CharSize = 3;</code>
     */
    float getMCharSize();

    /**
     * <pre>
     * </pre>
     *
     * <code>required float m_MaxWidth = 4;</code>
     */
    boolean hasMMaxWidth();
    /**
     * <pre>
     * </pre>
     *
     * <code>required float m_MaxWidth = 4;</code>
     */
    float getMMaxWidth();

    /**
     * <pre>
     *字体类型
     * </pre>
     *
     * <code>required string m_Family = 5;</code>
     */
    boolean hasMFamily();
    /**
     * <pre>
     *字体类型
     * </pre>
     *
     * <code>required string m_Family = 5;</code>
     */
    java.lang.String getMFamily();
    /**
     * <pre>
     *字体类型
     * </pre>
     *
     * <code>required string m_Family = 5;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFamilyBytes();

    /**
     * <pre>
     *加粗0/1
     * </pre>
     *
     * <code>required int32 m_Bolid = 6;</code>
     */
    boolean hasMBolid();
    /**
     * <pre>
     *加粗0/1
     * </pre>
     *
     * <code>required int32 m_Bolid = 6;</code>
     */
    int getMBolid();

    /**
     * <pre>
     *斜体0/1
     * </pre>
     *
     * <code>required int32 m_Italic = 7;</code>
     */
    boolean hasMItalic();
    /**
     * <pre>
     *斜体0/1
     * </pre>
     *
     * <code>required int32 m_Italic = 7;</code>
     */
    int getMItalic();

    /**
     * <pre>
     *下划线0/1
     * </pre>
     *
     * <code>required int32 m_Underline = 8;</code>
     */
    boolean hasMUnderline();
    /**
     * <pre>
     *下划线0/1
     * </pre>
     *
     * <code>required int32 m_Underline = 8;</code>
     */
    int getMUnderline();

    /**
     * <pre>
     *背景颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
     */
    boolean hasMBackgroundColor();
    /**
     * <pre>
     *背景颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4 getMBackgroundColor();
    /**
     * <pre>
     *背景颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMBackgroundColorOrBuilder();

    /**
     * <pre>
     *背景透明度
     * </pre>
     *
     * <code>required float m_BackgroundOpacity = 10;</code>
     */
    boolean hasMBackgroundOpacity();
    /**
     * <pre>
     *背景透明度
     * </pre>
     *
     * <code>required float m_BackgroundOpacity = 10;</code>
     */
    float getMBackgroundOpacity();

    /**
     * <pre>
     *文本框显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
     */
    boolean hasMShowRect();
    /**
     * <pre>
     *文本框显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMShowRect();
    /**
     * <pre>
     *文本框显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder();

    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>optional int32 m_LineDistance = 12;</code>
     */
    boolean hasMLineDistance();
    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>optional int32 m_LineDistance = 12;</code>
     */
    int getMLineDistance();

    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_textFont = 13;</code>
     */
    boolean hasMTextFont();
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_textFont = 13;</code>
     */
    java.lang.String getMTextFont();
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_textFont = 13;</code>
     */
    com.nibiru.protobuf.ByteString
        getMTextFontBytes();

    /**
     * <pre>
     *文本对齐方式 left-1 right-2 center-132
     * </pre>
     *
     * <code>optional int32 m_textAlignment = 14;</code>
     */
    boolean hasMTextAlignment();
    /**
     * <pre>
     *文本对齐方式 left-1 right-2 center-132
     * </pre>
     *
     * <code>optional int32 m_textAlignment = 14;</code>
     */
    int getMTextAlignment();
  }
  /**
   * <pre>
   *文本热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.LabelHotPot}
   */
  public  static final class LabelHotPot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.LabelHotPot)
      LabelHotPotOrBuilder {
    // Use LabelHotPot.newBuilder() to construct.
    private LabelHotPot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LabelHotPot() {
      mTitle_ = "";
      mCharSize_ = 0F;
      mMaxWidth_ = 0F;
      mFamily_ = "";
      mBolid_ = 0;
      mItalic_ = 0;
      mUnderline_ = 0;
      mBackgroundOpacity_ = 0F;
      mLineDistance_ = 0;
      mTextFont_ = "";
      mTextAlignment_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LabelHotPot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mTitle_ = bs;
              break;
            }
            case 18: {
              com.nibiru.creator.data.HotPotData.Vec4.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mFontColor_.toBuilder();
              }
              mFontColor_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec4.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mFontColor_);
                mFontColor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              mCharSize_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              mMaxWidth_ = input.readFloat();
              break;
            }
            case 42: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              mFamily_ = bs;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mBolid_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              mItalic_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              mUnderline_ = input.readInt32();
              break;
            }
            case 74: {
              com.nibiru.creator.data.HotPotData.Vec4.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = mBackgroundColor_.toBuilder();
              }
              mBackgroundColor_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec4.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mBackgroundColor_);
                mBackgroundColor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              mBackgroundOpacity_ = input.readFloat();
              break;
            }
            case 90: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = mShowRect_.toBuilder();
              }
              mShowRect_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mShowRect_);
                mShowRect_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              mLineDistance_ = input.readInt32();
              break;
            }
            case 106: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00001000;
              mTextFont_ = bs;
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              mTextAlignment_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_LabelHotPot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_LabelHotPot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.LabelHotPot.class, com.nibiru.creator.data.HotPotData.LabelHotPot.Builder.class);
    }

    private int bitField0_;
    public static final int M_TITLE_FIELD_NUMBER = 1;
    private volatile java.lang.Object mTitle_;
    /**
     * <pre>
     *热点文本内容
     * </pre>
     *
     * <code>required string m_Title = 1;</code>
     */
    public boolean hasMTitle() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *热点文本内容
     * </pre>
     *
     * <code>required string m_Title = 1;</code>
     */
    public java.lang.String getMTitle() {
      java.lang.Object ref = mTitle_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mTitle_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *热点文本内容
     * </pre>
     *
     * <code>required string m_Title = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMTitleBytes() {
      java.lang.Object ref = mTitle_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mTitle_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_FONTCOLOR_FIELD_NUMBER = 2;
    private com.nibiru.creator.data.HotPotData.Vec4 mFontColor_;
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
     */
    public boolean hasMFontColor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4 getMFontColor() {
      return mFontColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
    }
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFontColorOrBuilder() {
      return mFontColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
    }

    public static final int M_CHARSIZE_FIELD_NUMBER = 3;
    private float mCharSize_;
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>required float m_CharSize = 3;</code>
     */
    public boolean hasMCharSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>required float m_CharSize = 3;</code>
     */
    public float getMCharSize() {
      return mCharSize_;
    }

    public static final int M_MAXWIDTH_FIELD_NUMBER = 4;
    private float mMaxWidth_;
    /**
     * <pre>
     * </pre>
     *
     * <code>required float m_MaxWidth = 4;</code>
     */
    public boolean hasMMaxWidth() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>required float m_MaxWidth = 4;</code>
     */
    public float getMMaxWidth() {
      return mMaxWidth_;
    }

    public static final int M_FAMILY_FIELD_NUMBER = 5;
    private volatile java.lang.Object mFamily_;
    /**
     * <pre>
     *字体类型
     * </pre>
     *
     * <code>required string m_Family = 5;</code>
     */
    public boolean hasMFamily() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *字体类型
     * </pre>
     *
     * <code>required string m_Family = 5;</code>
     */
    public java.lang.String getMFamily() {
      java.lang.Object ref = mFamily_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFamily_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *字体类型
     * </pre>
     *
     * <code>required string m_Family = 5;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFamilyBytes() {
      java.lang.Object ref = mFamily_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFamily_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_BOLID_FIELD_NUMBER = 6;
    private int mBolid_;
    /**
     * <pre>
     *加粗0/1
     * </pre>
     *
     * <code>required int32 m_Bolid = 6;</code>
     */
    public boolean hasMBolid() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *加粗0/1
     * </pre>
     *
     * <code>required int32 m_Bolid = 6;</code>
     */
    public int getMBolid() {
      return mBolid_;
    }

    public static final int M_ITALIC_FIELD_NUMBER = 7;
    private int mItalic_;
    /**
     * <pre>
     *斜体0/1
     * </pre>
     *
     * <code>required int32 m_Italic = 7;</code>
     */
    public boolean hasMItalic() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *斜体0/1
     * </pre>
     *
     * <code>required int32 m_Italic = 7;</code>
     */
    public int getMItalic() {
      return mItalic_;
    }

    public static final int M_UNDERLINE_FIELD_NUMBER = 8;
    private int mUnderline_;
    /**
     * <pre>
     *下划线0/1
     * </pre>
     *
     * <code>required int32 m_Underline = 8;</code>
     */
    public boolean hasMUnderline() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *下划线0/1
     * </pre>
     *
     * <code>required int32 m_Underline = 8;</code>
     */
    public int getMUnderline() {
      return mUnderline_;
    }

    public static final int M_BACKGROUNDCOLOR_FIELD_NUMBER = 9;
    private com.nibiru.creator.data.HotPotData.Vec4 mBackgroundColor_;
    /**
     * <pre>
     *背景颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
     */
    public boolean hasMBackgroundColor() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     *背景颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4 getMBackgroundColor() {
      return mBackgroundColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mBackgroundColor_;
    }
    /**
     * <pre>
     *背景颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMBackgroundColorOrBuilder() {
      return mBackgroundColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mBackgroundColor_;
    }

    public static final int M_BACKGROUNDOPACITY_FIELD_NUMBER = 10;
    private float mBackgroundOpacity_;
    /**
     * <pre>
     *背景透明度
     * </pre>
     *
     * <code>required float m_BackgroundOpacity = 10;</code>
     */
    public boolean hasMBackgroundOpacity() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     *背景透明度
     * </pre>
     *
     * <code>required float m_BackgroundOpacity = 10;</code>
     */
    public float getMBackgroundOpacity() {
      return mBackgroundOpacity_;
    }

    public static final int M_SHOWRECT_FIELD_NUMBER = 11;
    private com.nibiru.creator.data.HotPotData.Vec2 mShowRect_;
    /**
     * <pre>
     *文本框显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
     */
    public boolean hasMShowRect() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     *文本框显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMShowRect() {
      return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
    }
    /**
     * <pre>
     *文本框显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder() {
      return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
    }

    public static final int M_LINEDISTANCE_FIELD_NUMBER = 12;
    private int mLineDistance_;
    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>optional int32 m_LineDistance = 12;</code>
     */
    public boolean hasMLineDistance() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>optional int32 m_LineDistance = 12;</code>
     */
    public int getMLineDistance() {
      return mLineDistance_;
    }

    public static final int M_TEXTFONT_FIELD_NUMBER = 13;
    private volatile java.lang.Object mTextFont_;
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_textFont = 13;</code>
     */
    public boolean hasMTextFont() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_textFont = 13;</code>
     */
    public java.lang.String getMTextFont() {
      java.lang.Object ref = mTextFont_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mTextFont_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_textFont = 13;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMTextFontBytes() {
      java.lang.Object ref = mTextFont_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mTextFont_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_TEXTALIGNMENT_FIELD_NUMBER = 14;
    private int mTextAlignment_;
    /**
     * <pre>
     *文本对齐方式 left-1 right-2 center-132
     * </pre>
     *
     * <code>optional int32 m_textAlignment = 14;</code>
     */
    public boolean hasMTextAlignment() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     *文本对齐方式 left-1 right-2 center-132
     * </pre>
     *
     * <code>optional int32 m_textAlignment = 14;</code>
     */
    public int getMTextAlignment() {
      return mTextAlignment_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMTitle()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMFontColor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMCharSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMMaxWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMFamily()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMBolid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMItalic()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMUnderline()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMBackgroundColor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMBackgroundOpacity()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMShowRect()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMTextFont()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMFontColor().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMBackgroundColor().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMShowRect().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mTitle_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getMFontColor());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, mCharSize_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, mMaxWidth_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 5, mFamily_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, mBolid_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, mItalic_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, mUnderline_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, getMBackgroundColor());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, mBackgroundOpacity_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, getMShowRect());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, mLineDistance_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 13, mTextFont_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, mTextAlignment_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mTitle_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(2, getMFontColor());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(3, mCharSize_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(4, mMaxWidth_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(5, mFamily_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(6, mBolid_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(7, mItalic_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(8, mUnderline_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(9, getMBackgroundColor());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(10, mBackgroundOpacity_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(11, getMShowRect());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(12, mLineDistance_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(13, mTextFont_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(14, mTextAlignment_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.LabelHotPot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.LabelHotPot other = (com.nibiru.creator.data.HotPotData.LabelHotPot) obj;

      boolean result = true;
      result = result && (hasMTitle() == other.hasMTitle());
      if (hasMTitle()) {
        result = result && getMTitle()
            .equals(other.getMTitle());
      }
      result = result && (hasMFontColor() == other.hasMFontColor());
      if (hasMFontColor()) {
        result = result && getMFontColor()
            .equals(other.getMFontColor());
      }
      result = result && (hasMCharSize() == other.hasMCharSize());
      if (hasMCharSize()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMCharSize())
            == java.lang.Float.floatToIntBits(
                other.getMCharSize()));
      }
      result = result && (hasMMaxWidth() == other.hasMMaxWidth());
      if (hasMMaxWidth()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMMaxWidth())
            == java.lang.Float.floatToIntBits(
                other.getMMaxWidth()));
      }
      result = result && (hasMFamily() == other.hasMFamily());
      if (hasMFamily()) {
        result = result && getMFamily()
            .equals(other.getMFamily());
      }
      result = result && (hasMBolid() == other.hasMBolid());
      if (hasMBolid()) {
        result = result && (getMBolid()
            == other.getMBolid());
      }
      result = result && (hasMItalic() == other.hasMItalic());
      if (hasMItalic()) {
        result = result && (getMItalic()
            == other.getMItalic());
      }
      result = result && (hasMUnderline() == other.hasMUnderline());
      if (hasMUnderline()) {
        result = result && (getMUnderline()
            == other.getMUnderline());
      }
      result = result && (hasMBackgroundColor() == other.hasMBackgroundColor());
      if (hasMBackgroundColor()) {
        result = result && getMBackgroundColor()
            .equals(other.getMBackgroundColor());
      }
      result = result && (hasMBackgroundOpacity() == other.hasMBackgroundOpacity());
      if (hasMBackgroundOpacity()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMBackgroundOpacity())
            == java.lang.Float.floatToIntBits(
                other.getMBackgroundOpacity()));
      }
      result = result && (hasMShowRect() == other.hasMShowRect());
      if (hasMShowRect()) {
        result = result && getMShowRect()
            .equals(other.getMShowRect());
      }
      result = result && (hasMLineDistance() == other.hasMLineDistance());
      if (hasMLineDistance()) {
        result = result && (getMLineDistance()
            == other.getMLineDistance());
      }
      result = result && (hasMTextFont() == other.hasMTextFont());
      if (hasMTextFont()) {
        result = result && getMTextFont()
            .equals(other.getMTextFont());
      }
      result = result && (hasMTextAlignment() == other.hasMTextAlignment());
      if (hasMTextAlignment()) {
        result = result && (getMTextAlignment()
            == other.getMTextAlignment());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMTitle()) {
        hash = (37 * hash) + M_TITLE_FIELD_NUMBER;
        hash = (53 * hash) + getMTitle().hashCode();
      }
      if (hasMFontColor()) {
        hash = (37 * hash) + M_FONTCOLOR_FIELD_NUMBER;
        hash = (53 * hash) + getMFontColor().hashCode();
      }
      if (hasMCharSize()) {
        hash = (37 * hash) + M_CHARSIZE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMCharSize());
      }
      if (hasMMaxWidth()) {
        hash = (37 * hash) + M_MAXWIDTH_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMMaxWidth());
      }
      if (hasMFamily()) {
        hash = (37 * hash) + M_FAMILY_FIELD_NUMBER;
        hash = (53 * hash) + getMFamily().hashCode();
      }
      if (hasMBolid()) {
        hash = (37 * hash) + M_BOLID_FIELD_NUMBER;
        hash = (53 * hash) + getMBolid();
      }
      if (hasMItalic()) {
        hash = (37 * hash) + M_ITALIC_FIELD_NUMBER;
        hash = (53 * hash) + getMItalic();
      }
      if (hasMUnderline()) {
        hash = (37 * hash) + M_UNDERLINE_FIELD_NUMBER;
        hash = (53 * hash) + getMUnderline();
      }
      if (hasMBackgroundColor()) {
        hash = (37 * hash) + M_BACKGROUNDCOLOR_FIELD_NUMBER;
        hash = (53 * hash) + getMBackgroundColor().hashCode();
      }
      if (hasMBackgroundOpacity()) {
        hash = (37 * hash) + M_BACKGROUNDOPACITY_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMBackgroundOpacity());
      }
      if (hasMShowRect()) {
        hash = (37 * hash) + M_SHOWRECT_FIELD_NUMBER;
        hash = (53 * hash) + getMShowRect().hashCode();
      }
      if (hasMLineDistance()) {
        hash = (37 * hash) + M_LINEDISTANCE_FIELD_NUMBER;
        hash = (53 * hash) + getMLineDistance();
      }
      if (hasMTextFont()) {
        hash = (37 * hash) + M_TEXTFONT_FIELD_NUMBER;
        hash = (53 * hash) + getMTextFont().hashCode();
      }
      if (hasMTextAlignment()) {
        hash = (37 * hash) + M_TEXTALIGNMENT_FIELD_NUMBER;
        hash = (53 * hash) + getMTextAlignment();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.LabelHotPot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.LabelHotPot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.LabelHotPot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.LabelHotPot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.LabelHotPot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.LabelHotPot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.LabelHotPot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.LabelHotPot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.LabelHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.LabelHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.LabelHotPot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *文本热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.LabelHotPot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.LabelHotPot)
        com.nibiru.creator.data.HotPotData.LabelHotPotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_LabelHotPot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_LabelHotPot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.LabelHotPot.class, com.nibiru.creator.data.HotPotData.LabelHotPot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.LabelHotPot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMFontColorFieldBuilder();
          getMBackgroundColorFieldBuilder();
          getMShowRectFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mTitle_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (mFontColorBuilder_ == null) {
          mFontColor_ = null;
        } else {
          mFontColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        mCharSize_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        mMaxWidth_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        mFamily_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        mBolid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        mItalic_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        mUnderline_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        if (mBackgroundColorBuilder_ == null) {
          mBackgroundColor_ = null;
        } else {
          mBackgroundColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        mBackgroundOpacity_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        if (mShowRectBuilder_ == null) {
          mShowRect_ = null;
        } else {
          mShowRectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        mLineDistance_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        mTextFont_ = "";
        bitField0_ = (bitField0_ & ~0x00001000);
        mTextAlignment_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_LabelHotPot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.LabelHotPot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.LabelHotPot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.LabelHotPot build() {
        com.nibiru.creator.data.HotPotData.LabelHotPot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.LabelHotPot buildPartial() {
        com.nibiru.creator.data.HotPotData.LabelHotPot result = new com.nibiru.creator.data.HotPotData.LabelHotPot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mTitle_ = mTitle_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (mFontColorBuilder_ == null) {
          result.mFontColor_ = mFontColor_;
        } else {
          result.mFontColor_ = mFontColorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mCharSize_ = mCharSize_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mMaxWidth_ = mMaxWidth_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mFamily_ = mFamily_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mBolid_ = mBolid_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mItalic_ = mItalic_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mUnderline_ = mUnderline_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (mBackgroundColorBuilder_ == null) {
          result.mBackgroundColor_ = mBackgroundColor_;
        } else {
          result.mBackgroundColor_ = mBackgroundColorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.mBackgroundOpacity_ = mBackgroundOpacity_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (mShowRectBuilder_ == null) {
          result.mShowRect_ = mShowRect_;
        } else {
          result.mShowRect_ = mShowRectBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.mLineDistance_ = mLineDistance_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.mTextFont_ = mTextFont_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.mTextAlignment_ = mTextAlignment_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.LabelHotPot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.LabelHotPot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.LabelHotPot other) {
        if (other == com.nibiru.creator.data.HotPotData.LabelHotPot.getDefaultInstance()) return this;
        if (other.hasMTitle()) {
          bitField0_ |= 0x00000001;
          mTitle_ = other.mTitle_;
          onChanged();
        }
        if (other.hasMFontColor()) {
          mergeMFontColor(other.getMFontColor());
        }
        if (other.hasMCharSize()) {
          setMCharSize(other.getMCharSize());
        }
        if (other.hasMMaxWidth()) {
          setMMaxWidth(other.getMMaxWidth());
        }
        if (other.hasMFamily()) {
          bitField0_ |= 0x00000010;
          mFamily_ = other.mFamily_;
          onChanged();
        }
        if (other.hasMBolid()) {
          setMBolid(other.getMBolid());
        }
        if (other.hasMItalic()) {
          setMItalic(other.getMItalic());
        }
        if (other.hasMUnderline()) {
          setMUnderline(other.getMUnderline());
        }
        if (other.hasMBackgroundColor()) {
          mergeMBackgroundColor(other.getMBackgroundColor());
        }
        if (other.hasMBackgroundOpacity()) {
          setMBackgroundOpacity(other.getMBackgroundOpacity());
        }
        if (other.hasMShowRect()) {
          mergeMShowRect(other.getMShowRect());
        }
        if (other.hasMLineDistance()) {
          setMLineDistance(other.getMLineDistance());
        }
        if (other.hasMTextFont()) {
          bitField0_ |= 0x00001000;
          mTextFont_ = other.mTextFont_;
          onChanged();
        }
        if (other.hasMTextAlignment()) {
          setMTextAlignment(other.getMTextAlignment());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMTitle()) {
          return false;
        }
        if (!hasMFontColor()) {
          return false;
        }
        if (!hasMCharSize()) {
          return false;
        }
        if (!hasMMaxWidth()) {
          return false;
        }
        if (!hasMFamily()) {
          return false;
        }
        if (!hasMBolid()) {
          return false;
        }
        if (!hasMItalic()) {
          return false;
        }
        if (!hasMUnderline()) {
          return false;
        }
        if (!hasMBackgroundColor()) {
          return false;
        }
        if (!hasMBackgroundOpacity()) {
          return false;
        }
        if (!hasMShowRect()) {
          return false;
        }
        if (!hasMTextFont()) {
          return false;
        }
        if (!getMFontColor().isInitialized()) {
          return false;
        }
        if (!getMBackgroundColor().isInitialized()) {
          return false;
        }
        if (!getMShowRect().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.LabelHotPot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.LabelHotPot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mTitle_ = "";
      /**
       * <pre>
       *热点文本内容
       * </pre>
       *
       * <code>required string m_Title = 1;</code>
       */
      public boolean hasMTitle() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *热点文本内容
       * </pre>
       *
       * <code>required string m_Title = 1;</code>
       */
      public java.lang.String getMTitle() {
        java.lang.Object ref = mTitle_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mTitle_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *热点文本内容
       * </pre>
       *
       * <code>required string m_Title = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMTitleBytes() {
        java.lang.Object ref = mTitle_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mTitle_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *热点文本内容
       * </pre>
       *
       * <code>required string m_Title = 1;</code>
       */
      public Builder setMTitle(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mTitle_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点文本内容
       * </pre>
       *
       * <code>required string m_Title = 1;</code>
       */
      public Builder clearMTitle() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mTitle_ = getDefaultInstance().getMTitle();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点文本内容
       * </pre>
       *
       * <code>required string m_Title = 1;</code>
       */
      public Builder setMTitleBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mTitle_ = value;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec4 mFontColor_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> mFontColorBuilder_;
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
       */
      public boolean hasMFontColor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4 getMFontColor() {
        if (mFontColorBuilder_ == null) {
          return mFontColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
        } else {
          return mFontColorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
       */
      public Builder setMFontColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mFontColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mFontColor_ = value;
          onChanged();
        } else {
          mFontColorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
       */
      public Builder setMFontColor(
          com.nibiru.creator.data.HotPotData.Vec4.Builder builderForValue) {
        if (mFontColorBuilder_ == null) {
          mFontColor_ = builderForValue.build();
          onChanged();
        } else {
          mFontColorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
       */
      public Builder mergeMFontColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mFontColorBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              mFontColor_ != null &&
              mFontColor_ != com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance()) {
            mFontColor_ =
              com.nibiru.creator.data.HotPotData.Vec4.newBuilder(mFontColor_).mergeFrom(value).buildPartial();
          } else {
            mFontColor_ = value;
          }
          onChanged();
        } else {
          mFontColorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
       */
      public Builder clearMFontColor() {
        if (mFontColorBuilder_ == null) {
          mFontColor_ = null;
          onChanged();
        } else {
          mFontColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4.Builder getMFontColorBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMFontColorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFontColorOrBuilder() {
        if (mFontColorBuilder_ != null) {
          return mFontColorBuilder_.getMessageOrBuilder();
        } else {
          return mFontColor_ == null ?
              com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
        }
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_FontColor = 2;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> 
          getMFontColorFieldBuilder() {
        if (mFontColorBuilder_ == null) {
          mFontColorBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder>(
                  getMFontColor(),
                  getParentForChildren(),
                  isClean());
          mFontColor_ = null;
        }
        return mFontColorBuilder_;
      }

      private float mCharSize_ ;
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>required float m_CharSize = 3;</code>
       */
      public boolean hasMCharSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>required float m_CharSize = 3;</code>
       */
      public float getMCharSize() {
        return mCharSize_;
      }
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>required float m_CharSize = 3;</code>
       */
      public Builder setMCharSize(float value) {
        bitField0_ |= 0x00000004;
        mCharSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>required float m_CharSize = 3;</code>
       */
      public Builder clearMCharSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mCharSize_ = 0F;
        onChanged();
        return this;
      }

      private float mMaxWidth_ ;
      /**
       * <pre>
       * </pre>
       *
       * <code>required float m_MaxWidth = 4;</code>
       */
      public boolean hasMMaxWidth() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>required float m_MaxWidth = 4;</code>
       */
      public float getMMaxWidth() {
        return mMaxWidth_;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>required float m_MaxWidth = 4;</code>
       */
      public Builder setMMaxWidth(float value) {
        bitField0_ |= 0x00000008;
        mMaxWidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>required float m_MaxWidth = 4;</code>
       */
      public Builder clearMMaxWidth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mMaxWidth_ = 0F;
        onChanged();
        return this;
      }

      private java.lang.Object mFamily_ = "";
      /**
       * <pre>
       *字体类型
       * </pre>
       *
       * <code>required string m_Family = 5;</code>
       */
      public boolean hasMFamily() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *字体类型
       * </pre>
       *
       * <code>required string m_Family = 5;</code>
       */
      public java.lang.String getMFamily() {
        java.lang.Object ref = mFamily_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFamily_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *字体类型
       * </pre>
       *
       * <code>required string m_Family = 5;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFamilyBytes() {
        java.lang.Object ref = mFamily_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFamily_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *字体类型
       * </pre>
       *
       * <code>required string m_Family = 5;</code>
       */
      public Builder setMFamily(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mFamily_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *字体类型
       * </pre>
       *
       * <code>required string m_Family = 5;</code>
       */
      public Builder clearMFamily() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mFamily_ = getDefaultInstance().getMFamily();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *字体类型
       * </pre>
       *
       * <code>required string m_Family = 5;</code>
       */
      public Builder setMFamilyBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mFamily_ = value;
        onChanged();
        return this;
      }

      private int mBolid_ ;
      /**
       * <pre>
       *加粗0/1
       * </pre>
       *
       * <code>required int32 m_Bolid = 6;</code>
       */
      public boolean hasMBolid() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *加粗0/1
       * </pre>
       *
       * <code>required int32 m_Bolid = 6;</code>
       */
      public int getMBolid() {
        return mBolid_;
      }
      /**
       * <pre>
       *加粗0/1
       * </pre>
       *
       * <code>required int32 m_Bolid = 6;</code>
       */
      public Builder setMBolid(int value) {
        bitField0_ |= 0x00000020;
        mBolid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *加粗0/1
       * </pre>
       *
       * <code>required int32 m_Bolid = 6;</code>
       */
      public Builder clearMBolid() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mBolid_ = 0;
        onChanged();
        return this;
      }

      private int mItalic_ ;
      /**
       * <pre>
       *斜体0/1
       * </pre>
       *
       * <code>required int32 m_Italic = 7;</code>
       */
      public boolean hasMItalic() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *斜体0/1
       * </pre>
       *
       * <code>required int32 m_Italic = 7;</code>
       */
      public int getMItalic() {
        return mItalic_;
      }
      /**
       * <pre>
       *斜体0/1
       * </pre>
       *
       * <code>required int32 m_Italic = 7;</code>
       */
      public Builder setMItalic(int value) {
        bitField0_ |= 0x00000040;
        mItalic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *斜体0/1
       * </pre>
       *
       * <code>required int32 m_Italic = 7;</code>
       */
      public Builder clearMItalic() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mItalic_ = 0;
        onChanged();
        return this;
      }

      private int mUnderline_ ;
      /**
       * <pre>
       *下划线0/1
       * </pre>
       *
       * <code>required int32 m_Underline = 8;</code>
       */
      public boolean hasMUnderline() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       *下划线0/1
       * </pre>
       *
       * <code>required int32 m_Underline = 8;</code>
       */
      public int getMUnderline() {
        return mUnderline_;
      }
      /**
       * <pre>
       *下划线0/1
       * </pre>
       *
       * <code>required int32 m_Underline = 8;</code>
       */
      public Builder setMUnderline(int value) {
        bitField0_ |= 0x00000080;
        mUnderline_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *下划线0/1
       * </pre>
       *
       * <code>required int32 m_Underline = 8;</code>
       */
      public Builder clearMUnderline() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mUnderline_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec4 mBackgroundColor_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> mBackgroundColorBuilder_;
      /**
       * <pre>
       *背景颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
       */
      public boolean hasMBackgroundColor() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       *背景颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4 getMBackgroundColor() {
        if (mBackgroundColorBuilder_ == null) {
          return mBackgroundColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mBackgroundColor_;
        } else {
          return mBackgroundColorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *背景颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
       */
      public Builder setMBackgroundColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mBackgroundColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mBackgroundColor_ = value;
          onChanged();
        } else {
          mBackgroundColorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *背景颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
       */
      public Builder setMBackgroundColor(
          com.nibiru.creator.data.HotPotData.Vec4.Builder builderForValue) {
        if (mBackgroundColorBuilder_ == null) {
          mBackgroundColor_ = builderForValue.build();
          onChanged();
        } else {
          mBackgroundColorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *背景颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
       */
      public Builder mergeMBackgroundColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mBackgroundColorBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              mBackgroundColor_ != null &&
              mBackgroundColor_ != com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance()) {
            mBackgroundColor_ =
              com.nibiru.creator.data.HotPotData.Vec4.newBuilder(mBackgroundColor_).mergeFrom(value).buildPartial();
          } else {
            mBackgroundColor_ = value;
          }
          onChanged();
        } else {
          mBackgroundColorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *背景颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
       */
      public Builder clearMBackgroundColor() {
        if (mBackgroundColorBuilder_ == null) {
          mBackgroundColor_ = null;
          onChanged();
        } else {
          mBackgroundColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <pre>
       *背景颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4.Builder getMBackgroundColorBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getMBackgroundColorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *背景颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMBackgroundColorOrBuilder() {
        if (mBackgroundColorBuilder_ != null) {
          return mBackgroundColorBuilder_.getMessageOrBuilder();
        } else {
          return mBackgroundColor_ == null ?
              com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mBackgroundColor_;
        }
      }
      /**
       * <pre>
       *背景颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_BackgroundColor = 9;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> 
          getMBackgroundColorFieldBuilder() {
        if (mBackgroundColorBuilder_ == null) {
          mBackgroundColorBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder>(
                  getMBackgroundColor(),
                  getParentForChildren(),
                  isClean());
          mBackgroundColor_ = null;
        }
        return mBackgroundColorBuilder_;
      }

      private float mBackgroundOpacity_ ;
      /**
       * <pre>
       *背景透明度
       * </pre>
       *
       * <code>required float m_BackgroundOpacity = 10;</code>
       */
      public boolean hasMBackgroundOpacity() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       *背景透明度
       * </pre>
       *
       * <code>required float m_BackgroundOpacity = 10;</code>
       */
      public float getMBackgroundOpacity() {
        return mBackgroundOpacity_;
      }
      /**
       * <pre>
       *背景透明度
       * </pre>
       *
       * <code>required float m_BackgroundOpacity = 10;</code>
       */
      public Builder setMBackgroundOpacity(float value) {
        bitField0_ |= 0x00000200;
        mBackgroundOpacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *背景透明度
       * </pre>
       *
       * <code>required float m_BackgroundOpacity = 10;</code>
       */
      public Builder clearMBackgroundOpacity() {
        bitField0_ = (bitField0_ & ~0x00000200);
        mBackgroundOpacity_ = 0F;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mShowRect_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mShowRectBuilder_;
      /**
       * <pre>
       *文本框显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
       */
      public boolean hasMShowRect() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       *文本框显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMShowRect() {
        if (mShowRectBuilder_ == null) {
          return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
        } else {
          return mShowRectBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *文本框显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
       */
      public Builder setMShowRect(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowRectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mShowRect_ = value;
          onChanged();
        } else {
          mShowRectBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *文本框显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
       */
      public Builder setMShowRect(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mShowRectBuilder_ == null) {
          mShowRect_ = builderForValue.build();
          onChanged();
        } else {
          mShowRectBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *文本框显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
       */
      public Builder mergeMShowRect(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowRectBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              mShowRect_ != null &&
              mShowRect_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mShowRect_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mShowRect_).mergeFrom(value).buildPartial();
          } else {
            mShowRect_ = value;
          }
          onChanged();
        } else {
          mShowRectBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *文本框显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
       */
      public Builder clearMShowRect() {
        if (mShowRectBuilder_ == null) {
          mShowRect_ = null;
          onChanged();
        } else {
          mShowRectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <pre>
       *文本框显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMShowRectBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getMShowRectFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *文本框显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder() {
        if (mShowRectBuilder_ != null) {
          return mShowRectBuilder_.getMessageOrBuilder();
        } else {
          return mShowRect_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
        }
      }
      /**
       * <pre>
       *文本框显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 11;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMShowRectFieldBuilder() {
        if (mShowRectBuilder_ == null) {
          mShowRectBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMShowRect(),
                  getParentForChildren(),
                  isClean());
          mShowRect_ = null;
        }
        return mShowRectBuilder_;
      }

      private int mLineDistance_ ;
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>optional int32 m_LineDistance = 12;</code>
       */
      public boolean hasMLineDistance() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>optional int32 m_LineDistance = 12;</code>
       */
      public int getMLineDistance() {
        return mLineDistance_;
      }
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>optional int32 m_LineDistance = 12;</code>
       */
      public Builder setMLineDistance(int value) {
        bitField0_ |= 0x00000800;
        mLineDistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>optional int32 m_LineDistance = 12;</code>
       */
      public Builder clearMLineDistance() {
        bitField0_ = (bitField0_ & ~0x00000800);
        mLineDistance_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mTextFont_ = "";
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_textFont = 13;</code>
       */
      public boolean hasMTextFont() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_textFont = 13;</code>
       */
      public java.lang.String getMTextFont() {
        java.lang.Object ref = mTextFont_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mTextFont_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_textFont = 13;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMTextFontBytes() {
        java.lang.Object ref = mTextFont_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mTextFont_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_textFont = 13;</code>
       */
      public Builder setMTextFont(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        mTextFont_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_textFont = 13;</code>
       */
      public Builder clearMTextFont() {
        bitField0_ = (bitField0_ & ~0x00001000);
        mTextFont_ = getDefaultInstance().getMTextFont();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_textFont = 13;</code>
       */
      public Builder setMTextFontBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        mTextFont_ = value;
        onChanged();
        return this;
      }

      private int mTextAlignment_ ;
      /**
       * <pre>
       *文本对齐方式 left-1 right-2 center-132
       * </pre>
       *
       * <code>optional int32 m_textAlignment = 14;</code>
       */
      public boolean hasMTextAlignment() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       *文本对齐方式 left-1 right-2 center-132
       * </pre>
       *
       * <code>optional int32 m_textAlignment = 14;</code>
       */
      public int getMTextAlignment() {
        return mTextAlignment_;
      }
      /**
       * <pre>
       *文本对齐方式 left-1 right-2 center-132
       * </pre>
       *
       * <code>optional int32 m_textAlignment = 14;</code>
       */
      public Builder setMTextAlignment(int value) {
        bitField0_ |= 0x00002000;
        mTextAlignment_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *文本对齐方式 left-1 right-2 center-132
       * </pre>
       *
       * <code>optional int32 m_textAlignment = 14;</code>
       */
      public Builder clearMTextAlignment() {
        bitField0_ = (bitField0_ & ~0x00002000);
        mTextAlignment_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.LabelHotPot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.LabelHotPot)
    private static final com.nibiru.creator.data.HotPotData.LabelHotPot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.LabelHotPot();
    }

    public static com.nibiru.creator.data.HotPotData.LabelHotPot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<LabelHotPot>
        PARSER = new com.nibiru.protobuf.AbstractParser<LabelHotPot>() {
      public LabelHotPot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new LabelHotPot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<LabelHotPot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<LabelHotPot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.LabelHotPot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AudioHotPotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.AudioHotPot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_AudioName = 1;</code>
     */
    boolean hasMAudioName();
    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_AudioName = 1;</code>
     */
    java.lang.String getMAudioName();
    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_AudioName = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMAudioNameBytes();

    /**
     * <pre>
     *播放一次/循环播放
     * </pre>
     *
     * <code>required int32 m_LoopTime = 2;</code>
     */
    boolean hasMLoopTime();
    /**
     * <pre>
     *播放一次/循环播放
     * </pre>
     *
     * <code>required int32 m_LoopTime = 2;</code>
     */
    int getMLoopTime();

    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    boolean hasMDisplayName();
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    java.lang.String getMDisplayName();
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMDisplayNameBytes();

    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 4;</code>
     */
    boolean hasMIconPath();
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 4;</code>
     */
    java.lang.String getMIconPath();
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 4;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIconPathBytes();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 5;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 5;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 5;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 6;</code>
     */
    boolean hasMIconUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 6;</code>
     */
    java.lang.String getMIconUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 6;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIconUrlBytes();
  }
  /**
   * <pre>
   *音频热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.AudioHotPot}
   */
  public  static final class AudioHotPot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.AudioHotPot)
      AudioHotPotOrBuilder {
    // Use AudioHotPot.newBuilder() to construct.
    private AudioHotPot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AudioHotPot() {
      mAudioName_ = "";
      mLoopTime_ = 0;
      mDisplayName_ = "";
      mIconPath_ = "";
      mFileUrl_ = "";
      mIconUrl_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AudioHotPot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mAudioName_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mLoopTime_ = input.readInt32();
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mDisplayName_ = bs;
              break;
            }
            case 34: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              mIconPath_ = bs;
              break;
            }
            case 42: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              mFileUrl_ = bs;
              break;
            }
            case 50: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              mIconUrl_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_AudioHotPot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_AudioHotPot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.AudioHotPot.class, com.nibiru.creator.data.HotPotData.AudioHotPot.Builder.class);
    }

    private int bitField0_;
    public static final int M_AUDIONAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object mAudioName_;
    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_AudioName = 1;</code>
     */
    public boolean hasMAudioName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_AudioName = 1;</code>
     */
    public java.lang.String getMAudioName() {
      java.lang.Object ref = mAudioName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mAudioName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_AudioName = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMAudioNameBytes() {
      java.lang.Object ref = mAudioName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mAudioName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_LOOPTIME_FIELD_NUMBER = 2;
    private int mLoopTime_;
    /**
     * <pre>
     *播放一次/循环播放
     * </pre>
     *
     * <code>required int32 m_LoopTime = 2;</code>
     */
    public boolean hasMLoopTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *播放一次/循环播放
     * </pre>
     *
     * <code>required int32 m_LoopTime = 2;</code>
     */
    public int getMLoopTime() {
      return mLoopTime_;
    }

    public static final int M_DISPLAYNAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object mDisplayName_;
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    public boolean hasMDisplayName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    public java.lang.String getMDisplayName() {
      java.lang.Object ref = mDisplayName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mDisplayName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMDisplayNameBytes() {
      java.lang.Object ref = mDisplayName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mDisplayName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ICONPATH_FIELD_NUMBER = 4;
    private volatile java.lang.Object mIconPath_;
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 4;</code>
     */
    public boolean hasMIconPath() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 4;</code>
     */
    public java.lang.String getMIconPath() {
      java.lang.Object ref = mIconPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mIconPath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 4;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIconPathBytes() {
      java.lang.Object ref = mIconPath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mIconPath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_FILEURL_FIELD_NUMBER = 5;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 5;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 5;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 5;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ICONURL_FIELD_NUMBER = 6;
    private volatile java.lang.Object mIconUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 6;</code>
     */
    public boolean hasMIconUrl() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 6;</code>
     */
    public java.lang.String getMIconUrl() {
      java.lang.Object ref = mIconUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mIconUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 6;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIconUrlBytes() {
      java.lang.Object ref = mIconUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mIconUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMAudioName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMLoopTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mAudioName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mLoopTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mDisplayName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 4, mIconPath_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 5, mFileUrl_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 6, mIconUrl_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mAudioName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(2, mLoopTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mDisplayName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(4, mIconPath_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(5, mFileUrl_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(6, mIconUrl_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.AudioHotPot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.AudioHotPot other = (com.nibiru.creator.data.HotPotData.AudioHotPot) obj;

      boolean result = true;
      result = result && (hasMAudioName() == other.hasMAudioName());
      if (hasMAudioName()) {
        result = result && getMAudioName()
            .equals(other.getMAudioName());
      }
      result = result && (hasMLoopTime() == other.hasMLoopTime());
      if (hasMLoopTime()) {
        result = result && (getMLoopTime()
            == other.getMLoopTime());
      }
      result = result && (hasMDisplayName() == other.hasMDisplayName());
      if (hasMDisplayName()) {
        result = result && getMDisplayName()
            .equals(other.getMDisplayName());
      }
      result = result && (hasMIconPath() == other.hasMIconPath());
      if (hasMIconPath()) {
        result = result && getMIconPath()
            .equals(other.getMIconPath());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && (hasMIconUrl() == other.hasMIconUrl());
      if (hasMIconUrl()) {
        result = result && getMIconUrl()
            .equals(other.getMIconUrl());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMAudioName()) {
        hash = (37 * hash) + M_AUDIONAME_FIELD_NUMBER;
        hash = (53 * hash) + getMAudioName().hashCode();
      }
      if (hasMLoopTime()) {
        hash = (37 * hash) + M_LOOPTIME_FIELD_NUMBER;
        hash = (53 * hash) + getMLoopTime();
      }
      if (hasMDisplayName()) {
        hash = (37 * hash) + M_DISPLAYNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMDisplayName().hashCode();
      }
      if (hasMIconPath()) {
        hash = (37 * hash) + M_ICONPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMIconPath().hashCode();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      if (hasMIconUrl()) {
        hash = (37 * hash) + M_ICONURL_FIELD_NUMBER;
        hash = (53 * hash) + getMIconUrl().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.AudioHotPot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.AudioHotPot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.AudioHotPot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.AudioHotPot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.AudioHotPot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.AudioHotPot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.AudioHotPot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.AudioHotPot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.AudioHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.AudioHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.AudioHotPot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *音频热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.AudioHotPot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.AudioHotPot)
        com.nibiru.creator.data.HotPotData.AudioHotPotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_AudioHotPot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_AudioHotPot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.AudioHotPot.class, com.nibiru.creator.data.HotPotData.AudioHotPot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.AudioHotPot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mAudioName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mLoopTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mDisplayName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        mIconPath_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        mIconUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_AudioHotPot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.AudioHotPot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.AudioHotPot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.AudioHotPot build() {
        com.nibiru.creator.data.HotPotData.AudioHotPot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.AudioHotPot buildPartial() {
        com.nibiru.creator.data.HotPotData.AudioHotPot result = new com.nibiru.creator.data.HotPotData.AudioHotPot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mAudioName_ = mAudioName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mLoopTime_ = mLoopTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mDisplayName_ = mDisplayName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mIconPath_ = mIconPath_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mFileUrl_ = mFileUrl_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mIconUrl_ = mIconUrl_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.AudioHotPot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.AudioHotPot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.AudioHotPot other) {
        if (other == com.nibiru.creator.data.HotPotData.AudioHotPot.getDefaultInstance()) return this;
        if (other.hasMAudioName()) {
          bitField0_ |= 0x00000001;
          mAudioName_ = other.mAudioName_;
          onChanged();
        }
        if (other.hasMLoopTime()) {
          setMLoopTime(other.getMLoopTime());
        }
        if (other.hasMDisplayName()) {
          bitField0_ |= 0x00000004;
          mDisplayName_ = other.mDisplayName_;
          onChanged();
        }
        if (other.hasMIconPath()) {
          bitField0_ |= 0x00000008;
          mIconPath_ = other.mIconPath_;
          onChanged();
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00000010;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        if (other.hasMIconUrl()) {
          bitField0_ |= 0x00000020;
          mIconUrl_ = other.mIconUrl_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMAudioName()) {
          return false;
        }
        if (!hasMLoopTime()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.AudioHotPot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.AudioHotPot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mAudioName_ = "";
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_AudioName = 1;</code>
       */
      public boolean hasMAudioName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_AudioName = 1;</code>
       */
      public java.lang.String getMAudioName() {
        java.lang.Object ref = mAudioName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mAudioName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_AudioName = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMAudioNameBytes() {
        java.lang.Object ref = mAudioName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mAudioName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_AudioName = 1;</code>
       */
      public Builder setMAudioName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mAudioName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_AudioName = 1;</code>
       */
      public Builder clearMAudioName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mAudioName_ = getDefaultInstance().getMAudioName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_AudioName = 1;</code>
       */
      public Builder setMAudioNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mAudioName_ = value;
        onChanged();
        return this;
      }

      private int mLoopTime_ ;
      /**
       * <pre>
       *播放一次/循环播放
       * </pre>
       *
       * <code>required int32 m_LoopTime = 2;</code>
       */
      public boolean hasMLoopTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *播放一次/循环播放
       * </pre>
       *
       * <code>required int32 m_LoopTime = 2;</code>
       */
      public int getMLoopTime() {
        return mLoopTime_;
      }
      /**
       * <pre>
       *播放一次/循环播放
       * </pre>
       *
       * <code>required int32 m_LoopTime = 2;</code>
       */
      public Builder setMLoopTime(int value) {
        bitField0_ |= 0x00000002;
        mLoopTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *播放一次/循环播放
       * </pre>
       *
       * <code>required int32 m_LoopTime = 2;</code>
       */
      public Builder clearMLoopTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mLoopTime_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mDisplayName_ = "";
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public boolean hasMDisplayName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public java.lang.String getMDisplayName() {
        java.lang.Object ref = mDisplayName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mDisplayName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMDisplayNameBytes() {
        java.lang.Object ref = mDisplayName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mDisplayName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public Builder setMDisplayName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mDisplayName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public Builder clearMDisplayName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mDisplayName_ = getDefaultInstance().getMDisplayName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public Builder setMDisplayNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mDisplayName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mIconPath_ = "";
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 4;</code>
       */
      public boolean hasMIconPath() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 4;</code>
       */
      public java.lang.String getMIconPath() {
        java.lang.Object ref = mIconPath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mIconPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 4;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIconPathBytes() {
        java.lang.Object ref = mIconPath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mIconPath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 4;</code>
       */
      public Builder setMIconPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mIconPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 4;</code>
       */
      public Builder clearMIconPath() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mIconPath_ = getDefaultInstance().getMIconPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 4;</code>
       */
      public Builder setMIconPathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mIconPath_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 5;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 5;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 5;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 5;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 5;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 5;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mFileUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mIconUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 6;</code>
       */
      public boolean hasMIconUrl() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 6;</code>
       */
      public java.lang.String getMIconUrl() {
        java.lang.Object ref = mIconUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mIconUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 6;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIconUrlBytes() {
        java.lang.Object ref = mIconUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mIconUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 6;</code>
       */
      public Builder setMIconUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mIconUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 6;</code>
       */
      public Builder clearMIconUrl() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mIconUrl_ = getDefaultInstance().getMIconUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 6;</code>
       */
      public Builder setMIconUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mIconUrl_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.AudioHotPot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.AudioHotPot)
    private static final com.nibiru.creator.data.HotPotData.AudioHotPot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.AudioHotPot();
    }

    public static com.nibiru.creator.data.HotPotData.AudioHotPot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<AudioHotPot>
        PARSER = new com.nibiru.protobuf.AbstractParser<AudioHotPot>() {
      public AudioHotPot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new AudioHotPot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<AudioHotPot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<AudioHotPot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.AudioHotPot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SceneSwitchHotPotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.SceneSwitchHotPot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *跳转的场景ID
     * </pre>
     *
     * <code>required int32 m_NextScene = 1;</code>
     */
    boolean hasMNextScene();
    /**
     * <pre>
     *跳转的场景ID
     * </pre>
     *
     * <code>required int32 m_NextScene = 1;</code>
     */
    int getMNextScene();

    /**
     * <pre>
     *切换热点起点场景ID
     * </pre>
     *
     * <code>required int32 m_StartIndex = 2;</code>
     */
    boolean hasMStartIndex();
    /**
     * <pre>
     *切换热点起点场景ID
     * </pre>
     *
     * <code>required int32 m_StartIndex = 2;</code>
     */
    int getMStartIndex();

    /**
     * <pre>
     *切换热点结束场景ID
     * </pre>
     *
     * <code>required int32 m_EndIndex = 3;</code>
     */
    boolean hasMEndIndex();
    /**
     * <pre>
     *切换热点结束场景ID
     * </pre>
     *
     * <code>required int32 m_EndIndex = 3;</code>
     */
    int getMEndIndex();

    /**
     * <pre>
     *热点对应的场景类型
     * </pre>
     *
     * <code>required .DataFactory.SwitchType m_SwitchType = 4;</code>
     */
    boolean hasMSwitchType();
    /**
     * <pre>
     *热点对应的场景类型
     * </pre>
     *
     * <code>required .DataFactory.SwitchType m_SwitchType = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.SwitchType getMSwitchType();

    /**
     * <pre>
     *开始播放时间
     * </pre>
     *
     * <code>optional int64 startTime = 5;</code>
     */
    boolean hasStartTime();
    /**
     * <pre>
     *开始播放时间
     * </pre>
     *
     * <code>optional int64 startTime = 5;</code>
     */
    long getStartTime();

    /**
     * <pre>
     * optional int32          endTime=6;			//结束播放时间 - 此版本不再设置结束播放时间
     * </pre>
     *
     * <code>optional int32 m_arrowStyle = 6;</code>
     */
    boolean hasMArrowStyle();
    /**
     * <pre>
     * optional int32          endTime=6;			//结束播放时间 - 此版本不再设置结束播放时间
     * </pre>
     *
     * <code>optional int32 m_arrowStyle = 6;</code>
     */
    int getMArrowStyle();

    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
     */
    boolean hasMArrowColor();
    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4 getMArrowColor();
    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMArrowColorOrBuilder();

    /**
     * <pre>
     * (双向箭头样式 指向终点场景里的切换热点id)
     * </pre>
     *
     * <code>optional int32 m_HotOrEventIndex = 8;</code>
     */
    boolean hasMHotOrEventIndex();
    /**
     * <pre>
     * (双向箭头样式 指向终点场景里的切换热点id)
     * </pre>
     *
     * <code>optional int32 m_HotOrEventIndex = 8;</code>
     */
    int getMHotOrEventIndex();
  }
  /**
   * <pre>
   *切换热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.SceneSwitchHotPot}
   */
  public  static final class SceneSwitchHotPot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.SceneSwitchHotPot)
      SceneSwitchHotPotOrBuilder {
    // Use SceneSwitchHotPot.newBuilder() to construct.
    private SceneSwitchHotPot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SceneSwitchHotPot() {
      mNextScene_ = 0;
      mStartIndex_ = 0;
      mEndIndex_ = 0;
      mSwitchType_ = 0;
      startTime_ = 0L;
      mArrowStyle_ = 0;
      mHotOrEventIndex_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SceneSwitchHotPot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mNextScene_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mStartIndex_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              mEndIndex_ = input.readInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.SwitchType value = com.nibiru.creator.data.HotPotData.SwitchType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                mSwitchType_ = rawValue;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              startTime_ = input.readInt64();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mArrowStyle_ = input.readInt32();
              break;
            }
            case 58: {
              com.nibiru.creator.data.HotPotData.Vec4.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = mArrowColor_.toBuilder();
              }
              mArrowColor_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec4.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mArrowColor_);
                mArrowColor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              mHotOrEventIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SceneSwitchHotPot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SceneSwitchHotPot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.class, com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.Builder.class);
    }

    private int bitField0_;
    public static final int M_NEXTSCENE_FIELD_NUMBER = 1;
    private int mNextScene_;
    /**
     * <pre>
     *跳转的场景ID
     * </pre>
     *
     * <code>required int32 m_NextScene = 1;</code>
     */
    public boolean hasMNextScene() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *跳转的场景ID
     * </pre>
     *
     * <code>required int32 m_NextScene = 1;</code>
     */
    public int getMNextScene() {
      return mNextScene_;
    }

    public static final int M_STARTINDEX_FIELD_NUMBER = 2;
    private int mStartIndex_;
    /**
     * <pre>
     *切换热点起点场景ID
     * </pre>
     *
     * <code>required int32 m_StartIndex = 2;</code>
     */
    public boolean hasMStartIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *切换热点起点场景ID
     * </pre>
     *
     * <code>required int32 m_StartIndex = 2;</code>
     */
    public int getMStartIndex() {
      return mStartIndex_;
    }

    public static final int M_ENDINDEX_FIELD_NUMBER = 3;
    private int mEndIndex_;
    /**
     * <pre>
     *切换热点结束场景ID
     * </pre>
     *
     * <code>required int32 m_EndIndex = 3;</code>
     */
    public boolean hasMEndIndex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *切换热点结束场景ID
     * </pre>
     *
     * <code>required int32 m_EndIndex = 3;</code>
     */
    public int getMEndIndex() {
      return mEndIndex_;
    }

    public static final int M_SWITCHTYPE_FIELD_NUMBER = 4;
    private int mSwitchType_;
    /**
     * <pre>
     *热点对应的场景类型
     * </pre>
     *
     * <code>required .DataFactory.SwitchType m_SwitchType = 4;</code>
     */
    public boolean hasMSwitchType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *热点对应的场景类型
     * </pre>
     *
     * <code>required .DataFactory.SwitchType m_SwitchType = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.SwitchType getMSwitchType() {
      com.nibiru.creator.data.HotPotData.SwitchType result = com.nibiru.creator.data.HotPotData.SwitchType.valueOf(mSwitchType_);
      return result == null ? com.nibiru.creator.data.HotPotData.SwitchType.SwitchType_Normal : result;
    }

    public static final int STARTTIME_FIELD_NUMBER = 5;
    private long startTime_;
    /**
     * <pre>
     *开始播放时间
     * </pre>
     *
     * <code>optional int64 startTime = 5;</code>
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *开始播放时间
     * </pre>
     *
     * <code>optional int64 startTime = 5;</code>
     */
    public long getStartTime() {
      return startTime_;
    }

    public static final int M_ARROWSTYLE_FIELD_NUMBER = 6;
    private int mArrowStyle_;
    /**
     * <pre>
     * optional int32          endTime=6;			//结束播放时间 - 此版本不再设置结束播放时间
     * </pre>
     *
     * <code>optional int32 m_arrowStyle = 6;</code>
     */
    public boolean hasMArrowStyle() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * optional int32          endTime=6;			//结束播放时间 - 此版本不再设置结束播放时间
     * </pre>
     *
     * <code>optional int32 m_arrowStyle = 6;</code>
     */
    public int getMArrowStyle() {
      return mArrowStyle_;
    }

    public static final int M_ARROWCOLOR_FIELD_NUMBER = 7;
    private com.nibiru.creator.data.HotPotData.Vec4 mArrowColor_;
    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
     */
    public boolean hasMArrowColor() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4 getMArrowColor() {
      return mArrowColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mArrowColor_;
    }
    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMArrowColorOrBuilder() {
      return mArrowColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mArrowColor_;
    }

    public static final int M_HOTOREVENTINDEX_FIELD_NUMBER = 8;
    private int mHotOrEventIndex_;
    /**
     * <pre>
     * (双向箭头样式 指向终点场景里的切换热点id)
     * </pre>
     *
     * <code>optional int32 m_HotOrEventIndex = 8;</code>
     */
    public boolean hasMHotOrEventIndex() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * (双向箭头样式 指向终点场景里的切换热点id)
     * </pre>
     *
     * <code>optional int32 m_HotOrEventIndex = 8;</code>
     */
    public int getMHotOrEventIndex() {
      return mHotOrEventIndex_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMNextScene()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMStartIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMEndIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMSwitchType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMArrowColor()) {
        if (!getMArrowColor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mNextScene_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mStartIndex_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, mEndIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, mSwitchType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt64(5, startTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, mArrowStyle_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, getMArrowColor());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, mHotOrEventIndex_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(1, mNextScene_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(2, mStartIndex_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(3, mEndIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(4, mSwitchType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(5, startTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(6, mArrowStyle_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(7, getMArrowColor());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(8, mHotOrEventIndex_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.SceneSwitchHotPot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.SceneSwitchHotPot other = (com.nibiru.creator.data.HotPotData.SceneSwitchHotPot) obj;

      boolean result = true;
      result = result && (hasMNextScene() == other.hasMNextScene());
      if (hasMNextScene()) {
        result = result && (getMNextScene()
            == other.getMNextScene());
      }
      result = result && (hasMStartIndex() == other.hasMStartIndex());
      if (hasMStartIndex()) {
        result = result && (getMStartIndex()
            == other.getMStartIndex());
      }
      result = result && (hasMEndIndex() == other.hasMEndIndex());
      if (hasMEndIndex()) {
        result = result && (getMEndIndex()
            == other.getMEndIndex());
      }
      result = result && (hasMSwitchType() == other.hasMSwitchType());
      if (hasMSwitchType()) {
        result = result && mSwitchType_ == other.mSwitchType_;
      }
      result = result && (hasStartTime() == other.hasStartTime());
      if (hasStartTime()) {
        result = result && (getStartTime()
            == other.getStartTime());
      }
      result = result && (hasMArrowStyle() == other.hasMArrowStyle());
      if (hasMArrowStyle()) {
        result = result && (getMArrowStyle()
            == other.getMArrowStyle());
      }
      result = result && (hasMArrowColor() == other.hasMArrowColor());
      if (hasMArrowColor()) {
        result = result && getMArrowColor()
            .equals(other.getMArrowColor());
      }
      result = result && (hasMHotOrEventIndex() == other.hasMHotOrEventIndex());
      if (hasMHotOrEventIndex()) {
        result = result && (getMHotOrEventIndex()
            == other.getMHotOrEventIndex());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMNextScene()) {
        hash = (37 * hash) + M_NEXTSCENE_FIELD_NUMBER;
        hash = (53 * hash) + getMNextScene();
      }
      if (hasMStartIndex()) {
        hash = (37 * hash) + M_STARTINDEX_FIELD_NUMBER;
        hash = (53 * hash) + getMStartIndex();
      }
      if (hasMEndIndex()) {
        hash = (37 * hash) + M_ENDINDEX_FIELD_NUMBER;
        hash = (53 * hash) + getMEndIndex();
      }
      if (hasMSwitchType()) {
        hash = (37 * hash) + M_SWITCHTYPE_FIELD_NUMBER;
        hash = (53 * hash) + mSwitchType_;
      }
      if (hasStartTime()) {
        hash = (37 * hash) + STARTTIME_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getStartTime());
      }
      if (hasMArrowStyle()) {
        hash = (37 * hash) + M_ARROWSTYLE_FIELD_NUMBER;
        hash = (53 * hash) + getMArrowStyle();
      }
      if (hasMArrowColor()) {
        hash = (37 * hash) + M_ARROWCOLOR_FIELD_NUMBER;
        hash = (53 * hash) + getMArrowColor().hashCode();
      }
      if (hasMHotOrEventIndex()) {
        hash = (37 * hash) + M_HOTOREVENTINDEX_FIELD_NUMBER;
        hash = (53 * hash) + getMHotOrEventIndex();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.SceneSwitchHotPot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *切换热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.SceneSwitchHotPot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.SceneSwitchHotPot)
        com.nibiru.creator.data.HotPotData.SceneSwitchHotPotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SceneSwitchHotPot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SceneSwitchHotPot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.class, com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMArrowColorFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mNextScene_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        mStartIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mEndIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        mSwitchType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        startTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        mArrowStyle_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (mArrowColorBuilder_ == null) {
          mArrowColor_ = null;
        } else {
          mArrowColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        mHotOrEventIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SceneSwitchHotPot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.SceneSwitchHotPot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.SceneSwitchHotPot build() {
        com.nibiru.creator.data.HotPotData.SceneSwitchHotPot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.SceneSwitchHotPot buildPartial() {
        com.nibiru.creator.data.HotPotData.SceneSwitchHotPot result = new com.nibiru.creator.data.HotPotData.SceneSwitchHotPot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mNextScene_ = mNextScene_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mStartIndex_ = mStartIndex_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mEndIndex_ = mEndIndex_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mSwitchType_ = mSwitchType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.startTime_ = startTime_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mArrowStyle_ = mArrowStyle_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (mArrowColorBuilder_ == null) {
          result.mArrowColor_ = mArrowColor_;
        } else {
          result.mArrowColor_ = mArrowColorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mHotOrEventIndex_ = mHotOrEventIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.SceneSwitchHotPot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.SceneSwitchHotPot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.SceneSwitchHotPot other) {
        if (other == com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.getDefaultInstance()) return this;
        if (other.hasMNextScene()) {
          setMNextScene(other.getMNextScene());
        }
        if (other.hasMStartIndex()) {
          setMStartIndex(other.getMStartIndex());
        }
        if (other.hasMEndIndex()) {
          setMEndIndex(other.getMEndIndex());
        }
        if (other.hasMSwitchType()) {
          setMSwitchType(other.getMSwitchType());
        }
        if (other.hasStartTime()) {
          setStartTime(other.getStartTime());
        }
        if (other.hasMArrowStyle()) {
          setMArrowStyle(other.getMArrowStyle());
        }
        if (other.hasMArrowColor()) {
          mergeMArrowColor(other.getMArrowColor());
        }
        if (other.hasMHotOrEventIndex()) {
          setMHotOrEventIndex(other.getMHotOrEventIndex());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMNextScene()) {
          return false;
        }
        if (!hasMStartIndex()) {
          return false;
        }
        if (!hasMEndIndex()) {
          return false;
        }
        if (!hasMSwitchType()) {
          return false;
        }
        if (hasMArrowColor()) {
          if (!getMArrowColor().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.SceneSwitchHotPot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.SceneSwitchHotPot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int mNextScene_ ;
      /**
       * <pre>
       *跳转的场景ID
       * </pre>
       *
       * <code>required int32 m_NextScene = 1;</code>
       */
      public boolean hasMNextScene() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *跳转的场景ID
       * </pre>
       *
       * <code>required int32 m_NextScene = 1;</code>
       */
      public int getMNextScene() {
        return mNextScene_;
      }
      /**
       * <pre>
       *跳转的场景ID
       * </pre>
       *
       * <code>required int32 m_NextScene = 1;</code>
       */
      public Builder setMNextScene(int value) {
        bitField0_ |= 0x00000001;
        mNextScene_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *跳转的场景ID
       * </pre>
       *
       * <code>required int32 m_NextScene = 1;</code>
       */
      public Builder clearMNextScene() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mNextScene_ = 0;
        onChanged();
        return this;
      }

      private int mStartIndex_ ;
      /**
       * <pre>
       *切换热点起点场景ID
       * </pre>
       *
       * <code>required int32 m_StartIndex = 2;</code>
       */
      public boolean hasMStartIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *切换热点起点场景ID
       * </pre>
       *
       * <code>required int32 m_StartIndex = 2;</code>
       */
      public int getMStartIndex() {
        return mStartIndex_;
      }
      /**
       * <pre>
       *切换热点起点场景ID
       * </pre>
       *
       * <code>required int32 m_StartIndex = 2;</code>
       */
      public Builder setMStartIndex(int value) {
        bitField0_ |= 0x00000002;
        mStartIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *切换热点起点场景ID
       * </pre>
       *
       * <code>required int32 m_StartIndex = 2;</code>
       */
      public Builder clearMStartIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mStartIndex_ = 0;
        onChanged();
        return this;
      }

      private int mEndIndex_ ;
      /**
       * <pre>
       *切换热点结束场景ID
       * </pre>
       *
       * <code>required int32 m_EndIndex = 3;</code>
       */
      public boolean hasMEndIndex() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *切换热点结束场景ID
       * </pre>
       *
       * <code>required int32 m_EndIndex = 3;</code>
       */
      public int getMEndIndex() {
        return mEndIndex_;
      }
      /**
       * <pre>
       *切换热点结束场景ID
       * </pre>
       *
       * <code>required int32 m_EndIndex = 3;</code>
       */
      public Builder setMEndIndex(int value) {
        bitField0_ |= 0x00000004;
        mEndIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *切换热点结束场景ID
       * </pre>
       *
       * <code>required int32 m_EndIndex = 3;</code>
       */
      public Builder clearMEndIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mEndIndex_ = 0;
        onChanged();
        return this;
      }

      private int mSwitchType_ = 0;
      /**
       * <pre>
       *热点对应的场景类型
       * </pre>
       *
       * <code>required .DataFactory.SwitchType m_SwitchType = 4;</code>
       */
      public boolean hasMSwitchType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *热点对应的场景类型
       * </pre>
       *
       * <code>required .DataFactory.SwitchType m_SwitchType = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.SwitchType getMSwitchType() {
        com.nibiru.creator.data.HotPotData.SwitchType result = com.nibiru.creator.data.HotPotData.SwitchType.valueOf(mSwitchType_);
        return result == null ? com.nibiru.creator.data.HotPotData.SwitchType.SwitchType_Normal : result;
      }
      /**
       * <pre>
       *热点对应的场景类型
       * </pre>
       *
       * <code>required .DataFactory.SwitchType m_SwitchType = 4;</code>
       */
      public Builder setMSwitchType(com.nibiru.creator.data.HotPotData.SwitchType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        mSwitchType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点对应的场景类型
       * </pre>
       *
       * <code>required .DataFactory.SwitchType m_SwitchType = 4;</code>
       */
      public Builder clearMSwitchType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mSwitchType_ = 0;
        onChanged();
        return this;
      }

      private long startTime_ ;
      /**
       * <pre>
       *开始播放时间
       * </pre>
       *
       * <code>optional int64 startTime = 5;</code>
       */
      public boolean hasStartTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *开始播放时间
       * </pre>
       *
       * <code>optional int64 startTime = 5;</code>
       */
      public long getStartTime() {
        return startTime_;
      }
      /**
       * <pre>
       *开始播放时间
       * </pre>
       *
       * <code>optional int64 startTime = 5;</code>
       */
      public Builder setStartTime(long value) {
        bitField0_ |= 0x00000010;
        startTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *开始播放时间
       * </pre>
       *
       * <code>optional int64 startTime = 5;</code>
       */
      public Builder clearStartTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        startTime_ = 0L;
        onChanged();
        return this;
      }

      private int mArrowStyle_ ;
      /**
       * <pre>
       * optional int32          endTime=6;			//结束播放时间 - 此版本不再设置结束播放时间
       * </pre>
       *
       * <code>optional int32 m_arrowStyle = 6;</code>
       */
      public boolean hasMArrowStyle() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * optional int32          endTime=6;			//结束播放时间 - 此版本不再设置结束播放时间
       * </pre>
       *
       * <code>optional int32 m_arrowStyle = 6;</code>
       */
      public int getMArrowStyle() {
        return mArrowStyle_;
      }
      /**
       * <pre>
       * optional int32          endTime=6;			//结束播放时间 - 此版本不再设置结束播放时间
       * </pre>
       *
       * <code>optional int32 m_arrowStyle = 6;</code>
       */
      public Builder setMArrowStyle(int value) {
        bitField0_ |= 0x00000020;
        mArrowStyle_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * optional int32          endTime=6;			//结束播放时间 - 此版本不再设置结束播放时间
       * </pre>
       *
       * <code>optional int32 m_arrowStyle = 6;</code>
       */
      public Builder clearMArrowStyle() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mArrowStyle_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec4 mArrowColor_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> mArrowColorBuilder_;
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
       */
      public boolean hasMArrowColor() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4 getMArrowColor() {
        if (mArrowColorBuilder_ == null) {
          return mArrowColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mArrowColor_;
        } else {
          return mArrowColorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
       */
      public Builder setMArrowColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mArrowColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mArrowColor_ = value;
          onChanged();
        } else {
          mArrowColorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
       */
      public Builder setMArrowColor(
          com.nibiru.creator.data.HotPotData.Vec4.Builder builderForValue) {
        if (mArrowColorBuilder_ == null) {
          mArrowColor_ = builderForValue.build();
          onChanged();
        } else {
          mArrowColorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
       */
      public Builder mergeMArrowColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mArrowColorBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              mArrowColor_ != null &&
              mArrowColor_ != com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance()) {
            mArrowColor_ =
              com.nibiru.creator.data.HotPotData.Vec4.newBuilder(mArrowColor_).mergeFrom(value).buildPartial();
          } else {
            mArrowColor_ = value;
          }
          onChanged();
        } else {
          mArrowColorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
       */
      public Builder clearMArrowColor() {
        if (mArrowColorBuilder_ == null) {
          mArrowColor_ = null;
          onChanged();
        } else {
          mArrowColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4.Builder getMArrowColorBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getMArrowColorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMArrowColorOrBuilder() {
        if (mArrowColorBuilder_ != null) {
          return mArrowColorBuilder_.getMessageOrBuilder();
        } else {
          return mArrowColor_ == null ?
              com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mArrowColor_;
        }
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 7;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> 
          getMArrowColorFieldBuilder() {
        if (mArrowColorBuilder_ == null) {
          mArrowColorBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder>(
                  getMArrowColor(),
                  getParentForChildren(),
                  isClean());
          mArrowColor_ = null;
        }
        return mArrowColorBuilder_;
      }

      private int mHotOrEventIndex_ ;
      /**
       * <pre>
       * (双向箭头样式 指向终点场景里的切换热点id)
       * </pre>
       *
       * <code>optional int32 m_HotOrEventIndex = 8;</code>
       */
      public boolean hasMHotOrEventIndex() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * (双向箭头样式 指向终点场景里的切换热点id)
       * </pre>
       *
       * <code>optional int32 m_HotOrEventIndex = 8;</code>
       */
      public int getMHotOrEventIndex() {
        return mHotOrEventIndex_;
      }
      /**
       * <pre>
       * (双向箭头样式 指向终点场景里的切换热点id)
       * </pre>
       *
       * <code>optional int32 m_HotOrEventIndex = 8;</code>
       */
      public Builder setMHotOrEventIndex(int value) {
        bitField0_ |= 0x00000080;
        mHotOrEventIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (双向箭头样式 指向终点场景里的切换热点id)
       * </pre>
       *
       * <code>optional int32 m_HotOrEventIndex = 8;</code>
       */
      public Builder clearMHotOrEventIndex() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mHotOrEventIndex_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.SceneSwitchHotPot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.SceneSwitchHotPot)
    private static final com.nibiru.creator.data.HotPotData.SceneSwitchHotPot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.SceneSwitchHotPot();
    }

    public static com.nibiru.creator.data.HotPotData.SceneSwitchHotPot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<SceneSwitchHotPot>
        PARSER = new com.nibiru.protobuf.AbstractParser<SceneSwitchHotPot>() {
      public SceneSwitchHotPot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new SceneSwitchHotPot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<SceneSwitchHotPot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<SceneSwitchHotPot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.SceneSwitchHotPot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImageTxtHotPotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.ImageTxtHotPot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImagePath = 1;</code>
     */
    boolean hasMImagePath();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImagePath = 1;</code>
     */
    java.lang.String getMImagePath();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImagePath = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMImagePathBytes();

    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>required string m_Txt = 2;</code>
     */
    boolean hasMTxt();
    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>required string m_Txt = 2;</code>
     */
    java.lang.String getMTxt();
    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>required string m_Txt = 2;</code>
     */
    com.nibiru.protobuf.ByteString
        getMTxtBytes();

    /**
     * <pre>
     *图片类型
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 3;</code>
     */
    boolean hasMImageType();
    /**
     * <pre>
     *图片类型
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.ImageType getMImageType();

    /**
     * <pre>
     *图片文本排列方式
     * </pre>
     *
     * <code>required .DataFactory.ImageTxtMode m_ImageTxtMode = 4;</code>
     */
    boolean hasMImageTxtMode();
    /**
     * <pre>
     *图片文本排列方式
     * </pre>
     *
     * <code>required .DataFactory.ImageTxtMode m_ImageTxtMode = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.ImageTxtMode getMImageTxtMode();

    /**
     * <pre>
     *文本
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
     */
    boolean hasMFontColor();
    /**
     * <pre>
     *文本
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4 getMFontColor();
    /**
     * <pre>
     *文本
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFontColorOrBuilder();

    /**
     * <pre>
     *文本字体大小
     * </pre>
     *
     * <code>optional float m_CharSize = 6;</code>
     */
    boolean hasMCharSize();
    /**
     * <pre>
     *文本字体大小
     * </pre>
     *
     * <code>optional float m_CharSize = 6;</code>
     */
    float getMCharSize();

    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
     */
    boolean hasMShowRect();
    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMShowRect();
    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder();

    /**
     * <pre>
     *加粗
     * </pre>
     *
     * <code>optional int32 m_Bolid = 8;</code>
     */
    boolean hasMBolid();
    /**
     * <pre>
     *加粗
     * </pre>
     *
     * <code>optional int32 m_Bolid = 8;</code>
     */
    int getMBolid();

    /**
     * <pre>
     *斜体
     * </pre>
     *
     * <code>optional int32 m_Italic = 9;</code>
     */
    boolean hasMItalic();
    /**
     * <pre>
     *斜体
     * </pre>
     *
     * <code>optional int32 m_Italic = 9;</code>
     */
    int getMItalic();

    /**
     * <pre>
     *下划线
     * </pre>
     *
     * <code>optional int32 m_Underline = 10;</code>
     */
    boolean hasMUnderline();
    /**
     * <pre>
     *下划线
     * </pre>
     *
     * <code>optional int32 m_Underline = 10;</code>
     */
    int getMUnderline();

    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>optional int32 m_LineDistance = 11;</code>
     */
    boolean hasMLineDistance();
    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>optional int32 m_LineDistance = 11;</code>
     */
    int getMLineDistance();

    /**
     * <pre>
     *文本字体
     * </pre>
     *
     * <code>required string m_textFont = 12;</code>
     */
    boolean hasMTextFont();
    /**
     * <pre>
     *文本字体
     * </pre>
     *
     * <code>required string m_textFont = 12;</code>
     */
    java.lang.String getMTextFont();
    /**
     * <pre>
     *文本字体
     * </pre>
     *
     * <code>required string m_textFont = 12;</code>
     */
    com.nibiru.protobuf.ByteString
        getMTextFontBytes();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 13;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 13;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 13;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();
  }
  /**
   * <pre>
   *图文热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.ImageTxtHotPot}
   */
  public  static final class ImageTxtHotPot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.ImageTxtHotPot)
      ImageTxtHotPotOrBuilder {
    // Use ImageTxtHotPot.newBuilder() to construct.
    private ImageTxtHotPot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImageTxtHotPot() {
      mImagePath_ = "";
      mTxt_ = "";
      mImageType_ = 0;
      mImageTxtMode_ = 0;
      mCharSize_ = 0F;
      mBolid_ = 0;
      mItalic_ = 0;
      mUnderline_ = 0;
      mLineDistance_ = 0;
      mTextFont_ = "";
      mFileUrl_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ImageTxtHotPot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mImagePath_ = bs;
              break;
            }
            case 18: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              mTxt_ = bs;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.ImageType value = com.nibiru.creator.data.HotPotData.ImageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                mImageType_ = rawValue;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.ImageTxtMode value = com.nibiru.creator.data.HotPotData.ImageTxtMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                mImageTxtMode_ = rawValue;
              }
              break;
            }
            case 42: {
              com.nibiru.creator.data.HotPotData.Vec4.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = mFontColor_.toBuilder();
              }
              mFontColor_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec4.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mFontColor_);
                mFontColor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              mCharSize_ = input.readFloat();
              break;
            }
            case 58: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = mShowRect_.toBuilder();
              }
              mShowRect_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mShowRect_);
                mShowRect_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              mBolid_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              mItalic_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              mUnderline_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              mLineDistance_ = input.readInt32();
              break;
            }
            case 98: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000800;
              mTextFont_ = bs;
              break;
            }
            case 106: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00001000;
              mFileUrl_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageTxtHotPot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageTxtHotPot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.ImageTxtHotPot.class, com.nibiru.creator.data.HotPotData.ImageTxtHotPot.Builder.class);
    }

    private int bitField0_;
    public static final int M_IMAGEPATH_FIELD_NUMBER = 1;
    private volatile java.lang.Object mImagePath_;
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImagePath = 1;</code>
     */
    public boolean hasMImagePath() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImagePath = 1;</code>
     */
    public java.lang.String getMImagePath() {
      java.lang.Object ref = mImagePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mImagePath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>required string m_ImagePath = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMImagePathBytes() {
      java.lang.Object ref = mImagePath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mImagePath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_TXT_FIELD_NUMBER = 2;
    private volatile java.lang.Object mTxt_;
    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>required string m_Txt = 2;</code>
     */
    public boolean hasMTxt() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>required string m_Txt = 2;</code>
     */
    public java.lang.String getMTxt() {
      java.lang.Object ref = mTxt_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mTxt_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>required string m_Txt = 2;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMTxtBytes() {
      java.lang.Object ref = mTxt_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mTxt_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_IMAGETYPE_FIELD_NUMBER = 3;
    private int mImageType_;
    /**
     * <pre>
     *图片类型
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 3;</code>
     */
    public boolean hasMImageType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *图片类型
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.ImageType getMImageType() {
      com.nibiru.creator.data.HotPotData.ImageType result = com.nibiru.creator.data.HotPotData.ImageType.valueOf(mImageType_);
      return result == null ? com.nibiru.creator.data.HotPotData.ImageType.ImageType_2D : result;
    }

    public static final int M_IMAGETXTMODE_FIELD_NUMBER = 4;
    private int mImageTxtMode_;
    /**
     * <pre>
     *图片文本排列方式
     * </pre>
     *
     * <code>required .DataFactory.ImageTxtMode m_ImageTxtMode = 4;</code>
     */
    public boolean hasMImageTxtMode() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *图片文本排列方式
     * </pre>
     *
     * <code>required .DataFactory.ImageTxtMode m_ImageTxtMode = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.ImageTxtMode getMImageTxtMode() {
      com.nibiru.creator.data.HotPotData.ImageTxtMode result = com.nibiru.creator.data.HotPotData.ImageTxtMode.valueOf(mImageTxtMode_);
      return result == null ? com.nibiru.creator.data.HotPotData.ImageTxtMode.Horizontal_Mode : result;
    }

    public static final int M_FONTCOLOR_FIELD_NUMBER = 5;
    private com.nibiru.creator.data.HotPotData.Vec4 mFontColor_;
    /**
     * <pre>
     *文本
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
     */
    public boolean hasMFontColor() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *文本
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4 getMFontColor() {
      return mFontColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
    }
    /**
     * <pre>
     *文本
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFontColorOrBuilder() {
      return mFontColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
    }

    public static final int M_CHARSIZE_FIELD_NUMBER = 6;
    private float mCharSize_;
    /**
     * <pre>
     *文本字体大小
     * </pre>
     *
     * <code>optional float m_CharSize = 6;</code>
     */
    public boolean hasMCharSize() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *文本字体大小
     * </pre>
     *
     * <code>optional float m_CharSize = 6;</code>
     */
    public float getMCharSize() {
      return mCharSize_;
    }

    public static final int M_SHOWRECT_FIELD_NUMBER = 7;
    private com.nibiru.creator.data.HotPotData.Vec2 mShowRect_;
    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
     */
    public boolean hasMShowRect() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMShowRect() {
      return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
    }
    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder() {
      return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
    }

    public static final int M_BOLID_FIELD_NUMBER = 8;
    private int mBolid_;
    /**
     * <pre>
     *加粗
     * </pre>
     *
     * <code>optional int32 m_Bolid = 8;</code>
     */
    public boolean hasMBolid() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *加粗
     * </pre>
     *
     * <code>optional int32 m_Bolid = 8;</code>
     */
    public int getMBolid() {
      return mBolid_;
    }

    public static final int M_ITALIC_FIELD_NUMBER = 9;
    private int mItalic_;
    /**
     * <pre>
     *斜体
     * </pre>
     *
     * <code>optional int32 m_Italic = 9;</code>
     */
    public boolean hasMItalic() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     *斜体
     * </pre>
     *
     * <code>optional int32 m_Italic = 9;</code>
     */
    public int getMItalic() {
      return mItalic_;
    }

    public static final int M_UNDERLINE_FIELD_NUMBER = 10;
    private int mUnderline_;
    /**
     * <pre>
     *下划线
     * </pre>
     *
     * <code>optional int32 m_Underline = 10;</code>
     */
    public boolean hasMUnderline() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     *下划线
     * </pre>
     *
     * <code>optional int32 m_Underline = 10;</code>
     */
    public int getMUnderline() {
      return mUnderline_;
    }

    public static final int M_LINEDISTANCE_FIELD_NUMBER = 11;
    private int mLineDistance_;
    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>optional int32 m_LineDistance = 11;</code>
     */
    public boolean hasMLineDistance() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>optional int32 m_LineDistance = 11;</code>
     */
    public int getMLineDistance() {
      return mLineDistance_;
    }

    public static final int M_TEXTFONT_FIELD_NUMBER = 12;
    private volatile java.lang.Object mTextFont_;
    /**
     * <pre>
     *文本字体
     * </pre>
     *
     * <code>required string m_textFont = 12;</code>
     */
    public boolean hasMTextFont() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     *文本字体
     * </pre>
     *
     * <code>required string m_textFont = 12;</code>
     */
    public java.lang.String getMTextFont() {
      java.lang.Object ref = mTextFont_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mTextFont_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *文本字体
     * </pre>
     *
     * <code>required string m_textFont = 12;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMTextFontBytes() {
      java.lang.Object ref = mTextFont_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mTextFont_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_FILEURL_FIELD_NUMBER = 13;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 13;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 13;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 13;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMImagePath()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMTxt()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMImageType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMImageTxtMode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMShowRect()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMTextFont()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMFontColor()) {
        if (!getMFontColor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getMShowRect().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mImagePath_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 2, mTxt_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, mImageType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, mImageTxtMode_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getMFontColor());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, mCharSize_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, getMShowRect());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, mBolid_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, mItalic_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, mUnderline_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, mLineDistance_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 12, mTextFont_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 13, mFileUrl_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mImagePath_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(2, mTxt_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(3, mImageType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(4, mImageTxtMode_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(5, getMFontColor());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(6, mCharSize_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(7, getMShowRect());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(8, mBolid_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(9, mItalic_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(10, mUnderline_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(11, mLineDistance_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(12, mTextFont_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(13, mFileUrl_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.ImageTxtHotPot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.ImageTxtHotPot other = (com.nibiru.creator.data.HotPotData.ImageTxtHotPot) obj;

      boolean result = true;
      result = result && (hasMImagePath() == other.hasMImagePath());
      if (hasMImagePath()) {
        result = result && getMImagePath()
            .equals(other.getMImagePath());
      }
      result = result && (hasMTxt() == other.hasMTxt());
      if (hasMTxt()) {
        result = result && getMTxt()
            .equals(other.getMTxt());
      }
      result = result && (hasMImageType() == other.hasMImageType());
      if (hasMImageType()) {
        result = result && mImageType_ == other.mImageType_;
      }
      result = result && (hasMImageTxtMode() == other.hasMImageTxtMode());
      if (hasMImageTxtMode()) {
        result = result && mImageTxtMode_ == other.mImageTxtMode_;
      }
      result = result && (hasMFontColor() == other.hasMFontColor());
      if (hasMFontColor()) {
        result = result && getMFontColor()
            .equals(other.getMFontColor());
      }
      result = result && (hasMCharSize() == other.hasMCharSize());
      if (hasMCharSize()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMCharSize())
            == java.lang.Float.floatToIntBits(
                other.getMCharSize()));
      }
      result = result && (hasMShowRect() == other.hasMShowRect());
      if (hasMShowRect()) {
        result = result && getMShowRect()
            .equals(other.getMShowRect());
      }
      result = result && (hasMBolid() == other.hasMBolid());
      if (hasMBolid()) {
        result = result && (getMBolid()
            == other.getMBolid());
      }
      result = result && (hasMItalic() == other.hasMItalic());
      if (hasMItalic()) {
        result = result && (getMItalic()
            == other.getMItalic());
      }
      result = result && (hasMUnderline() == other.hasMUnderline());
      if (hasMUnderline()) {
        result = result && (getMUnderline()
            == other.getMUnderline());
      }
      result = result && (hasMLineDistance() == other.hasMLineDistance());
      if (hasMLineDistance()) {
        result = result && (getMLineDistance()
            == other.getMLineDistance());
      }
      result = result && (hasMTextFont() == other.hasMTextFont());
      if (hasMTextFont()) {
        result = result && getMTextFont()
            .equals(other.getMTextFont());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMImagePath()) {
        hash = (37 * hash) + M_IMAGEPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMImagePath().hashCode();
      }
      if (hasMTxt()) {
        hash = (37 * hash) + M_TXT_FIELD_NUMBER;
        hash = (53 * hash) + getMTxt().hashCode();
      }
      if (hasMImageType()) {
        hash = (37 * hash) + M_IMAGETYPE_FIELD_NUMBER;
        hash = (53 * hash) + mImageType_;
      }
      if (hasMImageTxtMode()) {
        hash = (37 * hash) + M_IMAGETXTMODE_FIELD_NUMBER;
        hash = (53 * hash) + mImageTxtMode_;
      }
      if (hasMFontColor()) {
        hash = (37 * hash) + M_FONTCOLOR_FIELD_NUMBER;
        hash = (53 * hash) + getMFontColor().hashCode();
      }
      if (hasMCharSize()) {
        hash = (37 * hash) + M_CHARSIZE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMCharSize());
      }
      if (hasMShowRect()) {
        hash = (37 * hash) + M_SHOWRECT_FIELD_NUMBER;
        hash = (53 * hash) + getMShowRect().hashCode();
      }
      if (hasMBolid()) {
        hash = (37 * hash) + M_BOLID_FIELD_NUMBER;
        hash = (53 * hash) + getMBolid();
      }
      if (hasMItalic()) {
        hash = (37 * hash) + M_ITALIC_FIELD_NUMBER;
        hash = (53 * hash) + getMItalic();
      }
      if (hasMUnderline()) {
        hash = (37 * hash) + M_UNDERLINE_FIELD_NUMBER;
        hash = (53 * hash) + getMUnderline();
      }
      if (hasMLineDistance()) {
        hash = (37 * hash) + M_LINEDISTANCE_FIELD_NUMBER;
        hash = (53 * hash) + getMLineDistance();
      }
      if (hasMTextFont()) {
        hash = (37 * hash) + M_TEXTFONT_FIELD_NUMBER;
        hash = (53 * hash) + getMTextFont().hashCode();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.ImageTxtHotPot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *图文热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.ImageTxtHotPot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.ImageTxtHotPot)
        com.nibiru.creator.data.HotPotData.ImageTxtHotPotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageTxtHotPot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageTxtHotPot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.ImageTxtHotPot.class, com.nibiru.creator.data.HotPotData.ImageTxtHotPot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.ImageTxtHotPot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMFontColorFieldBuilder();
          getMShowRectFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mImagePath_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mTxt_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        mImageType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        mImageTxtMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (mFontColorBuilder_ == null) {
          mFontColor_ = null;
        } else {
          mFontColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        mCharSize_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (mShowRectBuilder_ == null) {
          mShowRect_ = null;
        } else {
          mShowRectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        mBolid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        mItalic_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        mUnderline_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        mLineDistance_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        mTextFont_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageTxtHotPot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.ImageTxtHotPot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.ImageTxtHotPot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.ImageTxtHotPot build() {
        com.nibiru.creator.data.HotPotData.ImageTxtHotPot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.ImageTxtHotPot buildPartial() {
        com.nibiru.creator.data.HotPotData.ImageTxtHotPot result = new com.nibiru.creator.data.HotPotData.ImageTxtHotPot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mImagePath_ = mImagePath_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mTxt_ = mTxt_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mImageType_ = mImageType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mImageTxtMode_ = mImageTxtMode_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (mFontColorBuilder_ == null) {
          result.mFontColor_ = mFontColor_;
        } else {
          result.mFontColor_ = mFontColorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mCharSize_ = mCharSize_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (mShowRectBuilder_ == null) {
          result.mShowRect_ = mShowRect_;
        } else {
          result.mShowRect_ = mShowRectBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mBolid_ = mBolid_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.mItalic_ = mItalic_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.mUnderline_ = mUnderline_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.mLineDistance_ = mLineDistance_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.mTextFont_ = mTextFont_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.mFileUrl_ = mFileUrl_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.ImageTxtHotPot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.ImageTxtHotPot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.ImageTxtHotPot other) {
        if (other == com.nibiru.creator.data.HotPotData.ImageTxtHotPot.getDefaultInstance()) return this;
        if (other.hasMImagePath()) {
          bitField0_ |= 0x00000001;
          mImagePath_ = other.mImagePath_;
          onChanged();
        }
        if (other.hasMTxt()) {
          bitField0_ |= 0x00000002;
          mTxt_ = other.mTxt_;
          onChanged();
        }
        if (other.hasMImageType()) {
          setMImageType(other.getMImageType());
        }
        if (other.hasMImageTxtMode()) {
          setMImageTxtMode(other.getMImageTxtMode());
        }
        if (other.hasMFontColor()) {
          mergeMFontColor(other.getMFontColor());
        }
        if (other.hasMCharSize()) {
          setMCharSize(other.getMCharSize());
        }
        if (other.hasMShowRect()) {
          mergeMShowRect(other.getMShowRect());
        }
        if (other.hasMBolid()) {
          setMBolid(other.getMBolid());
        }
        if (other.hasMItalic()) {
          setMItalic(other.getMItalic());
        }
        if (other.hasMUnderline()) {
          setMUnderline(other.getMUnderline());
        }
        if (other.hasMLineDistance()) {
          setMLineDistance(other.getMLineDistance());
        }
        if (other.hasMTextFont()) {
          bitField0_ |= 0x00000800;
          mTextFont_ = other.mTextFont_;
          onChanged();
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00001000;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMImagePath()) {
          return false;
        }
        if (!hasMTxt()) {
          return false;
        }
        if (!hasMImageType()) {
          return false;
        }
        if (!hasMImageTxtMode()) {
          return false;
        }
        if (!hasMShowRect()) {
          return false;
        }
        if (!hasMTextFont()) {
          return false;
        }
        if (hasMFontColor()) {
          if (!getMFontColor().isInitialized()) {
            return false;
          }
        }
        if (!getMShowRect().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.ImageTxtHotPot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.ImageTxtHotPot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mImagePath_ = "";
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImagePath = 1;</code>
       */
      public boolean hasMImagePath() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImagePath = 1;</code>
       */
      public java.lang.String getMImagePath() {
        java.lang.Object ref = mImagePath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mImagePath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImagePath = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMImagePathBytes() {
        java.lang.Object ref = mImagePath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mImagePath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImagePath = 1;</code>
       */
      public Builder setMImagePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mImagePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImagePath = 1;</code>
       */
      public Builder clearMImagePath() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mImagePath_ = getDefaultInstance().getMImagePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>required string m_ImagePath = 1;</code>
       */
      public Builder setMImagePathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mImagePath_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mTxt_ = "";
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>required string m_Txt = 2;</code>
       */
      public boolean hasMTxt() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>required string m_Txt = 2;</code>
       */
      public java.lang.String getMTxt() {
        java.lang.Object ref = mTxt_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mTxt_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>required string m_Txt = 2;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMTxtBytes() {
        java.lang.Object ref = mTxt_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mTxt_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>required string m_Txt = 2;</code>
       */
      public Builder setMTxt(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mTxt_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>required string m_Txt = 2;</code>
       */
      public Builder clearMTxt() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mTxt_ = getDefaultInstance().getMTxt();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>required string m_Txt = 2;</code>
       */
      public Builder setMTxtBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mTxt_ = value;
        onChanged();
        return this;
      }

      private int mImageType_ = 0;
      /**
       * <pre>
       *图片类型
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 3;</code>
       */
      public boolean hasMImageType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *图片类型
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageType getMImageType() {
        com.nibiru.creator.data.HotPotData.ImageType result = com.nibiru.creator.data.HotPotData.ImageType.valueOf(mImageType_);
        return result == null ? com.nibiru.creator.data.HotPotData.ImageType.ImageType_2D : result;
      }
      /**
       * <pre>
       *图片类型
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 3;</code>
       */
      public Builder setMImageType(com.nibiru.creator.data.HotPotData.ImageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        mImageType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片类型
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 3;</code>
       */
      public Builder clearMImageType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mImageType_ = 0;
        onChanged();
        return this;
      }

      private int mImageTxtMode_ = 0;
      /**
       * <pre>
       *图片文本排列方式
       * </pre>
       *
       * <code>required .DataFactory.ImageTxtMode m_ImageTxtMode = 4;</code>
       */
      public boolean hasMImageTxtMode() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *图片文本排列方式
       * </pre>
       *
       * <code>required .DataFactory.ImageTxtMode m_ImageTxtMode = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageTxtMode getMImageTxtMode() {
        com.nibiru.creator.data.HotPotData.ImageTxtMode result = com.nibiru.creator.data.HotPotData.ImageTxtMode.valueOf(mImageTxtMode_);
        return result == null ? com.nibiru.creator.data.HotPotData.ImageTxtMode.Horizontal_Mode : result;
      }
      /**
       * <pre>
       *图片文本排列方式
       * </pre>
       *
       * <code>required .DataFactory.ImageTxtMode m_ImageTxtMode = 4;</code>
       */
      public Builder setMImageTxtMode(com.nibiru.creator.data.HotPotData.ImageTxtMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        mImageTxtMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片文本排列方式
       * </pre>
       *
       * <code>required .DataFactory.ImageTxtMode m_ImageTxtMode = 4;</code>
       */
      public Builder clearMImageTxtMode() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mImageTxtMode_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec4 mFontColor_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> mFontColorBuilder_;
      /**
       * <pre>
       *文本
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
       */
      public boolean hasMFontColor() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *文本
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4 getMFontColor() {
        if (mFontColorBuilder_ == null) {
          return mFontColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
        } else {
          return mFontColorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *文本
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
       */
      public Builder setMFontColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mFontColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mFontColor_ = value;
          onChanged();
        } else {
          mFontColorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *文本
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
       */
      public Builder setMFontColor(
          com.nibiru.creator.data.HotPotData.Vec4.Builder builderForValue) {
        if (mFontColorBuilder_ == null) {
          mFontColor_ = builderForValue.build();
          onChanged();
        } else {
          mFontColorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *文本
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
       */
      public Builder mergeMFontColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mFontColorBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              mFontColor_ != null &&
              mFontColor_ != com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance()) {
            mFontColor_ =
              com.nibiru.creator.data.HotPotData.Vec4.newBuilder(mFontColor_).mergeFrom(value).buildPartial();
          } else {
            mFontColor_ = value;
          }
          onChanged();
        } else {
          mFontColorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *文本
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
       */
      public Builder clearMFontColor() {
        if (mFontColorBuilder_ == null) {
          mFontColor_ = null;
          onChanged();
        } else {
          mFontColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       *文本
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4.Builder getMFontColorBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMFontColorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *文本
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFontColorOrBuilder() {
        if (mFontColorBuilder_ != null) {
          return mFontColorBuilder_.getMessageOrBuilder();
        } else {
          return mFontColor_ == null ?
              com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
        }
      }
      /**
       * <pre>
       *文本
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_FontColor = 5;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> 
          getMFontColorFieldBuilder() {
        if (mFontColorBuilder_ == null) {
          mFontColorBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder>(
                  getMFontColor(),
                  getParentForChildren(),
                  isClean());
          mFontColor_ = null;
        }
        return mFontColorBuilder_;
      }

      private float mCharSize_ ;
      /**
       * <pre>
       *文本字体大小
       * </pre>
       *
       * <code>optional float m_CharSize = 6;</code>
       */
      public boolean hasMCharSize() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *文本字体大小
       * </pre>
       *
       * <code>optional float m_CharSize = 6;</code>
       */
      public float getMCharSize() {
        return mCharSize_;
      }
      /**
       * <pre>
       *文本字体大小
       * </pre>
       *
       * <code>optional float m_CharSize = 6;</code>
       */
      public Builder setMCharSize(float value) {
        bitField0_ |= 0x00000020;
        mCharSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *文本字体大小
       * </pre>
       *
       * <code>optional float m_CharSize = 6;</code>
       */
      public Builder clearMCharSize() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mCharSize_ = 0F;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mShowRect_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mShowRectBuilder_;
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
       */
      public boolean hasMShowRect() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMShowRect() {
        if (mShowRectBuilder_ == null) {
          return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
        } else {
          return mShowRectBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
       */
      public Builder setMShowRect(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowRectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mShowRect_ = value;
          onChanged();
        } else {
          mShowRectBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
       */
      public Builder setMShowRect(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mShowRectBuilder_ == null) {
          mShowRect_ = builderForValue.build();
          onChanged();
        } else {
          mShowRectBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
       */
      public Builder mergeMShowRect(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowRectBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              mShowRect_ != null &&
              mShowRect_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mShowRect_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mShowRect_).mergeFrom(value).buildPartial();
          } else {
            mShowRect_ = value;
          }
          onChanged();
        } else {
          mShowRectBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
       */
      public Builder clearMShowRect() {
        if (mShowRectBuilder_ == null) {
          mShowRect_ = null;
          onChanged();
        } else {
          mShowRectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMShowRectBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getMShowRectFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder() {
        if (mShowRectBuilder_ != null) {
          return mShowRectBuilder_.getMessageOrBuilder();
        } else {
          return mShowRect_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
        }
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 7;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMShowRectFieldBuilder() {
        if (mShowRectBuilder_ == null) {
          mShowRectBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMShowRect(),
                  getParentForChildren(),
                  isClean());
          mShowRect_ = null;
        }
        return mShowRectBuilder_;
      }

      private int mBolid_ ;
      /**
       * <pre>
       *加粗
       * </pre>
       *
       * <code>optional int32 m_Bolid = 8;</code>
       */
      public boolean hasMBolid() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       *加粗
       * </pre>
       *
       * <code>optional int32 m_Bolid = 8;</code>
       */
      public int getMBolid() {
        return mBolid_;
      }
      /**
       * <pre>
       *加粗
       * </pre>
       *
       * <code>optional int32 m_Bolid = 8;</code>
       */
      public Builder setMBolid(int value) {
        bitField0_ |= 0x00000080;
        mBolid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *加粗
       * </pre>
       *
       * <code>optional int32 m_Bolid = 8;</code>
       */
      public Builder clearMBolid() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mBolid_ = 0;
        onChanged();
        return this;
      }

      private int mItalic_ ;
      /**
       * <pre>
       *斜体
       * </pre>
       *
       * <code>optional int32 m_Italic = 9;</code>
       */
      public boolean hasMItalic() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       *斜体
       * </pre>
       *
       * <code>optional int32 m_Italic = 9;</code>
       */
      public int getMItalic() {
        return mItalic_;
      }
      /**
       * <pre>
       *斜体
       * </pre>
       *
       * <code>optional int32 m_Italic = 9;</code>
       */
      public Builder setMItalic(int value) {
        bitField0_ |= 0x00000100;
        mItalic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *斜体
       * </pre>
       *
       * <code>optional int32 m_Italic = 9;</code>
       */
      public Builder clearMItalic() {
        bitField0_ = (bitField0_ & ~0x00000100);
        mItalic_ = 0;
        onChanged();
        return this;
      }

      private int mUnderline_ ;
      /**
       * <pre>
       *下划线
       * </pre>
       *
       * <code>optional int32 m_Underline = 10;</code>
       */
      public boolean hasMUnderline() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       *下划线
       * </pre>
       *
       * <code>optional int32 m_Underline = 10;</code>
       */
      public int getMUnderline() {
        return mUnderline_;
      }
      /**
       * <pre>
       *下划线
       * </pre>
       *
       * <code>optional int32 m_Underline = 10;</code>
       */
      public Builder setMUnderline(int value) {
        bitField0_ |= 0x00000200;
        mUnderline_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *下划线
       * </pre>
       *
       * <code>optional int32 m_Underline = 10;</code>
       */
      public Builder clearMUnderline() {
        bitField0_ = (bitField0_ & ~0x00000200);
        mUnderline_ = 0;
        onChanged();
        return this;
      }

      private int mLineDistance_ ;
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>optional int32 m_LineDistance = 11;</code>
       */
      public boolean hasMLineDistance() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>optional int32 m_LineDistance = 11;</code>
       */
      public int getMLineDistance() {
        return mLineDistance_;
      }
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>optional int32 m_LineDistance = 11;</code>
       */
      public Builder setMLineDistance(int value) {
        bitField0_ |= 0x00000400;
        mLineDistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>optional int32 m_LineDistance = 11;</code>
       */
      public Builder clearMLineDistance() {
        bitField0_ = (bitField0_ & ~0x00000400);
        mLineDistance_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mTextFont_ = "";
      /**
       * <pre>
       *文本字体
       * </pre>
       *
       * <code>required string m_textFont = 12;</code>
       */
      public boolean hasMTextFont() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       *文本字体
       * </pre>
       *
       * <code>required string m_textFont = 12;</code>
       */
      public java.lang.String getMTextFont() {
        java.lang.Object ref = mTextFont_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mTextFont_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *文本字体
       * </pre>
       *
       * <code>required string m_textFont = 12;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMTextFontBytes() {
        java.lang.Object ref = mTextFont_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mTextFont_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *文本字体
       * </pre>
       *
       * <code>required string m_textFont = 12;</code>
       */
      public Builder setMTextFont(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        mTextFont_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *文本字体
       * </pre>
       *
       * <code>required string m_textFont = 12;</code>
       */
      public Builder clearMTextFont() {
        bitField0_ = (bitField0_ & ~0x00000800);
        mTextFont_ = getDefaultInstance().getMTextFont();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *文本字体
       * </pre>
       *
       * <code>required string m_textFont = 12;</code>
       */
      public Builder setMTextFontBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        mTextFont_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 13;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 13;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 13;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 13;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 13;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00001000);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 13;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.ImageTxtHotPot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.ImageTxtHotPot)
    private static final com.nibiru.creator.data.HotPotData.ImageTxtHotPot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.ImageTxtHotPot();
    }

    public static com.nibiru.creator.data.HotPotData.ImageTxtHotPot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<ImageTxtHotPot>
        PARSER = new com.nibiru.protobuf.AbstractParser<ImageTxtHotPot>() {
      public ImageTxtHotPot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new ImageTxtHotPot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<ImageTxtHotPot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<ImageTxtHotPot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.ImageTxtHotPot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImageListHotPotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.ImageListHotPot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *图片格式
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 1;</code>
     */
    boolean hasMImageType();
    /**
     * <pre>
     *图片格式
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 1;</code>
     */
    com.nibiru.creator.data.HotPotData.ImageType getMImageType();

    /**
     * <pre>
     *是否自动播放
     * </pre>
     *
     * <code>required int32 m_isAutoPlay = 2;</code>
     */
    boolean hasMIsAutoPlay();
    /**
     * <pre>
     *是否自动播放
     * </pre>
     *
     * <code>required int32 m_isAutoPlay = 2;</code>
     */
    int getMIsAutoPlay();

    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>repeated string m_ImagePaths = 3;</code>
     */
    java.util.List<java.lang.String>
        getMImagePathsList();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>repeated string m_ImagePaths = 3;</code>
     */
    int getMImagePathsCount();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>repeated string m_ImagePaths = 3;</code>
     */
    java.lang.String getMImagePaths(int index);
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>repeated string m_ImagePaths = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMImagePathsBytes(int index);

    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
     */
    boolean hasMShowSize();
    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMShowSize();
    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowSizeOrBuilder();

    /**
     * <pre>
     *图片计数
     * </pre>
     *
     * <code>optional int32 m_ImageSum = 5;</code>
     */
    boolean hasMImageSum();
    /**
     * <pre>
     *图片计数
     * </pre>
     *
     * <code>optional int32 m_ImageSum = 5;</code>
     */
    int getMImageSum();

    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>repeated int32 m_materialId = 6;</code>
     */
    java.util.List<java.lang.Integer> getMMaterialIdList();
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>repeated int32 m_materialId = 6;</code>
     */
    int getMMaterialIdCount();
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>repeated int32 m_materialId = 6;</code>
     */
    int getMMaterialId(int index);

    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>repeated string m_displayName = 7;</code>
     */
    java.util.List<java.lang.String>
        getMDisplayNameList();
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>repeated string m_displayName = 7;</code>
     */
    int getMDisplayNameCount();
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>repeated string m_displayName = 7;</code>
     */
    java.lang.String getMDisplayName(int index);
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>repeated string m_displayName = 7;</code>
     */
    com.nibiru.protobuf.ByteString
        getMDisplayNameBytes(int index);

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>repeated string m_fileUrl = 8;</code>
     */
    java.util.List<java.lang.String>
        getMFileUrlList();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>repeated string m_fileUrl = 8;</code>
     */
    int getMFileUrlCount();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>repeated string m_fileUrl = 8;</code>
     */
    java.lang.String getMFileUrl(int index);
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>repeated string m_fileUrl = 8;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes(int index);
  }
  /**
   * <pre>
   *图集热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.ImageListHotPot}
   */
  public  static final class ImageListHotPot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.ImageListHotPot)
      ImageListHotPotOrBuilder {
    // Use ImageListHotPot.newBuilder() to construct.
    private ImageListHotPot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImageListHotPot() {
      mImageType_ = 0;
      mIsAutoPlay_ = 0;
      mImagePaths_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
      mImageSum_ = 0;
      mMaterialId_ = java.util.Collections.emptyList();
      mDisplayName_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
      mFileUrl_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ImageListHotPot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.ImageType value = com.nibiru.creator.data.HotPotData.ImageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                mImageType_ = rawValue;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mIsAutoPlay_ = input.readInt32();
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                mImagePaths_ = new com.nibiru.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              mImagePaths_.add(bs);
              break;
            }
            case 34: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = mShowSize_.toBuilder();
              }
              mShowSize_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mShowSize_);
                mShowSize_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              mImageSum_ = input.readInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                mMaterialId_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              mMaterialId_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                mMaterialId_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                mMaterialId_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 58: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                mDisplayName_ = new com.nibiru.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000040;
              }
              mDisplayName_.add(bs);
              break;
            }
            case 66: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                mFileUrl_ = new com.nibiru.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000080;
              }
              mFileUrl_.add(bs);
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          mImagePaths_ = mImagePaths_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          mMaterialId_ = java.util.Collections.unmodifiableList(mMaterialId_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          mDisplayName_ = mDisplayName_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          mFileUrl_ = mFileUrl_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageListHotPot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageListHotPot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.ImageListHotPot.class, com.nibiru.creator.data.HotPotData.ImageListHotPot.Builder.class);
    }

    private int bitField0_;
    public static final int M_IMAGETYPE_FIELD_NUMBER = 1;
    private int mImageType_;
    /**
     * <pre>
     *图片格式
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 1;</code>
     */
    public boolean hasMImageType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *图片格式
     * </pre>
     *
     * <code>required .DataFactory.ImageType m_ImageType = 1;</code>
     */
    public com.nibiru.creator.data.HotPotData.ImageType getMImageType() {
      com.nibiru.creator.data.HotPotData.ImageType result = com.nibiru.creator.data.HotPotData.ImageType.valueOf(mImageType_);
      return result == null ? com.nibiru.creator.data.HotPotData.ImageType.ImageType_2D : result;
    }

    public static final int M_ISAUTOPLAY_FIELD_NUMBER = 2;
    private int mIsAutoPlay_;
    /**
     * <pre>
     *是否自动播放
     * </pre>
     *
     * <code>required int32 m_isAutoPlay = 2;</code>
     */
    public boolean hasMIsAutoPlay() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *是否自动播放
     * </pre>
     *
     * <code>required int32 m_isAutoPlay = 2;</code>
     */
    public int getMIsAutoPlay() {
      return mIsAutoPlay_;
    }

    public static final int M_IMAGEPATHS_FIELD_NUMBER = 3;
    private com.nibiru.protobuf.LazyStringList mImagePaths_;
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>repeated string m_ImagePaths = 3;</code>
     */
    public com.nibiru.protobuf.ProtocolStringList
        getMImagePathsList() {
      return mImagePaths_;
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>repeated string m_ImagePaths = 3;</code>
     */
    public int getMImagePathsCount() {
      return mImagePaths_.size();
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>repeated string m_ImagePaths = 3;</code>
     */
    public java.lang.String getMImagePaths(int index) {
      return mImagePaths_.get(index);
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>repeated string m_ImagePaths = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMImagePathsBytes(int index) {
      return mImagePaths_.getByteString(index);
    }

    public static final int M_SHOWSIZE_FIELD_NUMBER = 4;
    private com.nibiru.creator.data.HotPotData.Vec2 mShowSize_;
    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
     */
    public boolean hasMShowSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMShowSize() {
      return mShowSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowSize_;
    }
    /**
     * <pre>
     *显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowSizeOrBuilder() {
      return mShowSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowSize_;
    }

    public static final int M_IMAGESUM_FIELD_NUMBER = 5;
    private int mImageSum_;
    /**
     * <pre>
     *图片计数
     * </pre>
     *
     * <code>optional int32 m_ImageSum = 5;</code>
     */
    public boolean hasMImageSum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *图片计数
     * </pre>
     *
     * <code>optional int32 m_ImageSum = 5;</code>
     */
    public int getMImageSum() {
      return mImageSum_;
    }

    public static final int M_MATERIALID_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> mMaterialId_;
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>repeated int32 m_materialId = 6;</code>
     */
    public java.util.List<java.lang.Integer>
        getMMaterialIdList() {
      return mMaterialId_;
    }
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>repeated int32 m_materialId = 6;</code>
     */
    public int getMMaterialIdCount() {
      return mMaterialId_.size();
    }
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>repeated int32 m_materialId = 6;</code>
     */
    public int getMMaterialId(int index) {
      return mMaterialId_.get(index);
    }

    public static final int M_DISPLAYNAME_FIELD_NUMBER = 7;
    private com.nibiru.protobuf.LazyStringList mDisplayName_;
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>repeated string m_displayName = 7;</code>
     */
    public com.nibiru.protobuf.ProtocolStringList
        getMDisplayNameList() {
      return mDisplayName_;
    }
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>repeated string m_displayName = 7;</code>
     */
    public int getMDisplayNameCount() {
      return mDisplayName_.size();
    }
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>repeated string m_displayName = 7;</code>
     */
    public java.lang.String getMDisplayName(int index) {
      return mDisplayName_.get(index);
    }
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>repeated string m_displayName = 7;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMDisplayNameBytes(int index) {
      return mDisplayName_.getByteString(index);
    }

    public static final int M_FILEURL_FIELD_NUMBER = 8;
    private com.nibiru.protobuf.LazyStringList mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>repeated string m_fileUrl = 8;</code>
     */
    public com.nibiru.protobuf.ProtocolStringList
        getMFileUrlList() {
      return mFileUrl_;
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>repeated string m_fileUrl = 8;</code>
     */
    public int getMFileUrlCount() {
      return mFileUrl_.size();
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>repeated string m_fileUrl = 8;</code>
     */
    public java.lang.String getMFileUrl(int index) {
      return mFileUrl_.get(index);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>repeated string m_fileUrl = 8;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes(int index) {
      return mFileUrl_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMImageType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMIsAutoPlay()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMShowSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMShowSize().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, mImageType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mIsAutoPlay_);
      }
      for (int i = 0; i < mImagePaths_.size(); i++) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mImagePaths_.getRaw(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, getMShowSize());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, mImageSum_);
      }
      for (int i = 0; i < mMaterialId_.size(); i++) {
        output.writeInt32(6, mMaterialId_.get(i));
      }
      for (int i = 0; i < mDisplayName_.size(); i++) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 7, mDisplayName_.getRaw(i));
      }
      for (int i = 0; i < mFileUrl_.size(); i++) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 8, mFileUrl_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(1, mImageType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(2, mIsAutoPlay_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mImagePaths_.size(); i++) {
          dataSize += computeStringSizeNoTag(mImagePaths_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getMImagePathsList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(4, getMShowSize());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(5, mImageSum_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mMaterialId_.size(); i++) {
          dataSize += com.nibiru.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mMaterialId_.get(i));
        }
        size += dataSize;
        size += 1 * getMMaterialIdList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mDisplayName_.size(); i++) {
          dataSize += computeStringSizeNoTag(mDisplayName_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getMDisplayNameList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mFileUrl_.size(); i++) {
          dataSize += computeStringSizeNoTag(mFileUrl_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getMFileUrlList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.ImageListHotPot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.ImageListHotPot other = (com.nibiru.creator.data.HotPotData.ImageListHotPot) obj;

      boolean result = true;
      result = result && (hasMImageType() == other.hasMImageType());
      if (hasMImageType()) {
        result = result && mImageType_ == other.mImageType_;
      }
      result = result && (hasMIsAutoPlay() == other.hasMIsAutoPlay());
      if (hasMIsAutoPlay()) {
        result = result && (getMIsAutoPlay()
            == other.getMIsAutoPlay());
      }
      result = result && getMImagePathsList()
          .equals(other.getMImagePathsList());
      result = result && (hasMShowSize() == other.hasMShowSize());
      if (hasMShowSize()) {
        result = result && getMShowSize()
            .equals(other.getMShowSize());
      }
      result = result && (hasMImageSum() == other.hasMImageSum());
      if (hasMImageSum()) {
        result = result && (getMImageSum()
            == other.getMImageSum());
      }
      result = result && getMMaterialIdList()
          .equals(other.getMMaterialIdList());
      result = result && getMDisplayNameList()
          .equals(other.getMDisplayNameList());
      result = result && getMFileUrlList()
          .equals(other.getMFileUrlList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMImageType()) {
        hash = (37 * hash) + M_IMAGETYPE_FIELD_NUMBER;
        hash = (53 * hash) + mImageType_;
      }
      if (hasMIsAutoPlay()) {
        hash = (37 * hash) + M_ISAUTOPLAY_FIELD_NUMBER;
        hash = (53 * hash) + getMIsAutoPlay();
      }
      if (getMImagePathsCount() > 0) {
        hash = (37 * hash) + M_IMAGEPATHS_FIELD_NUMBER;
        hash = (53 * hash) + getMImagePathsList().hashCode();
      }
      if (hasMShowSize()) {
        hash = (37 * hash) + M_SHOWSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMShowSize().hashCode();
      }
      if (hasMImageSum()) {
        hash = (37 * hash) + M_IMAGESUM_FIELD_NUMBER;
        hash = (53 * hash) + getMImageSum();
      }
      if (getMMaterialIdCount() > 0) {
        hash = (37 * hash) + M_MATERIALID_FIELD_NUMBER;
        hash = (53 * hash) + getMMaterialIdList().hashCode();
      }
      if (getMDisplayNameCount() > 0) {
        hash = (37 * hash) + M_DISPLAYNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMDisplayNameList().hashCode();
      }
      if (getMFileUrlCount() > 0) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrlList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.ImageListHotPot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ImageListHotPot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageListHotPot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ImageListHotPot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageListHotPot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ImageListHotPot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageListHotPot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ImageListHotPot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ImageListHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ImageListHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.ImageListHotPot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *图集热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.ImageListHotPot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.ImageListHotPot)
        com.nibiru.creator.data.HotPotData.ImageListHotPotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageListHotPot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageListHotPot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.ImageListHotPot.class, com.nibiru.creator.data.HotPotData.ImageListHotPot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.ImageListHotPot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMShowSizeFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mImageType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        mIsAutoPlay_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mImagePaths_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (mShowSizeBuilder_ == null) {
          mShowSize_ = null;
        } else {
          mShowSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        mImageSum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mMaterialId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        mDisplayName_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        mFileUrl_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ImageListHotPot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.ImageListHotPot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.ImageListHotPot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.ImageListHotPot build() {
        com.nibiru.creator.data.HotPotData.ImageListHotPot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.ImageListHotPot buildPartial() {
        com.nibiru.creator.data.HotPotData.ImageListHotPot result = new com.nibiru.creator.data.HotPotData.ImageListHotPot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mImageType_ = mImageType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mIsAutoPlay_ = mIsAutoPlay_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          mImagePaths_ = mImagePaths_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.mImagePaths_ = mImagePaths_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (mShowSizeBuilder_ == null) {
          result.mShowSize_ = mShowSize_;
        } else {
          result.mShowSize_ = mShowSizeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mImageSum_ = mImageSum_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          mMaterialId_ = java.util.Collections.unmodifiableList(mMaterialId_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.mMaterialId_ = mMaterialId_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          mDisplayName_ = mDisplayName_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.mDisplayName_ = mDisplayName_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          mFileUrl_ = mFileUrl_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.mFileUrl_ = mFileUrl_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.ImageListHotPot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.ImageListHotPot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.ImageListHotPot other) {
        if (other == com.nibiru.creator.data.HotPotData.ImageListHotPot.getDefaultInstance()) return this;
        if (other.hasMImageType()) {
          setMImageType(other.getMImageType());
        }
        if (other.hasMIsAutoPlay()) {
          setMIsAutoPlay(other.getMIsAutoPlay());
        }
        if (!other.mImagePaths_.isEmpty()) {
          if (mImagePaths_.isEmpty()) {
            mImagePaths_ = other.mImagePaths_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureMImagePathsIsMutable();
            mImagePaths_.addAll(other.mImagePaths_);
          }
          onChanged();
        }
        if (other.hasMShowSize()) {
          mergeMShowSize(other.getMShowSize());
        }
        if (other.hasMImageSum()) {
          setMImageSum(other.getMImageSum());
        }
        if (!other.mMaterialId_.isEmpty()) {
          if (mMaterialId_.isEmpty()) {
            mMaterialId_ = other.mMaterialId_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureMMaterialIdIsMutable();
            mMaterialId_.addAll(other.mMaterialId_);
          }
          onChanged();
        }
        if (!other.mDisplayName_.isEmpty()) {
          if (mDisplayName_.isEmpty()) {
            mDisplayName_ = other.mDisplayName_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureMDisplayNameIsMutable();
            mDisplayName_.addAll(other.mDisplayName_);
          }
          onChanged();
        }
        if (!other.mFileUrl_.isEmpty()) {
          if (mFileUrl_.isEmpty()) {
            mFileUrl_ = other.mFileUrl_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureMFileUrlIsMutable();
            mFileUrl_.addAll(other.mFileUrl_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMImageType()) {
          return false;
        }
        if (!hasMIsAutoPlay()) {
          return false;
        }
        if (!hasMShowSize()) {
          return false;
        }
        if (!getMShowSize().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.ImageListHotPot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.ImageListHotPot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int mImageType_ = 0;
      /**
       * <pre>
       *图片格式
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 1;</code>
       */
      public boolean hasMImageType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *图片格式
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 1;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageType getMImageType() {
        com.nibiru.creator.data.HotPotData.ImageType result = com.nibiru.creator.data.HotPotData.ImageType.valueOf(mImageType_);
        return result == null ? com.nibiru.creator.data.HotPotData.ImageType.ImageType_2D : result;
      }
      /**
       * <pre>
       *图片格式
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 1;</code>
       */
      public Builder setMImageType(com.nibiru.creator.data.HotPotData.ImageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        mImageType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片格式
       * </pre>
       *
       * <code>required .DataFactory.ImageType m_ImageType = 1;</code>
       */
      public Builder clearMImageType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mImageType_ = 0;
        onChanged();
        return this;
      }

      private int mIsAutoPlay_ ;
      /**
       * <pre>
       *是否自动播放
       * </pre>
       *
       * <code>required int32 m_isAutoPlay = 2;</code>
       */
      public boolean hasMIsAutoPlay() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *是否自动播放
       * </pre>
       *
       * <code>required int32 m_isAutoPlay = 2;</code>
       */
      public int getMIsAutoPlay() {
        return mIsAutoPlay_;
      }
      /**
       * <pre>
       *是否自动播放
       * </pre>
       *
       * <code>required int32 m_isAutoPlay = 2;</code>
       */
      public Builder setMIsAutoPlay(int value) {
        bitField0_ |= 0x00000002;
        mIsAutoPlay_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *是否自动播放
       * </pre>
       *
       * <code>required int32 m_isAutoPlay = 2;</code>
       */
      public Builder clearMIsAutoPlay() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mIsAutoPlay_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.protobuf.LazyStringList mImagePaths_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
      private void ensureMImagePathsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          mImagePaths_ = new com.nibiru.protobuf.LazyStringArrayList(mImagePaths_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>repeated string m_ImagePaths = 3;</code>
       */
      public com.nibiru.protobuf.ProtocolStringList
          getMImagePathsList() {
        return mImagePaths_.getUnmodifiableView();
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>repeated string m_ImagePaths = 3;</code>
       */
      public int getMImagePathsCount() {
        return mImagePaths_.size();
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>repeated string m_ImagePaths = 3;</code>
       */
      public java.lang.String getMImagePaths(int index) {
        return mImagePaths_.get(index);
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>repeated string m_ImagePaths = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMImagePathsBytes(int index) {
        return mImagePaths_.getByteString(index);
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>repeated string m_ImagePaths = 3;</code>
       */
      public Builder setMImagePaths(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMImagePathsIsMutable();
        mImagePaths_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>repeated string m_ImagePaths = 3;</code>
       */
      public Builder addMImagePaths(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMImagePathsIsMutable();
        mImagePaths_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>repeated string m_ImagePaths = 3;</code>
       */
      public Builder addAllMImagePaths(
          java.lang.Iterable<java.lang.String> values) {
        ensureMImagePathsIsMutable();
        com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
            values, mImagePaths_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>repeated string m_ImagePaths = 3;</code>
       */
      public Builder clearMImagePaths() {
        mImagePaths_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>repeated string m_ImagePaths = 3;</code>
       */
      public Builder addMImagePathsBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMImagePathsIsMutable();
        mImagePaths_.add(value);
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mShowSize_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mShowSizeBuilder_;
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
       */
      public boolean hasMShowSize() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMShowSize() {
        if (mShowSizeBuilder_ == null) {
          return mShowSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowSize_;
        } else {
          return mShowSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
       */
      public Builder setMShowSize(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mShowSize_ = value;
          onChanged();
        } else {
          mShowSizeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
       */
      public Builder setMShowSize(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mShowSizeBuilder_ == null) {
          mShowSize_ = builderForValue.build();
          onChanged();
        } else {
          mShowSizeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
       */
      public Builder mergeMShowSize(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowSizeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              mShowSize_ != null &&
              mShowSize_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mShowSize_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mShowSize_).mergeFrom(value).buildPartial();
          } else {
            mShowSize_ = value;
          }
          onChanged();
        } else {
          mShowSizeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
       */
      public Builder clearMShowSize() {
        if (mShowSizeBuilder_ == null) {
          mShowSize_ = null;
          onChanged();
        } else {
          mShowSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMShowSizeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getMShowSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowSizeOrBuilder() {
        if (mShowSizeBuilder_ != null) {
          return mShowSizeBuilder_.getMessageOrBuilder();
        } else {
          return mShowSize_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowSize_;
        }
      }
      /**
       * <pre>
       *显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowSize = 4;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMShowSizeFieldBuilder() {
        if (mShowSizeBuilder_ == null) {
          mShowSizeBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMShowSize(),
                  getParentForChildren(),
                  isClean());
          mShowSize_ = null;
        }
        return mShowSizeBuilder_;
      }

      private int mImageSum_ ;
      /**
       * <pre>
       *图片计数
       * </pre>
       *
       * <code>optional int32 m_ImageSum = 5;</code>
       */
      public boolean hasMImageSum() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *图片计数
       * </pre>
       *
       * <code>optional int32 m_ImageSum = 5;</code>
       */
      public int getMImageSum() {
        return mImageSum_;
      }
      /**
       * <pre>
       *图片计数
       * </pre>
       *
       * <code>optional int32 m_ImageSum = 5;</code>
       */
      public Builder setMImageSum(int value) {
        bitField0_ |= 0x00000010;
        mImageSum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片计数
       * </pre>
       *
       * <code>optional int32 m_ImageSum = 5;</code>
       */
      public Builder clearMImageSum() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mImageSum_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> mMaterialId_ = java.util.Collections.emptyList();
      private void ensureMMaterialIdIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          mMaterialId_ = new java.util.ArrayList<java.lang.Integer>(mMaterialId_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>repeated int32 m_materialId = 6;</code>
       */
      public java.util.List<java.lang.Integer>
          getMMaterialIdList() {
        return java.util.Collections.unmodifiableList(mMaterialId_);
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>repeated int32 m_materialId = 6;</code>
       */
      public int getMMaterialIdCount() {
        return mMaterialId_.size();
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>repeated int32 m_materialId = 6;</code>
       */
      public int getMMaterialId(int index) {
        return mMaterialId_.get(index);
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>repeated int32 m_materialId = 6;</code>
       */
      public Builder setMMaterialId(
          int index, int value) {
        ensureMMaterialIdIsMutable();
        mMaterialId_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>repeated int32 m_materialId = 6;</code>
       */
      public Builder addMMaterialId(int value) {
        ensureMMaterialIdIsMutable();
        mMaterialId_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>repeated int32 m_materialId = 6;</code>
       */
      public Builder addAllMMaterialId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMMaterialIdIsMutable();
        com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
            values, mMaterialId_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>repeated int32 m_materialId = 6;</code>
       */
      public Builder clearMMaterialId() {
        mMaterialId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private com.nibiru.protobuf.LazyStringList mDisplayName_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
      private void ensureMDisplayNameIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          mDisplayName_ = new com.nibiru.protobuf.LazyStringArrayList(mDisplayName_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>repeated string m_displayName = 7;</code>
       */
      public com.nibiru.protobuf.ProtocolStringList
          getMDisplayNameList() {
        return mDisplayName_.getUnmodifiableView();
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>repeated string m_displayName = 7;</code>
       */
      public int getMDisplayNameCount() {
        return mDisplayName_.size();
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>repeated string m_displayName = 7;</code>
       */
      public java.lang.String getMDisplayName(int index) {
        return mDisplayName_.get(index);
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>repeated string m_displayName = 7;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMDisplayNameBytes(int index) {
        return mDisplayName_.getByteString(index);
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>repeated string m_displayName = 7;</code>
       */
      public Builder setMDisplayName(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMDisplayNameIsMutable();
        mDisplayName_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>repeated string m_displayName = 7;</code>
       */
      public Builder addMDisplayName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMDisplayNameIsMutable();
        mDisplayName_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>repeated string m_displayName = 7;</code>
       */
      public Builder addAllMDisplayName(
          java.lang.Iterable<java.lang.String> values) {
        ensureMDisplayNameIsMutable();
        com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
            values, mDisplayName_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>repeated string m_displayName = 7;</code>
       */
      public Builder clearMDisplayName() {
        mDisplayName_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>repeated string m_displayName = 7;</code>
       */
      public Builder addMDisplayNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMDisplayNameIsMutable();
        mDisplayName_.add(value);
        onChanged();
        return this;
      }

      private com.nibiru.protobuf.LazyStringList mFileUrl_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
      private void ensureMFileUrlIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          mFileUrl_ = new com.nibiru.protobuf.LazyStringArrayList(mFileUrl_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>repeated string m_fileUrl = 8;</code>
       */
      public com.nibiru.protobuf.ProtocolStringList
          getMFileUrlList() {
        return mFileUrl_.getUnmodifiableView();
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>repeated string m_fileUrl = 8;</code>
       */
      public int getMFileUrlCount() {
        return mFileUrl_.size();
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>repeated string m_fileUrl = 8;</code>
       */
      public java.lang.String getMFileUrl(int index) {
        return mFileUrl_.get(index);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>repeated string m_fileUrl = 8;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes(int index) {
        return mFileUrl_.getByteString(index);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>repeated string m_fileUrl = 8;</code>
       */
      public Builder setMFileUrl(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMFileUrlIsMutable();
        mFileUrl_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>repeated string m_fileUrl = 8;</code>
       */
      public Builder addMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMFileUrlIsMutable();
        mFileUrl_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>repeated string m_fileUrl = 8;</code>
       */
      public Builder addAllMFileUrl(
          java.lang.Iterable<java.lang.String> values) {
        ensureMFileUrlIsMutable();
        com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
            values, mFileUrl_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>repeated string m_fileUrl = 8;</code>
       */
      public Builder clearMFileUrl() {
        mFileUrl_ = com.nibiru.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>repeated string m_fileUrl = 8;</code>
       */
      public Builder addMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureMFileUrlIsMutable();
        mFileUrl_.add(value);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.ImageListHotPot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.ImageListHotPot)
    private static final com.nibiru.creator.data.HotPotData.ImageListHotPot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.ImageListHotPot();
    }

    public static com.nibiru.creator.data.HotPotData.ImageListHotPot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<ImageListHotPot>
        PARSER = new com.nibiru.protobuf.AbstractParser<ImageListHotPot>() {
      public ImageListHotPot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new ImageListHotPot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<ImageListHotPot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<ImageListHotPot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.ImageListHotPot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ModelHotPotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.ModelHotPot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *模型路径
     * </pre>
     *
     * <code>required string m_ModelPath = 1;</code>
     */
    boolean hasMModelPath();
    /**
     * <pre>
     *模型路径
     * </pre>
     *
     * <code>required string m_ModelPath = 1;</code>
     */
    java.lang.String getMModelPath();
    /**
     * <pre>
     *模型路径
     * </pre>
     *
     * <code>required string m_ModelPath = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMModelPathBytes();

    /**
     * <pre>
     *窗口显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
     */
    boolean hasMShowRect();
    /**
     * <pre>
     *窗口显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMShowRect();
    /**
     * <pre>
     *窗口显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder();

    /**
     * <pre>
     *模型缩放比例
     * </pre>
     *
     * <code>required float m_scaleSize = 3;</code>
     */
    boolean hasMScaleSize();
    /**
     * <pre>
     *模型缩放比例
     * </pre>
     *
     * <code>required float m_scaleSize = 3;</code>
     */
    float getMScaleSize();

    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>required .DataFactory.Vec3 m_translate = 4;</code>
     */
    boolean hasMTranslate();
    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>required .DataFactory.Vec3 m_translate = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec3 getMTranslate();
    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>required .DataFactory.Vec3 m_translate = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec3OrBuilder getMTranslateOrBuilder();

    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
     */
    boolean hasMRotation();
    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.Quaternion getMRotation();
    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.QuaternionOrBuilder getMRotationOrBuilder();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();
  }
  /**
   * <pre>
   *模型热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.ModelHotPot}
   */
  public  static final class ModelHotPot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.ModelHotPot)
      ModelHotPotOrBuilder {
    // Use ModelHotPot.newBuilder() to construct.
    private ModelHotPot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ModelHotPot() {
      mModelPath_ = "";
      mScaleSize_ = 0F;
      mFileUrl_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ModelHotPot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mModelPath_ = bs;
              break;
            }
            case 18: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mShowRect_.toBuilder();
              }
              mShowRect_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mShowRect_);
                mShowRect_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              mScaleSize_ = input.readFloat();
              break;
            }
            case 34: {
              com.nibiru.creator.data.HotPotData.Vec3.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = mTranslate_.toBuilder();
              }
              mTranslate_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec3.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mTranslate_);
                mTranslate_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              com.nibiru.creator.data.HotPotData.Quaternion.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = mRotation_.toBuilder();
              }
              mRotation_ = input.readMessage(com.nibiru.creator.data.HotPotData.Quaternion.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mRotation_);
                mRotation_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              mFileUrl_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ModelHotPot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ModelHotPot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.ModelHotPot.class, com.nibiru.creator.data.HotPotData.ModelHotPot.Builder.class);
    }

    private int bitField0_;
    public static final int M_MODELPATH_FIELD_NUMBER = 1;
    private volatile java.lang.Object mModelPath_;
    /**
     * <pre>
     *模型路径
     * </pre>
     *
     * <code>required string m_ModelPath = 1;</code>
     */
    public boolean hasMModelPath() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *模型路径
     * </pre>
     *
     * <code>required string m_ModelPath = 1;</code>
     */
    public java.lang.String getMModelPath() {
      java.lang.Object ref = mModelPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mModelPath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *模型路径
     * </pre>
     *
     * <code>required string m_ModelPath = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMModelPathBytes() {
      java.lang.Object ref = mModelPath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mModelPath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_SHOWRECT_FIELD_NUMBER = 2;
    private com.nibiru.creator.data.HotPotData.Vec2 mShowRect_;
    /**
     * <pre>
     *窗口显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
     */
    public boolean hasMShowRect() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *窗口显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMShowRect() {
      return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
    }
    /**
     * <pre>
     *窗口显示大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder() {
      return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
    }

    public static final int M_SCALESIZE_FIELD_NUMBER = 3;
    private float mScaleSize_;
    /**
     * <pre>
     *模型缩放比例
     * </pre>
     *
     * <code>required float m_scaleSize = 3;</code>
     */
    public boolean hasMScaleSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *模型缩放比例
     * </pre>
     *
     * <code>required float m_scaleSize = 3;</code>
     */
    public float getMScaleSize() {
      return mScaleSize_;
    }

    public static final int M_TRANSLATE_FIELD_NUMBER = 4;
    private com.nibiru.creator.data.HotPotData.Vec3 mTranslate_;
    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>required .DataFactory.Vec3 m_translate = 4;</code>
     */
    public boolean hasMTranslate() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>required .DataFactory.Vec3 m_translate = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec3 getMTranslate() {
      return mTranslate_ == null ? com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslate_;
    }
    /**
     * <pre>
     *模型位移向量
     * </pre>
     *
     * <code>required .DataFactory.Vec3 m_translate = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec3OrBuilder getMTranslateOrBuilder() {
      return mTranslate_ == null ? com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslate_;
    }

    public static final int M_ROTATION_FIELD_NUMBER = 5;
    private com.nibiru.creator.data.HotPotData.Quaternion mRotation_;
    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
     */
    public boolean hasMRotation() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.Quaternion getMRotation() {
      return mRotation_ == null ? com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance() : mRotation_;
    }
    /**
     * <pre>
     *模型旋转四元数
     * </pre>
     *
     * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.QuaternionOrBuilder getMRotationOrBuilder() {
      return mRotation_ == null ? com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance() : mRotation_;
    }

    public static final int M_FILEURL_FIELD_NUMBER = 6;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMModelPath()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMShowRect()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMScaleSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMTranslate()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMRotation()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMShowRect().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMTranslate().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMRotation().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mModelPath_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getMShowRect());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, mScaleSize_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, getMTranslate());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getMRotation());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 6, mFileUrl_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mModelPath_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(2, getMShowRect());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(3, mScaleSize_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(4, getMTranslate());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(5, getMRotation());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(6, mFileUrl_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.ModelHotPot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.ModelHotPot other = (com.nibiru.creator.data.HotPotData.ModelHotPot) obj;

      boolean result = true;
      result = result && (hasMModelPath() == other.hasMModelPath());
      if (hasMModelPath()) {
        result = result && getMModelPath()
            .equals(other.getMModelPath());
      }
      result = result && (hasMShowRect() == other.hasMShowRect());
      if (hasMShowRect()) {
        result = result && getMShowRect()
            .equals(other.getMShowRect());
      }
      result = result && (hasMScaleSize() == other.hasMScaleSize());
      if (hasMScaleSize()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMScaleSize())
            == java.lang.Float.floatToIntBits(
                other.getMScaleSize()));
      }
      result = result && (hasMTranslate() == other.hasMTranslate());
      if (hasMTranslate()) {
        result = result && getMTranslate()
            .equals(other.getMTranslate());
      }
      result = result && (hasMRotation() == other.hasMRotation());
      if (hasMRotation()) {
        result = result && getMRotation()
            .equals(other.getMRotation());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMModelPath()) {
        hash = (37 * hash) + M_MODELPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMModelPath().hashCode();
      }
      if (hasMShowRect()) {
        hash = (37 * hash) + M_SHOWRECT_FIELD_NUMBER;
        hash = (53 * hash) + getMShowRect().hashCode();
      }
      if (hasMScaleSize()) {
        hash = (37 * hash) + M_SCALESIZE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMScaleSize());
      }
      if (hasMTranslate()) {
        hash = (37 * hash) + M_TRANSLATE_FIELD_NUMBER;
        hash = (53 * hash) + getMTranslate().hashCode();
      }
      if (hasMRotation()) {
        hash = (37 * hash) + M_ROTATION_FIELD_NUMBER;
        hash = (53 * hash) + getMRotation().hashCode();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.ModelHotPot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ModelHotPot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ModelHotPot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ModelHotPot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ModelHotPot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ModelHotPot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ModelHotPot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ModelHotPot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ModelHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ModelHotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.ModelHotPot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *模型热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.ModelHotPot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.ModelHotPot)
        com.nibiru.creator.data.HotPotData.ModelHotPotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ModelHotPot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ModelHotPot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.ModelHotPot.class, com.nibiru.creator.data.HotPotData.ModelHotPot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.ModelHotPot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMShowRectFieldBuilder();
          getMTranslateFieldBuilder();
          getMRotationFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mModelPath_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (mShowRectBuilder_ == null) {
          mShowRect_ = null;
        } else {
          mShowRectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        mScaleSize_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (mTranslateBuilder_ == null) {
          mTranslate_ = null;
        } else {
          mTranslateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (mRotationBuilder_ == null) {
          mRotation_ = null;
        } else {
          mRotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ModelHotPot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.ModelHotPot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.ModelHotPot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.ModelHotPot build() {
        com.nibiru.creator.data.HotPotData.ModelHotPot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.ModelHotPot buildPartial() {
        com.nibiru.creator.data.HotPotData.ModelHotPot result = new com.nibiru.creator.data.HotPotData.ModelHotPot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mModelPath_ = mModelPath_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (mShowRectBuilder_ == null) {
          result.mShowRect_ = mShowRect_;
        } else {
          result.mShowRect_ = mShowRectBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mScaleSize_ = mScaleSize_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (mTranslateBuilder_ == null) {
          result.mTranslate_ = mTranslate_;
        } else {
          result.mTranslate_ = mTranslateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (mRotationBuilder_ == null) {
          result.mRotation_ = mRotation_;
        } else {
          result.mRotation_ = mRotationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mFileUrl_ = mFileUrl_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.ModelHotPot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.ModelHotPot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.ModelHotPot other) {
        if (other == com.nibiru.creator.data.HotPotData.ModelHotPot.getDefaultInstance()) return this;
        if (other.hasMModelPath()) {
          bitField0_ |= 0x00000001;
          mModelPath_ = other.mModelPath_;
          onChanged();
        }
        if (other.hasMShowRect()) {
          mergeMShowRect(other.getMShowRect());
        }
        if (other.hasMScaleSize()) {
          setMScaleSize(other.getMScaleSize());
        }
        if (other.hasMTranslate()) {
          mergeMTranslate(other.getMTranslate());
        }
        if (other.hasMRotation()) {
          mergeMRotation(other.getMRotation());
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00000020;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMModelPath()) {
          return false;
        }
        if (!hasMShowRect()) {
          return false;
        }
        if (!hasMScaleSize()) {
          return false;
        }
        if (!hasMTranslate()) {
          return false;
        }
        if (!hasMRotation()) {
          return false;
        }
        if (!getMShowRect().isInitialized()) {
          return false;
        }
        if (!getMTranslate().isInitialized()) {
          return false;
        }
        if (!getMRotation().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.ModelHotPot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.ModelHotPot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mModelPath_ = "";
      /**
       * <pre>
       *模型路径
       * </pre>
       *
       * <code>required string m_ModelPath = 1;</code>
       */
      public boolean hasMModelPath() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *模型路径
       * </pre>
       *
       * <code>required string m_ModelPath = 1;</code>
       */
      public java.lang.String getMModelPath() {
        java.lang.Object ref = mModelPath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mModelPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *模型路径
       * </pre>
       *
       * <code>required string m_ModelPath = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMModelPathBytes() {
        java.lang.Object ref = mModelPath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mModelPath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *模型路径
       * </pre>
       *
       * <code>required string m_ModelPath = 1;</code>
       */
      public Builder setMModelPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mModelPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *模型路径
       * </pre>
       *
       * <code>required string m_ModelPath = 1;</code>
       */
      public Builder clearMModelPath() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mModelPath_ = getDefaultInstance().getMModelPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *模型路径
       * </pre>
       *
       * <code>required string m_ModelPath = 1;</code>
       */
      public Builder setMModelPathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mModelPath_ = value;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mShowRect_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mShowRectBuilder_;
      /**
       * <pre>
       *窗口显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
       */
      public boolean hasMShowRect() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *窗口显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMShowRect() {
        if (mShowRectBuilder_ == null) {
          return mShowRect_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
        } else {
          return mShowRectBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *窗口显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
       */
      public Builder setMShowRect(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowRectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mShowRect_ = value;
          onChanged();
        } else {
          mShowRectBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *窗口显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
       */
      public Builder setMShowRect(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mShowRectBuilder_ == null) {
          mShowRect_ = builderForValue.build();
          onChanged();
        } else {
          mShowRectBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *窗口显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
       */
      public Builder mergeMShowRect(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mShowRectBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              mShowRect_ != null &&
              mShowRect_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mShowRect_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mShowRect_).mergeFrom(value).buildPartial();
          } else {
            mShowRect_ = value;
          }
          onChanged();
        } else {
          mShowRectBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *窗口显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
       */
      public Builder clearMShowRect() {
        if (mShowRectBuilder_ == null) {
          mShowRect_ = null;
          onChanged();
        } else {
          mShowRectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       *窗口显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMShowRectBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMShowRectFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *窗口显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMShowRectOrBuilder() {
        if (mShowRectBuilder_ != null) {
          return mShowRectBuilder_.getMessageOrBuilder();
        } else {
          return mShowRect_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mShowRect_;
        }
      }
      /**
       * <pre>
       *窗口显示大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ShowRect = 2;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMShowRectFieldBuilder() {
        if (mShowRectBuilder_ == null) {
          mShowRectBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMShowRect(),
                  getParentForChildren(),
                  isClean());
          mShowRect_ = null;
        }
        return mShowRectBuilder_;
      }

      private float mScaleSize_ ;
      /**
       * <pre>
       *模型缩放比例
       * </pre>
       *
       * <code>required float m_scaleSize = 3;</code>
       */
      public boolean hasMScaleSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *模型缩放比例
       * </pre>
       *
       * <code>required float m_scaleSize = 3;</code>
       */
      public float getMScaleSize() {
        return mScaleSize_;
      }
      /**
       * <pre>
       *模型缩放比例
       * </pre>
       *
       * <code>required float m_scaleSize = 3;</code>
       */
      public Builder setMScaleSize(float value) {
        bitField0_ |= 0x00000004;
        mScaleSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *模型缩放比例
       * </pre>
       *
       * <code>required float m_scaleSize = 3;</code>
       */
      public Builder clearMScaleSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mScaleSize_ = 0F;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec3 mTranslate_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec3, com.nibiru.creator.data.HotPotData.Vec3.Builder, com.nibiru.creator.data.HotPotData.Vec3OrBuilder> mTranslateBuilder_;
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>required .DataFactory.Vec3 m_translate = 4;</code>
       */
      public boolean hasMTranslate() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>required .DataFactory.Vec3 m_translate = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec3 getMTranslate() {
        if (mTranslateBuilder_ == null) {
          return mTranslate_ == null ? com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslate_;
        } else {
          return mTranslateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>required .DataFactory.Vec3 m_translate = 4;</code>
       */
      public Builder setMTranslate(com.nibiru.creator.data.HotPotData.Vec3 value) {
        if (mTranslateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mTranslate_ = value;
          onChanged();
        } else {
          mTranslateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>required .DataFactory.Vec3 m_translate = 4;</code>
       */
      public Builder setMTranslate(
          com.nibiru.creator.data.HotPotData.Vec3.Builder builderForValue) {
        if (mTranslateBuilder_ == null) {
          mTranslate_ = builderForValue.build();
          onChanged();
        } else {
          mTranslateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>required .DataFactory.Vec3 m_translate = 4;</code>
       */
      public Builder mergeMTranslate(com.nibiru.creator.data.HotPotData.Vec3 value) {
        if (mTranslateBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              mTranslate_ != null &&
              mTranslate_ != com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance()) {
            mTranslate_ =
              com.nibiru.creator.data.HotPotData.Vec3.newBuilder(mTranslate_).mergeFrom(value).buildPartial();
          } else {
            mTranslate_ = value;
          }
          onChanged();
        } else {
          mTranslateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>required .DataFactory.Vec3 m_translate = 4;</code>
       */
      public Builder clearMTranslate() {
        if (mTranslateBuilder_ == null) {
          mTranslate_ = null;
          onChanged();
        } else {
          mTranslateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>required .DataFactory.Vec3 m_translate = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec3.Builder getMTranslateBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getMTranslateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>required .DataFactory.Vec3 m_translate = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec3OrBuilder getMTranslateOrBuilder() {
        if (mTranslateBuilder_ != null) {
          return mTranslateBuilder_.getMessageOrBuilder();
        } else {
          return mTranslate_ == null ?
              com.nibiru.creator.data.HotPotData.Vec3.getDefaultInstance() : mTranslate_;
        }
      }
      /**
       * <pre>
       *模型位移向量
       * </pre>
       *
       * <code>required .DataFactory.Vec3 m_translate = 4;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec3, com.nibiru.creator.data.HotPotData.Vec3.Builder, com.nibiru.creator.data.HotPotData.Vec3OrBuilder> 
          getMTranslateFieldBuilder() {
        if (mTranslateBuilder_ == null) {
          mTranslateBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec3, com.nibiru.creator.data.HotPotData.Vec3.Builder, com.nibiru.creator.data.HotPotData.Vec3OrBuilder>(
                  getMTranslate(),
                  getParentForChildren(),
                  isClean());
          mTranslate_ = null;
        }
        return mTranslateBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.Quaternion mRotation_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Quaternion, com.nibiru.creator.data.HotPotData.Quaternion.Builder, com.nibiru.creator.data.HotPotData.QuaternionOrBuilder> mRotationBuilder_;
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
       */
      public boolean hasMRotation() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Quaternion getMRotation() {
        if (mRotationBuilder_ == null) {
          return mRotation_ == null ? com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance() : mRotation_;
        } else {
          return mRotationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
       */
      public Builder setMRotation(com.nibiru.creator.data.HotPotData.Quaternion value) {
        if (mRotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mRotation_ = value;
          onChanged();
        } else {
          mRotationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
       */
      public Builder setMRotation(
          com.nibiru.creator.data.HotPotData.Quaternion.Builder builderForValue) {
        if (mRotationBuilder_ == null) {
          mRotation_ = builderForValue.build();
          onChanged();
        } else {
          mRotationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
       */
      public Builder mergeMRotation(com.nibiru.creator.data.HotPotData.Quaternion value) {
        if (mRotationBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              mRotation_ != null &&
              mRotation_ != com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance()) {
            mRotation_ =
              com.nibiru.creator.data.HotPotData.Quaternion.newBuilder(mRotation_).mergeFrom(value).buildPartial();
          } else {
            mRotation_ = value;
          }
          onChanged();
        } else {
          mRotationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
       */
      public Builder clearMRotation() {
        if (mRotationBuilder_ == null) {
          mRotation_ = null;
          onChanged();
        } else {
          mRotationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Quaternion.Builder getMRotationBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMRotationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.QuaternionOrBuilder getMRotationOrBuilder() {
        if (mRotationBuilder_ != null) {
          return mRotationBuilder_.getMessageOrBuilder();
        } else {
          return mRotation_ == null ?
              com.nibiru.creator.data.HotPotData.Quaternion.getDefaultInstance() : mRotation_;
        }
      }
      /**
       * <pre>
       *模型旋转四元数
       * </pre>
       *
       * <code>required .DataFactory.Quaternion m_rotation = 5;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Quaternion, com.nibiru.creator.data.HotPotData.Quaternion.Builder, com.nibiru.creator.data.HotPotData.QuaternionOrBuilder> 
          getMRotationFieldBuilder() {
        if (mRotationBuilder_ == null) {
          mRotationBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Quaternion, com.nibiru.creator.data.HotPotData.Quaternion.Builder, com.nibiru.creator.data.HotPotData.QuaternionOrBuilder>(
                  getMRotation(),
                  getParentForChildren(),
                  isClean());
          mRotation_ = null;
        }
        return mRotationBuilder_;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.ModelHotPot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.ModelHotPot)
    private static final com.nibiru.creator.data.HotPotData.ModelHotPot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.ModelHotPot();
    }

    public static com.nibiru.creator.data.HotPotData.ModelHotPot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<ModelHotPot>
        PARSER = new com.nibiru.protobuf.AbstractParser<ModelHotPot>() {
      public ModelHotPot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new ModelHotPot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<ModelHotPot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<ModelHotPot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.ModelHotPot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HyperlinkHotspotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.HyperlinkHotspot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *链接	
     * </pre>
     *
     * <code>required string hyperlink = 1;</code>
     */
    boolean hasHyperlink();
    /**
     * <pre>
     *链接	
     * </pre>
     *
     * <code>required string hyperlink = 1;</code>
     */
    java.lang.String getHyperlink();
    /**
     * <pre>
     *链接	
     * </pre>
     *
     * <code>required string hyperlink = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getHyperlinkBytes();
  }
  /**
   * <pre>
   *超链接热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.HyperlinkHotspot}
   */
  public  static final class HyperlinkHotspot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.HyperlinkHotspot)
      HyperlinkHotspotOrBuilder {
    // Use HyperlinkHotspot.newBuilder() to construct.
    private HyperlinkHotspot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HyperlinkHotspot() {
      hyperlink_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HyperlinkHotspot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              hyperlink_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HyperlinkHotspot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HyperlinkHotspot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.HyperlinkHotspot.class, com.nibiru.creator.data.HotPotData.HyperlinkHotspot.Builder.class);
    }

    private int bitField0_;
    public static final int HYPERLINK_FIELD_NUMBER = 1;
    private volatile java.lang.Object hyperlink_;
    /**
     * <pre>
     *链接	
     * </pre>
     *
     * <code>required string hyperlink = 1;</code>
     */
    public boolean hasHyperlink() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *链接	
     * </pre>
     *
     * <code>required string hyperlink = 1;</code>
     */
    public java.lang.String getHyperlink() {
      java.lang.Object ref = hyperlink_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          hyperlink_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *链接	
     * </pre>
     *
     * <code>required string hyperlink = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getHyperlinkBytes() {
      java.lang.Object ref = hyperlink_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hyperlink_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasHyperlink()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, hyperlink_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, hyperlink_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.HyperlinkHotspot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.HyperlinkHotspot other = (com.nibiru.creator.data.HotPotData.HyperlinkHotspot) obj;

      boolean result = true;
      result = result && (hasHyperlink() == other.hasHyperlink());
      if (hasHyperlink()) {
        result = result && getHyperlink()
            .equals(other.getHyperlink());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasHyperlink()) {
        hash = (37 * hash) + HYPERLINK_FIELD_NUMBER;
        hash = (53 * hash) + getHyperlink().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.HyperlinkHotspot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *超链接热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.HyperlinkHotspot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.HyperlinkHotspot)
        com.nibiru.creator.data.HotPotData.HyperlinkHotspotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HyperlinkHotspot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HyperlinkHotspot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.HyperlinkHotspot.class, com.nibiru.creator.data.HotPotData.HyperlinkHotspot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.HyperlinkHotspot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        hyperlink_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HyperlinkHotspot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.HyperlinkHotspot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.HyperlinkHotspot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.HyperlinkHotspot build() {
        com.nibiru.creator.data.HotPotData.HyperlinkHotspot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.HyperlinkHotspot buildPartial() {
        com.nibiru.creator.data.HotPotData.HyperlinkHotspot result = new com.nibiru.creator.data.HotPotData.HyperlinkHotspot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.hyperlink_ = hyperlink_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.HyperlinkHotspot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.HyperlinkHotspot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.HyperlinkHotspot other) {
        if (other == com.nibiru.creator.data.HotPotData.HyperlinkHotspot.getDefaultInstance()) return this;
        if (other.hasHyperlink()) {
          bitField0_ |= 0x00000001;
          hyperlink_ = other.hyperlink_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasHyperlink()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.HyperlinkHotspot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.HyperlinkHotspot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object hyperlink_ = "";
      /**
       * <pre>
       *链接	
       * </pre>
       *
       * <code>required string hyperlink = 1;</code>
       */
      public boolean hasHyperlink() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *链接	
       * </pre>
       *
       * <code>required string hyperlink = 1;</code>
       */
      public java.lang.String getHyperlink() {
        java.lang.Object ref = hyperlink_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            hyperlink_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *链接	
       * </pre>
       *
       * <code>required string hyperlink = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getHyperlinkBytes() {
        java.lang.Object ref = hyperlink_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          hyperlink_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *链接	
       * </pre>
       *
       * <code>required string hyperlink = 1;</code>
       */
      public Builder setHyperlink(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        hyperlink_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *链接	
       * </pre>
       *
       * <code>required string hyperlink = 1;</code>
       */
      public Builder clearHyperlink() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hyperlink_ = getDefaultInstance().getHyperlink();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *链接	
       * </pre>
       *
       * <code>required string hyperlink = 1;</code>
       */
      public Builder setHyperlinkBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        hyperlink_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.HyperlinkHotspot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.HyperlinkHotspot)
    private static final com.nibiru.creator.data.HotPotData.HyperlinkHotspot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.HyperlinkHotspot();
    }

    public static com.nibiru.creator.data.HotPotData.HyperlinkHotspot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<HyperlinkHotspot>
        PARSER = new com.nibiru.protobuf.AbstractParser<HyperlinkHotspot>() {
      public HyperlinkHotspot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new HyperlinkHotspot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<HyperlinkHotspot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<HyperlinkHotspot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.HyperlinkHotspot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Exhibits3DHotspotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.Exhibits3DHotspot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *3d展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsLink = 1;</code>
     */
    boolean hasMExhibitsLink();
    /**
     * <pre>
     *3d展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsLink = 1;</code>
     */
    java.lang.String getMExhibitsLink();
    /**
     * <pre>
     *3d展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsLink = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMExhibitsLinkBytes();

    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    boolean hasMResourceUrl();
    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    java.lang.String getMResourceUrl();
    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    com.nibiru.protobuf.ByteString
        getMResourceUrlBytes();

    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    boolean hasMId();
    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    java.lang.String getMId();
    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIdBytes();

    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    boolean hasMChoosenTime();
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    java.lang.String getMChoosenTime();
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    com.nibiru.protobuf.ByteString
        getMChoosenTimeBytes();

    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    boolean hasMProductName();
    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    java.lang.String getMProductName();
    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    com.nibiru.protobuf.ByteString
        getMProductNameBytes();
  }
  /**
   * <pre>
   *3dExhibits热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.Exhibits3DHotspot}
   */
  public  static final class Exhibits3DHotspot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.Exhibits3DHotspot)
      Exhibits3DHotspotOrBuilder {
    // Use Exhibits3DHotspot.newBuilder() to construct.
    private Exhibits3DHotspot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Exhibits3DHotspot() {
      mExhibitsLink_ = "";
      mResourceUrl_ = "";
      mId_ = "";
      mChoosenTime_ = "";
      mProductName_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Exhibits3DHotspot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mExhibitsLink_ = bs;
              break;
            }
            case 18: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              mResourceUrl_ = bs;
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mId_ = bs;
              break;
            }
            case 34: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              mChoosenTime_ = bs;
              break;
            }
            case 42: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              mProductName_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Exhibits3DHotspot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Exhibits3DHotspot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.class, com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.Builder.class);
    }

    private int bitField0_;
    public static final int M_EXHIBITSLINK_FIELD_NUMBER = 1;
    private volatile java.lang.Object mExhibitsLink_;
    /**
     * <pre>
     *3d展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsLink = 1;</code>
     */
    public boolean hasMExhibitsLink() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *3d展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsLink = 1;</code>
     */
    public java.lang.String getMExhibitsLink() {
      java.lang.Object ref = mExhibitsLink_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mExhibitsLink_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *3d展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsLink = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMExhibitsLinkBytes() {
      java.lang.Object ref = mExhibitsLink_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mExhibitsLink_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_RESOURCEURL_FIELD_NUMBER = 2;
    private volatile java.lang.Object mResourceUrl_;
    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    public boolean hasMResourceUrl() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    public java.lang.String getMResourceUrl() {
      java.lang.Object ref = mResourceUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mResourceUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMResourceUrlBytes() {
      java.lang.Object ref = mResourceUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mResourceUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ID_FIELD_NUMBER = 3;
    private volatile java.lang.Object mId_;
    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    public boolean hasMId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    public java.lang.String getMId() {
      java.lang.Object ref = mId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIdBytes() {
      java.lang.Object ref = mId_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mId_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_CHOOSENTIME_FIELD_NUMBER = 4;
    private volatile java.lang.Object mChoosenTime_;
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    public boolean hasMChoosenTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    public java.lang.String getMChoosenTime() {
      java.lang.Object ref = mChoosenTime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mChoosenTime_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMChoosenTimeBytes() {
      java.lang.Object ref = mChoosenTime_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mChoosenTime_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_PRODUCTNAME_FIELD_NUMBER = 5;
    private volatile java.lang.Object mProductName_;
    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    public boolean hasMProductName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    public java.lang.String getMProductName() {
      java.lang.Object ref = mProductName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mProductName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMProductNameBytes() {
      java.lang.Object ref = mProductName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mProductName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mExhibitsLink_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 2, mResourceUrl_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 4, mChoosenTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 5, mProductName_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mExhibitsLink_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(2, mResourceUrl_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(4, mChoosenTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(5, mProductName_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.Exhibits3DHotspot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.Exhibits3DHotspot other = (com.nibiru.creator.data.HotPotData.Exhibits3DHotspot) obj;

      boolean result = true;
      result = result && (hasMExhibitsLink() == other.hasMExhibitsLink());
      if (hasMExhibitsLink()) {
        result = result && getMExhibitsLink()
            .equals(other.getMExhibitsLink());
      }
      result = result && (hasMResourceUrl() == other.hasMResourceUrl());
      if (hasMResourceUrl()) {
        result = result && getMResourceUrl()
            .equals(other.getMResourceUrl());
      }
      result = result && (hasMId() == other.hasMId());
      if (hasMId()) {
        result = result && getMId()
            .equals(other.getMId());
      }
      result = result && (hasMChoosenTime() == other.hasMChoosenTime());
      if (hasMChoosenTime()) {
        result = result && getMChoosenTime()
            .equals(other.getMChoosenTime());
      }
      result = result && (hasMProductName() == other.hasMProductName());
      if (hasMProductName()) {
        result = result && getMProductName()
            .equals(other.getMProductName());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMExhibitsLink()) {
        hash = (37 * hash) + M_EXHIBITSLINK_FIELD_NUMBER;
        hash = (53 * hash) + getMExhibitsLink().hashCode();
      }
      if (hasMResourceUrl()) {
        hash = (37 * hash) + M_RESOURCEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMResourceUrl().hashCode();
      }
      if (hasMId()) {
        hash = (37 * hash) + M_ID_FIELD_NUMBER;
        hash = (53 * hash) + getMId().hashCode();
      }
      if (hasMChoosenTime()) {
        hash = (37 * hash) + M_CHOOSENTIME_FIELD_NUMBER;
        hash = (53 * hash) + getMChoosenTime().hashCode();
      }
      if (hasMProductName()) {
        hash = (37 * hash) + M_PRODUCTNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMProductName().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.Exhibits3DHotspot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *3dExhibits热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.Exhibits3DHotspot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.Exhibits3DHotspot)
        com.nibiru.creator.data.HotPotData.Exhibits3DHotspotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Exhibits3DHotspot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Exhibits3DHotspot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.class, com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mExhibitsLink_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mResourceUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        mId_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        mChoosenTime_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        mProductName_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Exhibits3DHotspot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.Exhibits3DHotspot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.Exhibits3DHotspot build() {
        com.nibiru.creator.data.HotPotData.Exhibits3DHotspot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.Exhibits3DHotspot buildPartial() {
        com.nibiru.creator.data.HotPotData.Exhibits3DHotspot result = new com.nibiru.creator.data.HotPotData.Exhibits3DHotspot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mExhibitsLink_ = mExhibitsLink_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mResourceUrl_ = mResourceUrl_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mId_ = mId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mChoosenTime_ = mChoosenTime_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mProductName_ = mProductName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.Exhibits3DHotspot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.Exhibits3DHotspot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.Exhibits3DHotspot other) {
        if (other == com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.getDefaultInstance()) return this;
        if (other.hasMExhibitsLink()) {
          bitField0_ |= 0x00000001;
          mExhibitsLink_ = other.mExhibitsLink_;
          onChanged();
        }
        if (other.hasMResourceUrl()) {
          bitField0_ |= 0x00000002;
          mResourceUrl_ = other.mResourceUrl_;
          onChanged();
        }
        if (other.hasMId()) {
          bitField0_ |= 0x00000004;
          mId_ = other.mId_;
          onChanged();
        }
        if (other.hasMChoosenTime()) {
          bitField0_ |= 0x00000008;
          mChoosenTime_ = other.mChoosenTime_;
          onChanged();
        }
        if (other.hasMProductName()) {
          bitField0_ |= 0x00000010;
          mProductName_ = other.mProductName_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.Exhibits3DHotspot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.Exhibits3DHotspot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mExhibitsLink_ = "";
      /**
       * <pre>
       *3d展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsLink = 1;</code>
       */
      public boolean hasMExhibitsLink() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *3d展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsLink = 1;</code>
       */
      public java.lang.String getMExhibitsLink() {
        java.lang.Object ref = mExhibitsLink_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mExhibitsLink_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *3d展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsLink = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMExhibitsLinkBytes() {
        java.lang.Object ref = mExhibitsLink_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mExhibitsLink_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *3d展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsLink = 1;</code>
       */
      public Builder setMExhibitsLink(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mExhibitsLink_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *3d展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsLink = 1;</code>
       */
      public Builder clearMExhibitsLink() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mExhibitsLink_ = getDefaultInstance().getMExhibitsLink();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *3d展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsLink = 1;</code>
       */
      public Builder setMExhibitsLinkBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mExhibitsLink_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mResourceUrl_ = "";
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public boolean hasMResourceUrl() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public java.lang.String getMResourceUrl() {
        java.lang.Object ref = mResourceUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mResourceUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMResourceUrlBytes() {
        java.lang.Object ref = mResourceUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mResourceUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public Builder setMResourceUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mResourceUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public Builder clearMResourceUrl() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mResourceUrl_ = getDefaultInstance().getMResourceUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public Builder setMResourceUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mResourceUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mId_ = "";
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public boolean hasMId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public java.lang.String getMId() {
        java.lang.Object ref = mId_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIdBytes() {
        java.lang.Object ref = mId_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mId_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public Builder setMId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public Builder clearMId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mId_ = getDefaultInstance().getMId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public Builder setMIdBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mChoosenTime_ = "";
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public boolean hasMChoosenTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public java.lang.String getMChoosenTime() {
        java.lang.Object ref = mChoosenTime_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mChoosenTime_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMChoosenTimeBytes() {
        java.lang.Object ref = mChoosenTime_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mChoosenTime_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public Builder setMChoosenTime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mChoosenTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public Builder clearMChoosenTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mChoosenTime_ = getDefaultInstance().getMChoosenTime();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public Builder setMChoosenTimeBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mChoosenTime_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mProductName_ = "";
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public boolean hasMProductName() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public java.lang.String getMProductName() {
        java.lang.Object ref = mProductName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mProductName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMProductNameBytes() {
        java.lang.Object ref = mProductName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mProductName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public Builder setMProductName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mProductName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public Builder clearMProductName() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mProductName_ = getDefaultInstance().getMProductName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public Builder setMProductNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mProductName_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.Exhibits3DHotspot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.Exhibits3DHotspot)
    private static final com.nibiru.creator.data.HotPotData.Exhibits3DHotspot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.Exhibits3DHotspot();
    }

    public static com.nibiru.creator.data.HotPotData.Exhibits3DHotspot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<Exhibits3DHotspot>
        PARSER = new com.nibiru.protobuf.AbstractParser<Exhibits3DHotspot>() {
      public Exhibits3DHotspot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new Exhibits3DHotspot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<Exhibits3DHotspot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<Exhibits3DHotspot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.Exhibits3DHotspot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExhibitsARHotspotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.ExhibitsARHotspot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *AR展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsARLink = 1;</code>
     */
    boolean hasMExhibitsARLink();
    /**
     * <pre>
     *AR展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsARLink = 1;</code>
     */
    java.lang.String getMExhibitsARLink();
    /**
     * <pre>
     *AR展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsARLink = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMExhibitsARLinkBytes();

    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    boolean hasMResourceUrl();
    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    java.lang.String getMResourceUrl();
    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    com.nibiru.protobuf.ByteString
        getMResourceUrlBytes();

    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    boolean hasMId();
    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    java.lang.String getMId();
    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIdBytes();

    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    boolean hasMChoosenTime();
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    java.lang.String getMChoosenTime();
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    com.nibiru.protobuf.ByteString
        getMChoosenTimeBytes();

    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    boolean hasMProductName();
    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    java.lang.String getMProductName();
    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    com.nibiru.protobuf.ByteString
        getMProductNameBytes();
  }
  /**
   * <pre>
   *ARExhibits热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.ExhibitsARHotspot}
   */
  public  static final class ExhibitsARHotspot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.ExhibitsARHotspot)
      ExhibitsARHotspotOrBuilder {
    // Use ExhibitsARHotspot.newBuilder() to construct.
    private ExhibitsARHotspot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExhibitsARHotspot() {
      mExhibitsARLink_ = "";
      mResourceUrl_ = "";
      mId_ = "";
      mChoosenTime_ = "";
      mProductName_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExhibitsARHotspot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mExhibitsARLink_ = bs;
              break;
            }
            case 18: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              mResourceUrl_ = bs;
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mId_ = bs;
              break;
            }
            case 34: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              mChoosenTime_ = bs;
              break;
            }
            case 42: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              mProductName_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ExhibitsARHotspot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ExhibitsARHotspot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.class, com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.Builder.class);
    }

    private int bitField0_;
    public static final int M_EXHIBITSARLINK_FIELD_NUMBER = 1;
    private volatile java.lang.Object mExhibitsARLink_;
    /**
     * <pre>
     *AR展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsARLink = 1;</code>
     */
    public boolean hasMExhibitsARLink() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *AR展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsARLink = 1;</code>
     */
    public java.lang.String getMExhibitsARLink() {
      java.lang.Object ref = mExhibitsARLink_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mExhibitsARLink_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *AR展品url
     * </pre>
     *
     * <code>optional string m_ExhibitsARLink = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMExhibitsARLinkBytes() {
      java.lang.Object ref = mExhibitsARLink_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mExhibitsARLink_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_RESOURCEURL_FIELD_NUMBER = 2;
    private volatile java.lang.Object mResourceUrl_;
    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    public boolean hasMResourceUrl() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    public java.lang.String getMResourceUrl() {
      java.lang.Object ref = mResourceUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mResourceUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *url
     * </pre>
     *
     * <code>optional string m_resourceUrl = 2;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMResourceUrlBytes() {
      java.lang.Object ref = mResourceUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mResourceUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ID_FIELD_NUMBER = 3;
    private volatile java.lang.Object mId_;
    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    public boolean hasMId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    public java.lang.String getMId() {
      java.lang.Object ref = mId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *id
     * </pre>
     *
     * <code>optional string m_id = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIdBytes() {
      java.lang.Object ref = mId_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mId_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_CHOOSENTIME_FIELD_NUMBER = 4;
    private volatile java.lang.Object mChoosenTime_;
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    public boolean hasMChoosenTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    public java.lang.String getMChoosenTime() {
      java.lang.Object ref = mChoosenTime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mChoosenTime_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_choosenTime = 4;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMChoosenTimeBytes() {
      java.lang.Object ref = mChoosenTime_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mChoosenTime_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_PRODUCTNAME_FIELD_NUMBER = 5;
    private volatile java.lang.Object mProductName_;
    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    public boolean hasMProductName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    public java.lang.String getMProductName() {
      java.lang.Object ref = mProductName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mProductName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *展品的名字
     * </pre>
     *
     * <code>optional string m_productName = 5;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMProductNameBytes() {
      java.lang.Object ref = mProductName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mProductName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mExhibitsARLink_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 2, mResourceUrl_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 4, mChoosenTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 5, mProductName_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mExhibitsARLink_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(2, mResourceUrl_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(4, mChoosenTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(5, mProductName_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.ExhibitsARHotspot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.ExhibitsARHotspot other = (com.nibiru.creator.data.HotPotData.ExhibitsARHotspot) obj;

      boolean result = true;
      result = result && (hasMExhibitsARLink() == other.hasMExhibitsARLink());
      if (hasMExhibitsARLink()) {
        result = result && getMExhibitsARLink()
            .equals(other.getMExhibitsARLink());
      }
      result = result && (hasMResourceUrl() == other.hasMResourceUrl());
      if (hasMResourceUrl()) {
        result = result && getMResourceUrl()
            .equals(other.getMResourceUrl());
      }
      result = result && (hasMId() == other.hasMId());
      if (hasMId()) {
        result = result && getMId()
            .equals(other.getMId());
      }
      result = result && (hasMChoosenTime() == other.hasMChoosenTime());
      if (hasMChoosenTime()) {
        result = result && getMChoosenTime()
            .equals(other.getMChoosenTime());
      }
      result = result && (hasMProductName() == other.hasMProductName());
      if (hasMProductName()) {
        result = result && getMProductName()
            .equals(other.getMProductName());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMExhibitsARLink()) {
        hash = (37 * hash) + M_EXHIBITSARLINK_FIELD_NUMBER;
        hash = (53 * hash) + getMExhibitsARLink().hashCode();
      }
      if (hasMResourceUrl()) {
        hash = (37 * hash) + M_RESOURCEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMResourceUrl().hashCode();
      }
      if (hasMId()) {
        hash = (37 * hash) + M_ID_FIELD_NUMBER;
        hash = (53 * hash) + getMId().hashCode();
      }
      if (hasMChoosenTime()) {
        hash = (37 * hash) + M_CHOOSENTIME_FIELD_NUMBER;
        hash = (53 * hash) + getMChoosenTime().hashCode();
      }
      if (hasMProductName()) {
        hash = (37 * hash) + M_PRODUCTNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMProductName().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.ExhibitsARHotspot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *ARExhibits热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.ExhibitsARHotspot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.ExhibitsARHotspot)
        com.nibiru.creator.data.HotPotData.ExhibitsARHotspotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ExhibitsARHotspot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ExhibitsARHotspot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.class, com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mExhibitsARLink_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mResourceUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        mId_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        mChoosenTime_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        mProductName_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ExhibitsARHotspot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.ExhibitsARHotspot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.ExhibitsARHotspot build() {
        com.nibiru.creator.data.HotPotData.ExhibitsARHotspot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.ExhibitsARHotspot buildPartial() {
        com.nibiru.creator.data.HotPotData.ExhibitsARHotspot result = new com.nibiru.creator.data.HotPotData.ExhibitsARHotspot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mExhibitsARLink_ = mExhibitsARLink_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mResourceUrl_ = mResourceUrl_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mId_ = mId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mChoosenTime_ = mChoosenTime_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mProductName_ = mProductName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.ExhibitsARHotspot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.ExhibitsARHotspot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.ExhibitsARHotspot other) {
        if (other == com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.getDefaultInstance()) return this;
        if (other.hasMExhibitsARLink()) {
          bitField0_ |= 0x00000001;
          mExhibitsARLink_ = other.mExhibitsARLink_;
          onChanged();
        }
        if (other.hasMResourceUrl()) {
          bitField0_ |= 0x00000002;
          mResourceUrl_ = other.mResourceUrl_;
          onChanged();
        }
        if (other.hasMId()) {
          bitField0_ |= 0x00000004;
          mId_ = other.mId_;
          onChanged();
        }
        if (other.hasMChoosenTime()) {
          bitField0_ |= 0x00000008;
          mChoosenTime_ = other.mChoosenTime_;
          onChanged();
        }
        if (other.hasMProductName()) {
          bitField0_ |= 0x00000010;
          mProductName_ = other.mProductName_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.ExhibitsARHotspot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.ExhibitsARHotspot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mExhibitsARLink_ = "";
      /**
       * <pre>
       *AR展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsARLink = 1;</code>
       */
      public boolean hasMExhibitsARLink() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *AR展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsARLink = 1;</code>
       */
      public java.lang.String getMExhibitsARLink() {
        java.lang.Object ref = mExhibitsARLink_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mExhibitsARLink_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *AR展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsARLink = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMExhibitsARLinkBytes() {
        java.lang.Object ref = mExhibitsARLink_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mExhibitsARLink_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *AR展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsARLink = 1;</code>
       */
      public Builder setMExhibitsARLink(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mExhibitsARLink_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *AR展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsARLink = 1;</code>
       */
      public Builder clearMExhibitsARLink() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mExhibitsARLink_ = getDefaultInstance().getMExhibitsARLink();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *AR展品url
       * </pre>
       *
       * <code>optional string m_ExhibitsARLink = 1;</code>
       */
      public Builder setMExhibitsARLinkBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mExhibitsARLink_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mResourceUrl_ = "";
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public boolean hasMResourceUrl() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public java.lang.String getMResourceUrl() {
        java.lang.Object ref = mResourceUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mResourceUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMResourceUrlBytes() {
        java.lang.Object ref = mResourceUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mResourceUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public Builder setMResourceUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mResourceUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public Builder clearMResourceUrl() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mResourceUrl_ = getDefaultInstance().getMResourceUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *url
       * </pre>
       *
       * <code>optional string m_resourceUrl = 2;</code>
       */
      public Builder setMResourceUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mResourceUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mId_ = "";
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public boolean hasMId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public java.lang.String getMId() {
        java.lang.Object ref = mId_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIdBytes() {
        java.lang.Object ref = mId_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mId_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public Builder setMId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public Builder clearMId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mId_ = getDefaultInstance().getMId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *id
       * </pre>
       *
       * <code>optional string m_id = 3;</code>
       */
      public Builder setMIdBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mChoosenTime_ = "";
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public boolean hasMChoosenTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public java.lang.String getMChoosenTime() {
        java.lang.Object ref = mChoosenTime_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mChoosenTime_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMChoosenTimeBytes() {
        java.lang.Object ref = mChoosenTime_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mChoosenTime_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public Builder setMChoosenTime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mChoosenTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public Builder clearMChoosenTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mChoosenTime_ = getDefaultInstance().getMChoosenTime();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_choosenTime = 4;</code>
       */
      public Builder setMChoosenTimeBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mChoosenTime_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mProductName_ = "";
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public boolean hasMProductName() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public java.lang.String getMProductName() {
        java.lang.Object ref = mProductName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mProductName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMProductNameBytes() {
        java.lang.Object ref = mProductName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mProductName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public Builder setMProductName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mProductName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public Builder clearMProductName() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mProductName_ = getDefaultInstance().getMProductName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *展品的名字
       * </pre>
       *
       * <code>optional string m_productName = 5;</code>
       */
      public Builder setMProductNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mProductName_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.ExhibitsARHotspot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.ExhibitsARHotspot)
    private static final com.nibiru.creator.data.HotPotData.ExhibitsARHotspot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.ExhibitsARHotspot();
    }

    public static com.nibiru.creator.data.HotPotData.ExhibitsARHotspot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<ExhibitsARHotspot>
        PARSER = new com.nibiru.protobuf.AbstractParser<ExhibitsARHotspot>() {
      public ExhibitsARHotspot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new ExhibitsARHotspot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<ExhibitsARHotspot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<ExhibitsARHotspot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.ExhibitsARHotspot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HotPotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.HotPot)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *热点ID
     * </pre>
     *
     * <code>required int32 m_HotPotID = 1;</code>
     */
    boolean hasMHotPotID();
    /**
     * <pre>
     *热点ID
     * </pre>
     *
     * <code>required int32 m_HotPotID = 1;</code>
     */
    int getMHotPotID();

    /**
     * <pre>
     *热点属性
     * </pre>
     *
     * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
     */
    boolean hasMAttribute();
    /**
     * <pre>
     *热点属性
     * </pre>
     *
     * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPotAttribute getMAttribute();
    /**
     * <pre>
     *热点属性
     * </pre>
     *
     * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPotAttributeOrBuilder getMAttributeOrBuilder();

    /**
     * <pre>
     *热点在场景中的位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 3;</code>
     */
    boolean hasMPosition();
    /**
     * <pre>
     *热点在场景中的位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMPosition();
    /**
     * <pre>
     *热点在场景中的位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMPositionOrBuilder();

    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_Name = 4;</code>
     */
    boolean hasMName();
    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_Name = 4;</code>
     */
    java.lang.String getMName();
    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_Name = 4;</code>
     */
    com.nibiru.protobuf.ByteString
        getMNameBytes();

    /**
     * <pre>
     *是否显示热点名称
     * </pre>
     *
     * <code>required int32 m_ShowName = 5;</code>
     */
    boolean hasMShowName();
    /**
     * <pre>
     *是否显示热点名称
     * </pre>
     *
     * <code>required int32 m_ShowName = 5;</code>
     */
    int getMShowName();

    /**
     * <pre>
     *触发方式
     * </pre>
     *
     * <code>optional .DataFactory.DisplayMode m_DisplayMode = 6;</code>
     */
    boolean hasMDisplayMode();
    /**
     * <pre>
     *触发方式
     * </pre>
     *
     * <code>optional .DataFactory.DisplayMode m_DisplayMode = 6;</code>
     */
    com.nibiru.creator.data.HotPotData.DisplayMode getMDisplayMode();

    /**
     * <pre>
     *消失方式
     * </pre>
     *
     * <code>optional .DataFactory.DisappearMode m_DisappearMode = 7;</code>
     */
    boolean hasMDisappearMode();
    /**
     * <pre>
     *消失方式
     * </pre>
     *
     * <code>optional .DataFactory.DisappearMode m_DisappearMode = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.DisappearMode getMDisappearMode();

    /**
     * <pre>
     *图片热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
     */
    boolean hasMImageHotPot();
    /**
     * <pre>
     *图片热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
     */
    com.nibiru.creator.data.HotPotData.ImageHotPot getMImageHotPot();
    /**
     * <pre>
     *图片热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
     */
    com.nibiru.creator.data.HotPotData.ImageHotPotOrBuilder getMImageHotPotOrBuilder();

    /**
     * <pre>
     *视频热点
     * </pre>
     *
     * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
     */
    boolean hasMVideoImageHotPot();
    /**
     * <pre>
     *视频热点
     * </pre>
     *
     * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
     */
    com.nibiru.creator.data.HotPotData.VideoImageHotPot getMVideoImageHotPot();
    /**
     * <pre>
     *视频热点
     * </pre>
     *
     * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
     */
    com.nibiru.creator.data.HotPotData.VideoImageHotPotOrBuilder getMVideoImageHotPotOrBuilder();

    /**
     * <pre>
     *文本热点
     * </pre>
     *
     * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
     */
    boolean hasMLabelHotPot();
    /**
     * <pre>
     *文本热点
     * </pre>
     *
     * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
     */
    com.nibiru.creator.data.HotPotData.LabelHotPot getMLabelHotPot();
    /**
     * <pre>
     *文本热点
     * </pre>
     *
     * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
     */
    com.nibiru.creator.data.HotPotData.LabelHotPotOrBuilder getMLabelHotPotOrBuilder();

    /**
     * <pre>
     *音频热点
     * </pre>
     *
     * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
     */
    boolean hasMAudioHotPot();
    /**
     * <pre>
     *音频热点
     * </pre>
     *
     * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
     */
    com.nibiru.creator.data.HotPotData.AudioHotPot getMAudioHotPot();
    /**
     * <pre>
     *音频热点
     * </pre>
     *
     * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
     */
    com.nibiru.creator.data.HotPotData.AudioHotPotOrBuilder getMAudioHotPotOrBuilder();

    /**
     * <pre>
     *切换热点
     * </pre>
     *
     * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
     */
    boolean hasMSceneSwitchHotPot();
    /**
     * <pre>
     *切换热点
     * </pre>
     *
     * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
     */
    com.nibiru.creator.data.HotPotData.SceneSwitchHotPot getMSceneSwitchHotPot();
    /**
     * <pre>
     *切换热点
     * </pre>
     *
     * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
     */
    com.nibiru.creator.data.HotPotData.SceneSwitchHotPotOrBuilder getMSceneSwitchHotPotOrBuilder();

    /**
     * <pre>
     *图集热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
     */
    boolean hasMImageListHotPot();
    /**
     * <pre>
     *图集热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
     */
    com.nibiru.creator.data.HotPotData.ImageListHotPot getMImageListHotPot();
    /**
     * <pre>
     *图集热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
     */
    com.nibiru.creator.data.HotPotData.ImageListHotPotOrBuilder getMImageListHotPotOrBuilder();

    /**
     * <pre>
     *图文热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
     */
    boolean hasMImageTxtHotPot();
    /**
     * <pre>
     *图文热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
     */
    com.nibiru.creator.data.HotPotData.ImageTxtHotPot getMImageTxtHotPot();
    /**
     * <pre>
     *图文热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
     */
    com.nibiru.creator.data.HotPotData.ImageTxtHotPotOrBuilder getMImageTxtHotPotOrBuilder();

    /**
     * <pre>
     *开始时间
     * </pre>
     *
     * <code>optional int64 m_StartTime = 15;</code>
     */
    boolean hasMStartTime();
    /**
     * <pre>
     *开始时间
     * </pre>
     *
     * <code>optional int64 m_StartTime = 15;</code>
     */
    long getMStartTime();

    /**
     * <pre>
     *结束时间
     * </pre>
     *
     * <code>optional int64 m_EndTime = 16;</code>
     */
    boolean hasMEndTime();
    /**
     * <pre>
     *结束时间
     * </pre>
     *
     * <code>optional int64 m_EndTime = 16;</code>
     */
    long getMEndTime();

    /**
     * <pre>
     * 热点编辑状态（一体机端用）
     * </pre>
     *
     * <code>optional int32 m_State = 17;</code>
     */
    boolean hasMState();
    /**
     * <pre>
     * 热点编辑状态（一体机端用）
     * </pre>
     *
     * <code>optional int32 m_State = 17;</code>
     */
    int getMState();

    /**
     * <pre>
     * 热点图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
     */
    boolean hasMLabelSize();
    /**
     * <pre>
     * 热点图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMLabelSize();
    /**
     * <pre>
     * 热点图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMLabelSizeOrBuilder();

    /**
     * <pre>
     * 热点远近大小（一体机端用）
     * </pre>
     *
     * <code>optional float m_Radius = 19;</code>
     */
    boolean hasMRadius();
    /**
     * <pre>
     * 热点远近大小（一体机端用）
     * </pre>
     *
     * <code>optional float m_Radius = 19;</code>
     */
    float getMRadius();

    /**
     * <pre>
     *模型热点
     * </pre>
     *
     * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
     */
    boolean hasMModelHotPot();
    /**
     * <pre>
     *模型热点
     * </pre>
     *
     * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
     */
    com.nibiru.creator.data.HotPotData.ModelHotPot getMModelHotPot();
    /**
     * <pre>
     *模型热点
     * </pre>
     *
     * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
     */
    com.nibiru.creator.data.HotPotData.ModelHotPotOrBuilder getMModelHotPotOrBuilder();

    /**
     * <pre>
     *超链接热点
     * </pre>
     *
     * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
     */
    boolean hasHyperlinkHotspot();
    /**
     * <pre>
     *超链接热点
     * </pre>
     *
     * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
     */
    com.nibiru.creator.data.HotPotData.HyperlinkHotspot getHyperlinkHotspot();
    /**
     * <pre>
     *超链接热点
     * </pre>
     *
     * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
     */
    com.nibiru.creator.data.HotPotData.HyperlinkHotspotOrBuilder getHyperlinkHotspotOrBuilder();

    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 22;</code>
     */
    boolean hasMMaterialId();
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 22;</code>
     */
    int getMMaterialId();

    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 23;</code>
     */
    boolean hasMDisplayName();
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 23;</code>
     */
    java.lang.String getMDisplayName();
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 23;</code>
     */
    com.nibiru.protobuf.ByteString
        getMDisplayNameBytes();

    /**
     * <pre>
     *热点内容显示位置， 0 下方，1 中间
     * </pre>
     *
     * <code>optional int32 m_DisplayAlign = 24;</code>
     */
    boolean hasMDisplayAlign();
    /**
     * <pre>
     *热点内容显示位置， 0 下方，1 中间
     * </pre>
     *
     * <code>optional int32 m_DisplayAlign = 24;</code>
     */
    int getMDisplayAlign();

    /**
     * <pre>
     *热点点击放大
     * </pre>
     *
     * <code>optional int64 m_ClickLarger = 25;</code>
     */
    boolean hasMClickLarger();
    /**
     * <pre>
     *热点点击放大
     * </pre>
     *
     * <code>optional int64 m_ClickLarger = 25;</code>
     */
    long getMClickLarger();

    /**
     * <pre>
     *热点点击旋转
     * </pre>
     *
     * <code>optional int64 m_ClickRotate = 26;</code>
     */
    boolean hasMClickRotate();
    /**
     * <pre>
     *热点点击旋转
     * </pre>
     *
     * <code>optional int64 m_ClickRotate = 26;</code>
     */
    long getMClickRotate();

    /**
     * <pre>
     *热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 27;</code>
     */
    boolean hasMClickAudioPath();
    /**
     * <pre>
     *热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 27;</code>
     */
    java.lang.String getMClickAudioPath();
    /**
     * <pre>
     *热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 27;</code>
     */
    com.nibiru.protobuf.ByteString
        getMClickAudioPathBytes();

    /**
     * <pre>
     *热点名称字体大小  
     * </pre>
     *
     * <code>optional int32 m_FontSize = 28 [default = 14];</code>
     */
    boolean hasMFontSize();
    /**
     * <pre>
     *热点名称字体大小  
     * </pre>
     *
     * <code>optional int32 m_FontSize = 28 [default = 14];</code>
     */
    int getMFontSize();

    /**
     * <pre>
     *Exhiits3D热点
     * </pre>
     *
     * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
     */
    boolean hasMExhibitsHotPot();
    /**
     * <pre>
     *Exhiits3D热点
     * </pre>
     *
     * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
     */
    com.nibiru.creator.data.HotPotData.Exhibits3DHotspot getMExhibitsHotPot();
    /**
     * <pre>
     *Exhiits3D热点
     * </pre>
     *
     * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
     */
    com.nibiru.creator.data.HotPotData.Exhibits3DHotspotOrBuilder getMExhibitsHotPotOrBuilder();

    /**
     * <pre>
     *ExhiitsAR热点
     * </pre>
     *
     * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
     */
    boolean hasMExhibitsARHotPot();
    /**
     * <pre>
     *ExhiitsAR热点
     * </pre>
     *
     * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
     */
    com.nibiru.creator.data.HotPotData.ExhibitsARHotspot getMExhibitsARHotPot();
    /**
     * <pre>
     *ExhiitsAR热点
     * </pre>
     *
     * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
     */
    com.nibiru.creator.data.HotPotData.ExhibitsARHotspotOrBuilder getMExhibitsARHotPotOrBuilder();

    /**
     * <pre>
     *热点图标布局位置， 1 右、 2 底部
     * </pre>
     *
     * <code>optional int32 m_appearanceLayout = 31;</code>
     */
    boolean hasMAppearanceLayout();
    /**
     * <pre>
     *热点图标布局位置， 1 右、 2 底部
     * </pre>
     *
     * <code>optional int32 m_appearanceLayout = 31;</code>
     */
    int getMAppearanceLayout();

    /**
     * <pre>
     *替换图片
     * </pre>
     *
     * <code>optional string hoverImage = 34;</code>
     */
    boolean hasHoverImage();
    /**
     * <pre>
     *替换图片
     * </pre>
     *
     * <code>optional string hoverImage = 34;</code>
     */
    java.lang.String getHoverImage();
    /**
     * <pre>
     *替换图片
     * </pre>
     *
     * <code>optional string hoverImage = 34;</code>
     */
    com.nibiru.protobuf.ByteString
        getHoverImageBytes();
  }
  /**
   * <pre>
   * 热点
   * </pre>
   *
   * Protobuf type {@code DataFactory.HotPot}
   */
  public  static final class HotPot extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.HotPot)
      HotPotOrBuilder {
    // Use HotPot.newBuilder() to construct.
    private HotPot(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HotPot() {
      mHotPotID_ = 0;
      mName_ = "";
      mShowName_ = 0;
      mDisplayMode_ = 0;
      mDisappearMode_ = 0;
      mStartTime_ = 0L;
      mEndTime_ = 0L;
      mState_ = 0;
      mRadius_ = 0F;
      mMaterialId_ = 0;
      mDisplayName_ = "";
      mDisplayAlign_ = 0;
      mClickLarger_ = 0L;
      mClickRotate_ = 0L;
      mClickAudioPath_ = "";
      mFontSize_ = 14;
      mAppearanceLayout_ = 0;
      hoverImage_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HotPot(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mHotPotID_ = input.readInt32();
              break;
            }
            case 18: {
              com.nibiru.creator.data.HotPotData.HotPotAttribute.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mAttribute_.toBuilder();
              }
              mAttribute_ = input.readMessage(com.nibiru.creator.data.HotPotData.HotPotAttribute.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mAttribute_);
                mAttribute_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = mPosition_.toBuilder();
              }
              mPosition_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mPosition_);
                mPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              mName_ = bs;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              mShowName_ = input.readInt32();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.DisplayMode value = com.nibiru.creator.data.HotPotData.DisplayMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                mDisplayMode_ = rawValue;
              }
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.DisappearMode value = com.nibiru.creator.data.HotPotData.DisappearMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                mDisappearMode_ = rawValue;
              }
              break;
            }
            case 66: {
              com.nibiru.creator.data.HotPotData.ImageHotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = mImageHotPot_.toBuilder();
              }
              mImageHotPot_ = input.readMessage(com.nibiru.creator.data.HotPotData.ImageHotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mImageHotPot_);
                mImageHotPot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              com.nibiru.creator.data.HotPotData.VideoImageHotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = mVideoImageHotPot_.toBuilder();
              }
              mVideoImageHotPot_ = input.readMessage(com.nibiru.creator.data.HotPotData.VideoImageHotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mVideoImageHotPot_);
                mVideoImageHotPot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              com.nibiru.creator.data.HotPotData.LabelHotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = mLabelHotPot_.toBuilder();
              }
              mLabelHotPot_ = input.readMessage(com.nibiru.creator.data.HotPotData.LabelHotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mLabelHotPot_);
                mLabelHotPot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              com.nibiru.creator.data.HotPotData.AudioHotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = mAudioHotPot_.toBuilder();
              }
              mAudioHotPot_ = input.readMessage(com.nibiru.creator.data.HotPotData.AudioHotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mAudioHotPot_);
                mAudioHotPot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = mSceneSwitchHotPot_.toBuilder();
              }
              mSceneSwitchHotPot_ = input.readMessage(com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mSceneSwitchHotPot_);
                mSceneSwitchHotPot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 106: {
              com.nibiru.creator.data.HotPotData.ImageListHotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = mImageListHotPot_.toBuilder();
              }
              mImageListHotPot_ = input.readMessage(com.nibiru.creator.data.HotPotData.ImageListHotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mImageListHotPot_);
                mImageListHotPot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 114: {
              com.nibiru.creator.data.HotPotData.ImageTxtHotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = mImageTxtHotPot_.toBuilder();
              }
              mImageTxtHotPot_ = input.readMessage(com.nibiru.creator.data.HotPotData.ImageTxtHotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mImageTxtHotPot_);
                mImageTxtHotPot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              mStartTime_ = input.readInt64();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              mEndTime_ = input.readInt64();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              mState_ = input.readInt32();
              break;
            }
            case 146: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) == 0x00020000)) {
                subBuilder = mLabelSize_.toBuilder();
              }
              mLabelSize_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mLabelSize_);
                mLabelSize_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 157: {
              bitField0_ |= 0x00040000;
              mRadius_ = input.readFloat();
              break;
            }
            case 162: {
              com.nibiru.creator.data.HotPotData.ModelHotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x00080000) == 0x00080000)) {
                subBuilder = mModelHotPot_.toBuilder();
              }
              mModelHotPot_ = input.readMessage(com.nibiru.creator.data.HotPotData.ModelHotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mModelHotPot_);
                mModelHotPot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00080000;
              break;
            }
            case 170: {
              com.nibiru.creator.data.HotPotData.HyperlinkHotspot.Builder subBuilder = null;
              if (((bitField0_ & 0x00100000) == 0x00100000)) {
                subBuilder = hyperlinkHotspot_.toBuilder();
              }
              hyperlinkHotspot_ = input.readMessage(com.nibiru.creator.data.HotPotData.HyperlinkHotspot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hyperlinkHotspot_);
                hyperlinkHotspot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00100000;
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              mMaterialId_ = input.readInt32();
              break;
            }
            case 186: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00400000;
              mDisplayName_ = bs;
              break;
            }
            case 192: {
              bitField0_ |= 0x00800000;
              mDisplayAlign_ = input.readInt32();
              break;
            }
            case 200: {
              bitField0_ |= 0x01000000;
              mClickLarger_ = input.readInt64();
              break;
            }
            case 208: {
              bitField0_ |= 0x02000000;
              mClickRotate_ = input.readInt64();
              break;
            }
            case 218: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x04000000;
              mClickAudioPath_ = bs;
              break;
            }
            case 224: {
              bitField0_ |= 0x08000000;
              mFontSize_ = input.readInt32();
              break;
            }
            case 234: {
              com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.Builder subBuilder = null;
              if (((bitField0_ & 0x10000000) == 0x10000000)) {
                subBuilder = mExhibitsHotPot_.toBuilder();
              }
              mExhibitsHotPot_ = input.readMessage(com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mExhibitsHotPot_);
                mExhibitsHotPot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x10000000;
              break;
            }
            case 242: {
              com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.Builder subBuilder = null;
              if (((bitField0_ & 0x20000000) == 0x20000000)) {
                subBuilder = mExhibitsARHotPot_.toBuilder();
              }
              mExhibitsARHotPot_ = input.readMessage(com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mExhibitsARHotPot_);
                mExhibitsARHotPot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x20000000;
              break;
            }
            case 248: {
              bitField0_ |= 0x40000000;
              mAppearanceLayout_ = input.readInt32();
              break;
            }
            case 274: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x80000000;
              hoverImage_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPot_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.HotPot.class, com.nibiru.creator.data.HotPotData.HotPot.Builder.class);
    }

    private int bitField0_;
    public static final int M_HOTPOTID_FIELD_NUMBER = 1;
    private int mHotPotID_;
    /**
     * <pre>
     *热点ID
     * </pre>
     *
     * <code>required int32 m_HotPotID = 1;</code>
     */
    public boolean hasMHotPotID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *热点ID
     * </pre>
     *
     * <code>required int32 m_HotPotID = 1;</code>
     */
    public int getMHotPotID() {
      return mHotPotID_;
    }

    public static final int M_ATTRIBUTE_FIELD_NUMBER = 2;
    private com.nibiru.creator.data.HotPotData.HotPotAttribute mAttribute_;
    /**
     * <pre>
     *热点属性
     * </pre>
     *
     * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
     */
    public boolean hasMAttribute() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *热点属性
     * </pre>
     *
     * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPotAttribute getMAttribute() {
      return mAttribute_ == null ? com.nibiru.creator.data.HotPotData.HotPotAttribute.getDefaultInstance() : mAttribute_;
    }
    /**
     * <pre>
     *热点属性
     * </pre>
     *
     * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPotAttributeOrBuilder getMAttributeOrBuilder() {
      return mAttribute_ == null ? com.nibiru.creator.data.HotPotData.HotPotAttribute.getDefaultInstance() : mAttribute_;
    }

    public static final int M_POSITION_FIELD_NUMBER = 3;
    private com.nibiru.creator.data.HotPotData.Vec2 mPosition_;
    /**
     * <pre>
     *热点在场景中的位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 3;</code>
     */
    public boolean hasMPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *热点在场景中的位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMPosition() {
      return mPosition_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
    }
    /**
     * <pre>
     *热点在场景中的位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMPositionOrBuilder() {
      return mPosition_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
    }

    public static final int M_NAME_FIELD_NUMBER = 4;
    private volatile java.lang.Object mName_;
    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_Name = 4;</code>
     */
    public boolean hasMName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_Name = 4;</code>
     */
    public java.lang.String getMName() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *热点名称
     * </pre>
     *
     * <code>required string m_Name = 4;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMNameBytes() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_SHOWNAME_FIELD_NUMBER = 5;
    private int mShowName_;
    /**
     * <pre>
     *是否显示热点名称
     * </pre>
     *
     * <code>required int32 m_ShowName = 5;</code>
     */
    public boolean hasMShowName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *是否显示热点名称
     * </pre>
     *
     * <code>required int32 m_ShowName = 5;</code>
     */
    public int getMShowName() {
      return mShowName_;
    }

    public static final int M_DISPLAYMODE_FIELD_NUMBER = 6;
    private int mDisplayMode_;
    /**
     * <pre>
     *触发方式
     * </pre>
     *
     * <code>optional .DataFactory.DisplayMode m_DisplayMode = 6;</code>
     */
    public boolean hasMDisplayMode() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *触发方式
     * </pre>
     *
     * <code>optional .DataFactory.DisplayMode m_DisplayMode = 6;</code>
     */
    public com.nibiru.creator.data.HotPotData.DisplayMode getMDisplayMode() {
      com.nibiru.creator.data.HotPotData.DisplayMode result = com.nibiru.creator.data.HotPotData.DisplayMode.valueOf(mDisplayMode_);
      return result == null ? com.nibiru.creator.data.HotPotData.DisplayMode.DisplayMode_ClickShow : result;
    }

    public static final int M_DISAPPEARMODE_FIELD_NUMBER = 7;
    private int mDisappearMode_;
    /**
     * <pre>
     *消失方式
     * </pre>
     *
     * <code>optional .DataFactory.DisappearMode m_DisappearMode = 7;</code>
     */
    public boolean hasMDisappearMode() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *消失方式
     * </pre>
     *
     * <code>optional .DataFactory.DisappearMode m_DisappearMode = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.DisappearMode getMDisappearMode() {
      com.nibiru.creator.data.HotPotData.DisappearMode result = com.nibiru.creator.data.HotPotData.DisappearMode.valueOf(mDisappearMode_);
      return result == null ? com.nibiru.creator.data.HotPotData.DisappearMode.DisappearMode_ClickHidden : result;
    }

    public static final int M_IMAGEHOTPOT_FIELD_NUMBER = 8;
    private com.nibiru.creator.data.HotPotData.ImageHotPot mImageHotPot_;
    /**
     * <pre>
     *图片热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
     */
    public boolean hasMImageHotPot() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *图片热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
     */
    public com.nibiru.creator.data.HotPotData.ImageHotPot getMImageHotPot() {
      return mImageHotPot_ == null ? com.nibiru.creator.data.HotPotData.ImageHotPot.getDefaultInstance() : mImageHotPot_;
    }
    /**
     * <pre>
     *图片热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
     */
    public com.nibiru.creator.data.HotPotData.ImageHotPotOrBuilder getMImageHotPotOrBuilder() {
      return mImageHotPot_ == null ? com.nibiru.creator.data.HotPotData.ImageHotPot.getDefaultInstance() : mImageHotPot_;
    }

    public static final int M_VIDEOIMAGEHOTPOT_FIELD_NUMBER = 9;
    private com.nibiru.creator.data.HotPotData.VideoImageHotPot mVideoImageHotPot_;
    /**
     * <pre>
     *视频热点
     * </pre>
     *
     * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
     */
    public boolean hasMVideoImageHotPot() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     *视频热点
     * </pre>
     *
     * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
     */
    public com.nibiru.creator.data.HotPotData.VideoImageHotPot getMVideoImageHotPot() {
      return mVideoImageHotPot_ == null ? com.nibiru.creator.data.HotPotData.VideoImageHotPot.getDefaultInstance() : mVideoImageHotPot_;
    }
    /**
     * <pre>
     *视频热点
     * </pre>
     *
     * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
     */
    public com.nibiru.creator.data.HotPotData.VideoImageHotPotOrBuilder getMVideoImageHotPotOrBuilder() {
      return mVideoImageHotPot_ == null ? com.nibiru.creator.data.HotPotData.VideoImageHotPot.getDefaultInstance() : mVideoImageHotPot_;
    }

    public static final int M_LABELHOTPOT_FIELD_NUMBER = 10;
    private com.nibiru.creator.data.HotPotData.LabelHotPot mLabelHotPot_;
    /**
     * <pre>
     *文本热点
     * </pre>
     *
     * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
     */
    public boolean hasMLabelHotPot() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     *文本热点
     * </pre>
     *
     * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
     */
    public com.nibiru.creator.data.HotPotData.LabelHotPot getMLabelHotPot() {
      return mLabelHotPot_ == null ? com.nibiru.creator.data.HotPotData.LabelHotPot.getDefaultInstance() : mLabelHotPot_;
    }
    /**
     * <pre>
     *文本热点
     * </pre>
     *
     * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
     */
    public com.nibiru.creator.data.HotPotData.LabelHotPotOrBuilder getMLabelHotPotOrBuilder() {
      return mLabelHotPot_ == null ? com.nibiru.creator.data.HotPotData.LabelHotPot.getDefaultInstance() : mLabelHotPot_;
    }

    public static final int M_AUDIOHOTPOT_FIELD_NUMBER = 11;
    private com.nibiru.creator.data.HotPotData.AudioHotPot mAudioHotPot_;
    /**
     * <pre>
     *音频热点
     * </pre>
     *
     * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
     */
    public boolean hasMAudioHotPot() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     *音频热点
     * </pre>
     *
     * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
     */
    public com.nibiru.creator.data.HotPotData.AudioHotPot getMAudioHotPot() {
      return mAudioHotPot_ == null ? com.nibiru.creator.data.HotPotData.AudioHotPot.getDefaultInstance() : mAudioHotPot_;
    }
    /**
     * <pre>
     *音频热点
     * </pre>
     *
     * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
     */
    public com.nibiru.creator.data.HotPotData.AudioHotPotOrBuilder getMAudioHotPotOrBuilder() {
      return mAudioHotPot_ == null ? com.nibiru.creator.data.HotPotData.AudioHotPot.getDefaultInstance() : mAudioHotPot_;
    }

    public static final int M_SCENESWITCHHOTPOT_FIELD_NUMBER = 12;
    private com.nibiru.creator.data.HotPotData.SceneSwitchHotPot mSceneSwitchHotPot_;
    /**
     * <pre>
     *切换热点
     * </pre>
     *
     * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
     */
    public boolean hasMSceneSwitchHotPot() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     *切换热点
     * </pre>
     *
     * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
     */
    public com.nibiru.creator.data.HotPotData.SceneSwitchHotPot getMSceneSwitchHotPot() {
      return mSceneSwitchHotPot_ == null ? com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.getDefaultInstance() : mSceneSwitchHotPot_;
    }
    /**
     * <pre>
     *切换热点
     * </pre>
     *
     * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
     */
    public com.nibiru.creator.data.HotPotData.SceneSwitchHotPotOrBuilder getMSceneSwitchHotPotOrBuilder() {
      return mSceneSwitchHotPot_ == null ? com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.getDefaultInstance() : mSceneSwitchHotPot_;
    }

    public static final int M_IMAGELISTHOTPOT_FIELD_NUMBER = 13;
    private com.nibiru.creator.data.HotPotData.ImageListHotPot mImageListHotPot_;
    /**
     * <pre>
     *图集热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
     */
    public boolean hasMImageListHotPot() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     *图集热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
     */
    public com.nibiru.creator.data.HotPotData.ImageListHotPot getMImageListHotPot() {
      return mImageListHotPot_ == null ? com.nibiru.creator.data.HotPotData.ImageListHotPot.getDefaultInstance() : mImageListHotPot_;
    }
    /**
     * <pre>
     *图集热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
     */
    public com.nibiru.creator.data.HotPotData.ImageListHotPotOrBuilder getMImageListHotPotOrBuilder() {
      return mImageListHotPot_ == null ? com.nibiru.creator.data.HotPotData.ImageListHotPot.getDefaultInstance() : mImageListHotPot_;
    }

    public static final int M_IMAGETXTHOTPOT_FIELD_NUMBER = 14;
    private com.nibiru.creator.data.HotPotData.ImageTxtHotPot mImageTxtHotPot_;
    /**
     * <pre>
     *图文热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
     */
    public boolean hasMImageTxtHotPot() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     *图文热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
     */
    public com.nibiru.creator.data.HotPotData.ImageTxtHotPot getMImageTxtHotPot() {
      return mImageTxtHotPot_ == null ? com.nibiru.creator.data.HotPotData.ImageTxtHotPot.getDefaultInstance() : mImageTxtHotPot_;
    }
    /**
     * <pre>
     *图文热点
     * </pre>
     *
     * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
     */
    public com.nibiru.creator.data.HotPotData.ImageTxtHotPotOrBuilder getMImageTxtHotPotOrBuilder() {
      return mImageTxtHotPot_ == null ? com.nibiru.creator.data.HotPotData.ImageTxtHotPot.getDefaultInstance() : mImageTxtHotPot_;
    }

    public static final int M_STARTTIME_FIELD_NUMBER = 15;
    private long mStartTime_;
    /**
     * <pre>
     *开始时间
     * </pre>
     *
     * <code>optional int64 m_StartTime = 15;</code>
     */
    public boolean hasMStartTime() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <pre>
     *开始时间
     * </pre>
     *
     * <code>optional int64 m_StartTime = 15;</code>
     */
    public long getMStartTime() {
      return mStartTime_;
    }

    public static final int M_ENDTIME_FIELD_NUMBER = 16;
    private long mEndTime_;
    /**
     * <pre>
     *结束时间
     * </pre>
     *
     * <code>optional int64 m_EndTime = 16;</code>
     */
    public boolean hasMEndTime() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <pre>
     *结束时间
     * </pre>
     *
     * <code>optional int64 m_EndTime = 16;</code>
     */
    public long getMEndTime() {
      return mEndTime_;
    }

    public static final int M_STATE_FIELD_NUMBER = 17;
    private int mState_;
    /**
     * <pre>
     * 热点编辑状态（一体机端用）
     * </pre>
     *
     * <code>optional int32 m_State = 17;</code>
     */
    public boolean hasMState() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <pre>
     * 热点编辑状态（一体机端用）
     * </pre>
     *
     * <code>optional int32 m_State = 17;</code>
     */
    public int getMState() {
      return mState_;
    }

    public static final int M_LABELSIZE_FIELD_NUMBER = 18;
    private com.nibiru.creator.data.HotPotData.Vec2 mLabelSize_;
    /**
     * <pre>
     * 热点图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
     */
    public boolean hasMLabelSize() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <pre>
     * 热点图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMLabelSize() {
      return mLabelSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mLabelSize_;
    }
    /**
     * <pre>
     * 热点图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMLabelSizeOrBuilder() {
      return mLabelSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mLabelSize_;
    }

    public static final int M_RADIUS_FIELD_NUMBER = 19;
    private float mRadius_;
    /**
     * <pre>
     * 热点远近大小（一体机端用）
     * </pre>
     *
     * <code>optional float m_Radius = 19;</code>
     */
    public boolean hasMRadius() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <pre>
     * 热点远近大小（一体机端用）
     * </pre>
     *
     * <code>optional float m_Radius = 19;</code>
     */
    public float getMRadius() {
      return mRadius_;
    }

    public static final int M_MODELHOTPOT_FIELD_NUMBER = 20;
    private com.nibiru.creator.data.HotPotData.ModelHotPot mModelHotPot_;
    /**
     * <pre>
     *模型热点
     * </pre>
     *
     * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
     */
    public boolean hasMModelHotPot() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <pre>
     *模型热点
     * </pre>
     *
     * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
     */
    public com.nibiru.creator.data.HotPotData.ModelHotPot getMModelHotPot() {
      return mModelHotPot_ == null ? com.nibiru.creator.data.HotPotData.ModelHotPot.getDefaultInstance() : mModelHotPot_;
    }
    /**
     * <pre>
     *模型热点
     * </pre>
     *
     * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
     */
    public com.nibiru.creator.data.HotPotData.ModelHotPotOrBuilder getMModelHotPotOrBuilder() {
      return mModelHotPot_ == null ? com.nibiru.creator.data.HotPotData.ModelHotPot.getDefaultInstance() : mModelHotPot_;
    }

    public static final int HYPERLINKHOTSPOT_FIELD_NUMBER = 21;
    private com.nibiru.creator.data.HotPotData.HyperlinkHotspot hyperlinkHotspot_;
    /**
     * <pre>
     *超链接热点
     * </pre>
     *
     * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
     */
    public boolean hasHyperlinkHotspot() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <pre>
     *超链接热点
     * </pre>
     *
     * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
     */
    public com.nibiru.creator.data.HotPotData.HyperlinkHotspot getHyperlinkHotspot() {
      return hyperlinkHotspot_ == null ? com.nibiru.creator.data.HotPotData.HyperlinkHotspot.getDefaultInstance() : hyperlinkHotspot_;
    }
    /**
     * <pre>
     *超链接热点
     * </pre>
     *
     * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
     */
    public com.nibiru.creator.data.HotPotData.HyperlinkHotspotOrBuilder getHyperlinkHotspotOrBuilder() {
      return hyperlinkHotspot_ == null ? com.nibiru.creator.data.HotPotData.HyperlinkHotspot.getDefaultInstance() : hyperlinkHotspot_;
    }

    public static final int M_MATERIALID_FIELD_NUMBER = 22;
    private int mMaterialId_;
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 22;</code>
     */
    public boolean hasMMaterialId() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 22;</code>
     */
    public int getMMaterialId() {
      return mMaterialId_;
    }

    public static final int M_DISPLAYNAME_FIELD_NUMBER = 23;
    private volatile java.lang.Object mDisplayName_;
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 23;</code>
     */
    public boolean hasMDisplayName() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 23;</code>
     */
    public java.lang.String getMDisplayName() {
      java.lang.Object ref = mDisplayName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mDisplayName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 23;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMDisplayNameBytes() {
      java.lang.Object ref = mDisplayName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mDisplayName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_DISPLAYALIGN_FIELD_NUMBER = 24;
    private int mDisplayAlign_;
    /**
     * <pre>
     *热点内容显示位置， 0 下方，1 中间
     * </pre>
     *
     * <code>optional int32 m_DisplayAlign = 24;</code>
     */
    public boolean hasMDisplayAlign() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <pre>
     *热点内容显示位置， 0 下方，1 中间
     * </pre>
     *
     * <code>optional int32 m_DisplayAlign = 24;</code>
     */
    public int getMDisplayAlign() {
      return mDisplayAlign_;
    }

    public static final int M_CLICKLARGER_FIELD_NUMBER = 25;
    private long mClickLarger_;
    /**
     * <pre>
     *热点点击放大
     * </pre>
     *
     * <code>optional int64 m_ClickLarger = 25;</code>
     */
    public boolean hasMClickLarger() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <pre>
     *热点点击放大
     * </pre>
     *
     * <code>optional int64 m_ClickLarger = 25;</code>
     */
    public long getMClickLarger() {
      return mClickLarger_;
    }

    public static final int M_CLICKROTATE_FIELD_NUMBER = 26;
    private long mClickRotate_;
    /**
     * <pre>
     *热点点击旋转
     * </pre>
     *
     * <code>optional int64 m_ClickRotate = 26;</code>
     */
    public boolean hasMClickRotate() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <pre>
     *热点点击旋转
     * </pre>
     *
     * <code>optional int64 m_ClickRotate = 26;</code>
     */
    public long getMClickRotate() {
      return mClickRotate_;
    }

    public static final int M_CLICKAUDIOPATH_FIELD_NUMBER = 27;
    private volatile java.lang.Object mClickAudioPath_;
    /**
     * <pre>
     *热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 27;</code>
     */
    public boolean hasMClickAudioPath() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <pre>
     *热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 27;</code>
     */
    public java.lang.String getMClickAudioPath() {
      java.lang.Object ref = mClickAudioPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mClickAudioPath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 27;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMClickAudioPathBytes() {
      java.lang.Object ref = mClickAudioPath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mClickAudioPath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_FONTSIZE_FIELD_NUMBER = 28;
    private int mFontSize_;
    /**
     * <pre>
     *热点名称字体大小  
     * </pre>
     *
     * <code>optional int32 m_FontSize = 28 [default = 14];</code>
     */
    public boolean hasMFontSize() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <pre>
     *热点名称字体大小  
     * </pre>
     *
     * <code>optional int32 m_FontSize = 28 [default = 14];</code>
     */
    public int getMFontSize() {
      return mFontSize_;
    }

    public static final int M_EXHIBITSHOTPOT_FIELD_NUMBER = 29;
    private com.nibiru.creator.data.HotPotData.Exhibits3DHotspot mExhibitsHotPot_;
    /**
     * <pre>
     *Exhiits3D热点
     * </pre>
     *
     * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
     */
    public boolean hasMExhibitsHotPot() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <pre>
     *Exhiits3D热点
     * </pre>
     *
     * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
     */
    public com.nibiru.creator.data.HotPotData.Exhibits3DHotspot getMExhibitsHotPot() {
      return mExhibitsHotPot_ == null ? com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.getDefaultInstance() : mExhibitsHotPot_;
    }
    /**
     * <pre>
     *Exhiits3D热点
     * </pre>
     *
     * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
     */
    public com.nibiru.creator.data.HotPotData.Exhibits3DHotspotOrBuilder getMExhibitsHotPotOrBuilder() {
      return mExhibitsHotPot_ == null ? com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.getDefaultInstance() : mExhibitsHotPot_;
    }

    public static final int M_EXHIBITSARHOTPOT_FIELD_NUMBER = 30;
    private com.nibiru.creator.data.HotPotData.ExhibitsARHotspot mExhibitsARHotPot_;
    /**
     * <pre>
     *ExhiitsAR热点
     * </pre>
     *
     * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
     */
    public boolean hasMExhibitsARHotPot() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <pre>
     *ExhiitsAR热点
     * </pre>
     *
     * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
     */
    public com.nibiru.creator.data.HotPotData.ExhibitsARHotspot getMExhibitsARHotPot() {
      return mExhibitsARHotPot_ == null ? com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.getDefaultInstance() : mExhibitsARHotPot_;
    }
    /**
     * <pre>
     *ExhiitsAR热点
     * </pre>
     *
     * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
     */
    public com.nibiru.creator.data.HotPotData.ExhibitsARHotspotOrBuilder getMExhibitsARHotPotOrBuilder() {
      return mExhibitsARHotPot_ == null ? com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.getDefaultInstance() : mExhibitsARHotPot_;
    }

    public static final int M_APPEARANCELAYOUT_FIELD_NUMBER = 31;
    private int mAppearanceLayout_;
    /**
     * <pre>
     *热点图标布局位置， 1 右、 2 底部
     * </pre>
     *
     * <code>optional int32 m_appearanceLayout = 31;</code>
     */
    public boolean hasMAppearanceLayout() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <pre>
     *热点图标布局位置， 1 右、 2 底部
     * </pre>
     *
     * <code>optional int32 m_appearanceLayout = 31;</code>
     */
    public int getMAppearanceLayout() {
      return mAppearanceLayout_;
    }

    public static final int HOVERIMAGE_FIELD_NUMBER = 34;
    private volatile java.lang.Object hoverImage_;
    /**
     * <pre>
     *替换图片
     * </pre>
     *
     * <code>optional string hoverImage = 34;</code>
     */
    public boolean hasHoverImage() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <pre>
     *替换图片
     * </pre>
     *
     * <code>optional string hoverImage = 34;</code>
     */
    public java.lang.String getHoverImage() {
      java.lang.Object ref = hoverImage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          hoverImage_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *替换图片
     * </pre>
     *
     * <code>optional string hoverImage = 34;</code>
     */
    public com.nibiru.protobuf.ByteString
        getHoverImageBytes() {
      java.lang.Object ref = hoverImage_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hoverImage_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMHotPotID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAttribute()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMShowName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMAttribute().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMImageHotPot()) {
        if (!getMImageHotPot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMVideoImageHotPot()) {
        if (!getMVideoImageHotPot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMLabelHotPot()) {
        if (!getMLabelHotPot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMAudioHotPot()) {
        if (!getMAudioHotPot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMSceneSwitchHotPot()) {
        if (!getMSceneSwitchHotPot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMImageListHotPot()) {
        if (!getMImageListHotPot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMImageTxtHotPot()) {
        if (!getMImageTxtHotPot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMLabelSize()) {
        if (!getMLabelSize().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMModelHotPot()) {
        if (!getMModelHotPot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasHyperlinkHotspot()) {
        if (!getHyperlinkHotspot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mHotPotID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getMAttribute());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getMPosition());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 4, mName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, mShowName_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, mDisplayMode_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, mDisappearMode_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, getMImageHotPot());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, getMVideoImageHotPot());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, getMLabelHotPot());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, getMAudioHotPot());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, getMSceneSwitchHotPot());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, getMImageListHotPot());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(14, getMImageTxtHotPot());
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt64(15, mStartTime_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt64(16, mEndTime_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(17, mState_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(18, getMLabelSize());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(19, mRadius_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeMessage(20, getMModelHotPot());
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeMessage(21, getHyperlinkHotspot());
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(22, mMaterialId_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 23, mDisplayName_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(24, mDisplayAlign_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeInt64(25, mClickLarger_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeInt64(26, mClickRotate_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 27, mClickAudioPath_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(28, mFontSize_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeMessage(29, getMExhibitsHotPot());
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeMessage(30, getMExhibitsARHotPot());
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(31, mAppearanceLayout_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 34, hoverImage_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(1, mHotPotID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(2, getMAttribute());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(3, getMPosition());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(4, mName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(5, mShowName_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(6, mDisplayMode_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(7, mDisappearMode_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(8, getMImageHotPot());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(9, getMVideoImageHotPot());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(10, getMLabelHotPot());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(11, getMAudioHotPot());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(12, getMSceneSwitchHotPot());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(13, getMImageListHotPot());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(14, getMImageTxtHotPot());
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(15, mStartTime_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(16, mEndTime_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(17, mState_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(18, getMLabelSize());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(19, mRadius_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(20, getMModelHotPot());
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(21, getHyperlinkHotspot());
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(22, mMaterialId_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(23, mDisplayName_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(24, mDisplayAlign_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(25, mClickLarger_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(26, mClickRotate_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(27, mClickAudioPath_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(28, mFontSize_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(29, getMExhibitsHotPot());
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(30, getMExhibitsARHotPot());
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(31, mAppearanceLayout_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(34, hoverImage_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.HotPot)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.HotPot other = (com.nibiru.creator.data.HotPotData.HotPot) obj;

      boolean result = true;
      result = result && (hasMHotPotID() == other.hasMHotPotID());
      if (hasMHotPotID()) {
        result = result && (getMHotPotID()
            == other.getMHotPotID());
      }
      result = result && (hasMAttribute() == other.hasMAttribute());
      if (hasMAttribute()) {
        result = result && getMAttribute()
            .equals(other.getMAttribute());
      }
      result = result && (hasMPosition() == other.hasMPosition());
      if (hasMPosition()) {
        result = result && getMPosition()
            .equals(other.getMPosition());
      }
      result = result && (hasMName() == other.hasMName());
      if (hasMName()) {
        result = result && getMName()
            .equals(other.getMName());
      }
      result = result && (hasMShowName() == other.hasMShowName());
      if (hasMShowName()) {
        result = result && (getMShowName()
            == other.getMShowName());
      }
      result = result && (hasMDisplayMode() == other.hasMDisplayMode());
      if (hasMDisplayMode()) {
        result = result && mDisplayMode_ == other.mDisplayMode_;
      }
      result = result && (hasMDisappearMode() == other.hasMDisappearMode());
      if (hasMDisappearMode()) {
        result = result && mDisappearMode_ == other.mDisappearMode_;
      }
      result = result && (hasMImageHotPot() == other.hasMImageHotPot());
      if (hasMImageHotPot()) {
        result = result && getMImageHotPot()
            .equals(other.getMImageHotPot());
      }
      result = result && (hasMVideoImageHotPot() == other.hasMVideoImageHotPot());
      if (hasMVideoImageHotPot()) {
        result = result && getMVideoImageHotPot()
            .equals(other.getMVideoImageHotPot());
      }
      result = result && (hasMLabelHotPot() == other.hasMLabelHotPot());
      if (hasMLabelHotPot()) {
        result = result && getMLabelHotPot()
            .equals(other.getMLabelHotPot());
      }
      result = result && (hasMAudioHotPot() == other.hasMAudioHotPot());
      if (hasMAudioHotPot()) {
        result = result && getMAudioHotPot()
            .equals(other.getMAudioHotPot());
      }
      result = result && (hasMSceneSwitchHotPot() == other.hasMSceneSwitchHotPot());
      if (hasMSceneSwitchHotPot()) {
        result = result && getMSceneSwitchHotPot()
            .equals(other.getMSceneSwitchHotPot());
      }
      result = result && (hasMImageListHotPot() == other.hasMImageListHotPot());
      if (hasMImageListHotPot()) {
        result = result && getMImageListHotPot()
            .equals(other.getMImageListHotPot());
      }
      result = result && (hasMImageTxtHotPot() == other.hasMImageTxtHotPot());
      if (hasMImageTxtHotPot()) {
        result = result && getMImageTxtHotPot()
            .equals(other.getMImageTxtHotPot());
      }
      result = result && (hasMStartTime() == other.hasMStartTime());
      if (hasMStartTime()) {
        result = result && (getMStartTime()
            == other.getMStartTime());
      }
      result = result && (hasMEndTime() == other.hasMEndTime());
      if (hasMEndTime()) {
        result = result && (getMEndTime()
            == other.getMEndTime());
      }
      result = result && (hasMState() == other.hasMState());
      if (hasMState()) {
        result = result && (getMState()
            == other.getMState());
      }
      result = result && (hasMLabelSize() == other.hasMLabelSize());
      if (hasMLabelSize()) {
        result = result && getMLabelSize()
            .equals(other.getMLabelSize());
      }
      result = result && (hasMRadius() == other.hasMRadius());
      if (hasMRadius()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMRadius())
            == java.lang.Float.floatToIntBits(
                other.getMRadius()));
      }
      result = result && (hasMModelHotPot() == other.hasMModelHotPot());
      if (hasMModelHotPot()) {
        result = result && getMModelHotPot()
            .equals(other.getMModelHotPot());
      }
      result = result && (hasHyperlinkHotspot() == other.hasHyperlinkHotspot());
      if (hasHyperlinkHotspot()) {
        result = result && getHyperlinkHotspot()
            .equals(other.getHyperlinkHotspot());
      }
      result = result && (hasMMaterialId() == other.hasMMaterialId());
      if (hasMMaterialId()) {
        result = result && (getMMaterialId()
            == other.getMMaterialId());
      }
      result = result && (hasMDisplayName() == other.hasMDisplayName());
      if (hasMDisplayName()) {
        result = result && getMDisplayName()
            .equals(other.getMDisplayName());
      }
      result = result && (hasMDisplayAlign() == other.hasMDisplayAlign());
      if (hasMDisplayAlign()) {
        result = result && (getMDisplayAlign()
            == other.getMDisplayAlign());
      }
      result = result && (hasMClickLarger() == other.hasMClickLarger());
      if (hasMClickLarger()) {
        result = result && (getMClickLarger()
            == other.getMClickLarger());
      }
      result = result && (hasMClickRotate() == other.hasMClickRotate());
      if (hasMClickRotate()) {
        result = result && (getMClickRotate()
            == other.getMClickRotate());
      }
      result = result && (hasMClickAudioPath() == other.hasMClickAudioPath());
      if (hasMClickAudioPath()) {
        result = result && getMClickAudioPath()
            .equals(other.getMClickAudioPath());
      }
      result = result && (hasMFontSize() == other.hasMFontSize());
      if (hasMFontSize()) {
        result = result && (getMFontSize()
            == other.getMFontSize());
      }
      result = result && (hasMExhibitsHotPot() == other.hasMExhibitsHotPot());
      if (hasMExhibitsHotPot()) {
        result = result && getMExhibitsHotPot()
            .equals(other.getMExhibitsHotPot());
      }
      result = result && (hasMExhibitsARHotPot() == other.hasMExhibitsARHotPot());
      if (hasMExhibitsARHotPot()) {
        result = result && getMExhibitsARHotPot()
            .equals(other.getMExhibitsARHotPot());
      }
      result = result && (hasMAppearanceLayout() == other.hasMAppearanceLayout());
      if (hasMAppearanceLayout()) {
        result = result && (getMAppearanceLayout()
            == other.getMAppearanceLayout());
      }
      result = result && (hasHoverImage() == other.hasHoverImage());
      if (hasHoverImage()) {
        result = result && getHoverImage()
            .equals(other.getHoverImage());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMHotPotID()) {
        hash = (37 * hash) + M_HOTPOTID_FIELD_NUMBER;
        hash = (53 * hash) + getMHotPotID();
      }
      if (hasMAttribute()) {
        hash = (37 * hash) + M_ATTRIBUTE_FIELD_NUMBER;
        hash = (53 * hash) + getMAttribute().hashCode();
      }
      if (hasMPosition()) {
        hash = (37 * hash) + M_POSITION_FIELD_NUMBER;
        hash = (53 * hash) + getMPosition().hashCode();
      }
      if (hasMName()) {
        hash = (37 * hash) + M_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getMName().hashCode();
      }
      if (hasMShowName()) {
        hash = (37 * hash) + M_SHOWNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMShowName();
      }
      if (hasMDisplayMode()) {
        hash = (37 * hash) + M_DISPLAYMODE_FIELD_NUMBER;
        hash = (53 * hash) + mDisplayMode_;
      }
      if (hasMDisappearMode()) {
        hash = (37 * hash) + M_DISAPPEARMODE_FIELD_NUMBER;
        hash = (53 * hash) + mDisappearMode_;
      }
      if (hasMImageHotPot()) {
        hash = (37 * hash) + M_IMAGEHOTPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMImageHotPot().hashCode();
      }
      if (hasMVideoImageHotPot()) {
        hash = (37 * hash) + M_VIDEOIMAGEHOTPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMVideoImageHotPot().hashCode();
      }
      if (hasMLabelHotPot()) {
        hash = (37 * hash) + M_LABELHOTPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMLabelHotPot().hashCode();
      }
      if (hasMAudioHotPot()) {
        hash = (37 * hash) + M_AUDIOHOTPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMAudioHotPot().hashCode();
      }
      if (hasMSceneSwitchHotPot()) {
        hash = (37 * hash) + M_SCENESWITCHHOTPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneSwitchHotPot().hashCode();
      }
      if (hasMImageListHotPot()) {
        hash = (37 * hash) + M_IMAGELISTHOTPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMImageListHotPot().hashCode();
      }
      if (hasMImageTxtHotPot()) {
        hash = (37 * hash) + M_IMAGETXTHOTPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMImageTxtHotPot().hashCode();
      }
      if (hasMStartTime()) {
        hash = (37 * hash) + M_STARTTIME_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getMStartTime());
      }
      if (hasMEndTime()) {
        hash = (37 * hash) + M_ENDTIME_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getMEndTime());
      }
      if (hasMState()) {
        hash = (37 * hash) + M_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getMState();
      }
      if (hasMLabelSize()) {
        hash = (37 * hash) + M_LABELSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMLabelSize().hashCode();
      }
      if (hasMRadius()) {
        hash = (37 * hash) + M_RADIUS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMRadius());
      }
      if (hasMModelHotPot()) {
        hash = (37 * hash) + M_MODELHOTPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMModelHotPot().hashCode();
      }
      if (hasHyperlinkHotspot()) {
        hash = (37 * hash) + HYPERLINKHOTSPOT_FIELD_NUMBER;
        hash = (53 * hash) + getHyperlinkHotspot().hashCode();
      }
      if (hasMMaterialId()) {
        hash = (37 * hash) + M_MATERIALID_FIELD_NUMBER;
        hash = (53 * hash) + getMMaterialId();
      }
      if (hasMDisplayName()) {
        hash = (37 * hash) + M_DISPLAYNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMDisplayName().hashCode();
      }
      if (hasMDisplayAlign()) {
        hash = (37 * hash) + M_DISPLAYALIGN_FIELD_NUMBER;
        hash = (53 * hash) + getMDisplayAlign();
      }
      if (hasMClickLarger()) {
        hash = (37 * hash) + M_CLICKLARGER_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getMClickLarger());
      }
      if (hasMClickRotate()) {
        hash = (37 * hash) + M_CLICKROTATE_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getMClickRotate());
      }
      if (hasMClickAudioPath()) {
        hash = (37 * hash) + M_CLICKAUDIOPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMClickAudioPath().hashCode();
      }
      if (hasMFontSize()) {
        hash = (37 * hash) + M_FONTSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMFontSize();
      }
      if (hasMExhibitsHotPot()) {
        hash = (37 * hash) + M_EXHIBITSHOTPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMExhibitsHotPot().hashCode();
      }
      if (hasMExhibitsARHotPot()) {
        hash = (37 * hash) + M_EXHIBITSARHOTPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMExhibitsARHotPot().hashCode();
      }
      if (hasMAppearanceLayout()) {
        hash = (37 * hash) + M_APPEARANCELAYOUT_FIELD_NUMBER;
        hash = (53 * hash) + getMAppearanceLayout();
      }
      if (hasHoverImage()) {
        hash = (37 * hash) + HOVERIMAGE_FIELD_NUMBER;
        hash = (53 * hash) + getHoverImage().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.HotPot parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.HotPot parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPot parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.HotPot parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HotPot parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HotPot parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.HotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.HotPot parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.HotPot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 热点
     * </pre>
     *
     * Protobuf type {@code DataFactory.HotPot}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.HotPot)
        com.nibiru.creator.data.HotPotData.HotPotOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPot_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.HotPot.class, com.nibiru.creator.data.HotPotData.HotPot.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.HotPot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMAttributeFieldBuilder();
          getMPositionFieldBuilder();
          getMImageHotPotFieldBuilder();
          getMVideoImageHotPotFieldBuilder();
          getMLabelHotPotFieldBuilder();
          getMAudioHotPotFieldBuilder();
          getMSceneSwitchHotPotFieldBuilder();
          getMImageListHotPotFieldBuilder();
          getMImageTxtHotPotFieldBuilder();
          getMLabelSizeFieldBuilder();
          getMModelHotPotFieldBuilder();
          getHyperlinkHotspotFieldBuilder();
          getMExhibitsHotPotFieldBuilder();
          getMExhibitsARHotPotFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mHotPotID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (mAttributeBuilder_ == null) {
          mAttribute_ = null;
        } else {
          mAttributeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (mPositionBuilder_ == null) {
          mPosition_ = null;
        } else {
          mPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        mName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        mShowName_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mDisplayMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        mDisappearMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (mImageHotPotBuilder_ == null) {
          mImageHotPot_ = null;
        } else {
          mImageHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (mVideoImageHotPotBuilder_ == null) {
          mVideoImageHotPot_ = null;
        } else {
          mVideoImageHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (mLabelHotPotBuilder_ == null) {
          mLabelHotPot_ = null;
        } else {
          mLabelHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (mAudioHotPotBuilder_ == null) {
          mAudioHotPot_ = null;
        } else {
          mAudioHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (mSceneSwitchHotPotBuilder_ == null) {
          mSceneSwitchHotPot_ = null;
        } else {
          mSceneSwitchHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (mImageListHotPotBuilder_ == null) {
          mImageListHotPot_ = null;
        } else {
          mImageListHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (mImageTxtHotPotBuilder_ == null) {
          mImageTxtHotPot_ = null;
        } else {
          mImageTxtHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        mStartTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00004000);
        mEndTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00008000);
        mState_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        if (mLabelSizeBuilder_ == null) {
          mLabelSize_ = null;
        } else {
          mLabelSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        mRadius_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        if (mModelHotPotBuilder_ == null) {
          mModelHotPot_ = null;
        } else {
          mModelHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (hyperlinkHotspotBuilder_ == null) {
          hyperlinkHotspot_ = null;
        } else {
          hyperlinkHotspotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        mMaterialId_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        mDisplayName_ = "";
        bitField0_ = (bitField0_ & ~0x00400000);
        mDisplayAlign_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        mClickLarger_ = 0L;
        bitField0_ = (bitField0_ & ~0x01000000);
        mClickRotate_ = 0L;
        bitField0_ = (bitField0_ & ~0x02000000);
        mClickAudioPath_ = "";
        bitField0_ = (bitField0_ & ~0x04000000);
        mFontSize_ = 14;
        bitField0_ = (bitField0_ & ~0x08000000);
        if (mExhibitsHotPotBuilder_ == null) {
          mExhibitsHotPot_ = null;
        } else {
          mExhibitsHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        if (mExhibitsARHotPotBuilder_ == null) {
          mExhibitsARHotPot_ = null;
        } else {
          mExhibitsARHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        mAppearanceLayout_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        hoverImage_ = "";
        bitField0_ = (bitField0_ & ~0x80000000);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_HotPot_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.HotPot getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.HotPot build() {
        com.nibiru.creator.data.HotPotData.HotPot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.HotPot buildPartial() {
        com.nibiru.creator.data.HotPotData.HotPot result = new com.nibiru.creator.data.HotPotData.HotPot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mHotPotID_ = mHotPotID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (mAttributeBuilder_ == null) {
          result.mAttribute_ = mAttribute_;
        } else {
          result.mAttribute_ = mAttributeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (mPositionBuilder_ == null) {
          result.mPosition_ = mPosition_;
        } else {
          result.mPosition_ = mPositionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mName_ = mName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mShowName_ = mShowName_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mDisplayMode_ = mDisplayMode_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mDisappearMode_ = mDisappearMode_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (mImageHotPotBuilder_ == null) {
          result.mImageHotPot_ = mImageHotPot_;
        } else {
          result.mImageHotPot_ = mImageHotPotBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (mVideoImageHotPotBuilder_ == null) {
          result.mVideoImageHotPot_ = mVideoImageHotPot_;
        } else {
          result.mVideoImageHotPot_ = mVideoImageHotPotBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (mLabelHotPotBuilder_ == null) {
          result.mLabelHotPot_ = mLabelHotPot_;
        } else {
          result.mLabelHotPot_ = mLabelHotPotBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (mAudioHotPotBuilder_ == null) {
          result.mAudioHotPot_ = mAudioHotPot_;
        } else {
          result.mAudioHotPot_ = mAudioHotPotBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (mSceneSwitchHotPotBuilder_ == null) {
          result.mSceneSwitchHotPot_ = mSceneSwitchHotPot_;
        } else {
          result.mSceneSwitchHotPot_ = mSceneSwitchHotPotBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (mImageListHotPotBuilder_ == null) {
          result.mImageListHotPot_ = mImageListHotPot_;
        } else {
          result.mImageListHotPot_ = mImageListHotPotBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (mImageTxtHotPotBuilder_ == null) {
          result.mImageTxtHotPot_ = mImageTxtHotPot_;
        } else {
          result.mImageTxtHotPot_ = mImageTxtHotPotBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.mStartTime_ = mStartTime_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.mEndTime_ = mEndTime_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.mState_ = mState_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (mLabelSizeBuilder_ == null) {
          result.mLabelSize_ = mLabelSize_;
        } else {
          result.mLabelSize_ = mLabelSizeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.mRadius_ = mRadius_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        if (mModelHotPotBuilder_ == null) {
          result.mModelHotPot_ = mModelHotPot_;
        } else {
          result.mModelHotPot_ = mModelHotPotBuilder_.build();
        }
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        if (hyperlinkHotspotBuilder_ == null) {
          result.hyperlinkHotspot_ = hyperlinkHotspot_;
        } else {
          result.hyperlinkHotspot_ = hyperlinkHotspotBuilder_.build();
        }
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.mMaterialId_ = mMaterialId_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.mDisplayName_ = mDisplayName_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.mDisplayAlign_ = mDisplayAlign_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.mClickLarger_ = mClickLarger_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.mClickRotate_ = mClickRotate_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.mClickAudioPath_ = mClickAudioPath_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.mFontSize_ = mFontSize_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        if (mExhibitsHotPotBuilder_ == null) {
          result.mExhibitsHotPot_ = mExhibitsHotPot_;
        } else {
          result.mExhibitsHotPot_ = mExhibitsHotPotBuilder_.build();
        }
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        if (mExhibitsARHotPotBuilder_ == null) {
          result.mExhibitsARHotPot_ = mExhibitsARHotPot_;
        } else {
          result.mExhibitsARHotPot_ = mExhibitsARHotPotBuilder_.build();
        }
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.mAppearanceLayout_ = mAppearanceLayout_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.hoverImage_ = hoverImage_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.HotPot) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.HotPot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.HotPot other) {
        if (other == com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance()) return this;
        if (other.hasMHotPotID()) {
          setMHotPotID(other.getMHotPotID());
        }
        if (other.hasMAttribute()) {
          mergeMAttribute(other.getMAttribute());
        }
        if (other.hasMPosition()) {
          mergeMPosition(other.getMPosition());
        }
        if (other.hasMName()) {
          bitField0_ |= 0x00000008;
          mName_ = other.mName_;
          onChanged();
        }
        if (other.hasMShowName()) {
          setMShowName(other.getMShowName());
        }
        if (other.hasMDisplayMode()) {
          setMDisplayMode(other.getMDisplayMode());
        }
        if (other.hasMDisappearMode()) {
          setMDisappearMode(other.getMDisappearMode());
        }
        if (other.hasMImageHotPot()) {
          mergeMImageHotPot(other.getMImageHotPot());
        }
        if (other.hasMVideoImageHotPot()) {
          mergeMVideoImageHotPot(other.getMVideoImageHotPot());
        }
        if (other.hasMLabelHotPot()) {
          mergeMLabelHotPot(other.getMLabelHotPot());
        }
        if (other.hasMAudioHotPot()) {
          mergeMAudioHotPot(other.getMAudioHotPot());
        }
        if (other.hasMSceneSwitchHotPot()) {
          mergeMSceneSwitchHotPot(other.getMSceneSwitchHotPot());
        }
        if (other.hasMImageListHotPot()) {
          mergeMImageListHotPot(other.getMImageListHotPot());
        }
        if (other.hasMImageTxtHotPot()) {
          mergeMImageTxtHotPot(other.getMImageTxtHotPot());
        }
        if (other.hasMStartTime()) {
          setMStartTime(other.getMStartTime());
        }
        if (other.hasMEndTime()) {
          setMEndTime(other.getMEndTime());
        }
        if (other.hasMState()) {
          setMState(other.getMState());
        }
        if (other.hasMLabelSize()) {
          mergeMLabelSize(other.getMLabelSize());
        }
        if (other.hasMRadius()) {
          setMRadius(other.getMRadius());
        }
        if (other.hasMModelHotPot()) {
          mergeMModelHotPot(other.getMModelHotPot());
        }
        if (other.hasHyperlinkHotspot()) {
          mergeHyperlinkHotspot(other.getHyperlinkHotspot());
        }
        if (other.hasMMaterialId()) {
          setMMaterialId(other.getMMaterialId());
        }
        if (other.hasMDisplayName()) {
          bitField0_ |= 0x00400000;
          mDisplayName_ = other.mDisplayName_;
          onChanged();
        }
        if (other.hasMDisplayAlign()) {
          setMDisplayAlign(other.getMDisplayAlign());
        }
        if (other.hasMClickLarger()) {
          setMClickLarger(other.getMClickLarger());
        }
        if (other.hasMClickRotate()) {
          setMClickRotate(other.getMClickRotate());
        }
        if (other.hasMClickAudioPath()) {
          bitField0_ |= 0x04000000;
          mClickAudioPath_ = other.mClickAudioPath_;
          onChanged();
        }
        if (other.hasMFontSize()) {
          setMFontSize(other.getMFontSize());
        }
        if (other.hasMExhibitsHotPot()) {
          mergeMExhibitsHotPot(other.getMExhibitsHotPot());
        }
        if (other.hasMExhibitsARHotPot()) {
          mergeMExhibitsARHotPot(other.getMExhibitsARHotPot());
        }
        if (other.hasMAppearanceLayout()) {
          setMAppearanceLayout(other.getMAppearanceLayout());
        }
        if (other.hasHoverImage()) {
          bitField0_ |= 0x80000000;
          hoverImage_ = other.hoverImage_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMHotPotID()) {
          return false;
        }
        if (!hasMAttribute()) {
          return false;
        }
        if (!hasMPosition()) {
          return false;
        }
        if (!hasMName()) {
          return false;
        }
        if (!hasMShowName()) {
          return false;
        }
        if (!getMAttribute().isInitialized()) {
          return false;
        }
        if (!getMPosition().isInitialized()) {
          return false;
        }
        if (hasMImageHotPot()) {
          if (!getMImageHotPot().isInitialized()) {
            return false;
          }
        }
        if (hasMVideoImageHotPot()) {
          if (!getMVideoImageHotPot().isInitialized()) {
            return false;
          }
        }
        if (hasMLabelHotPot()) {
          if (!getMLabelHotPot().isInitialized()) {
            return false;
          }
        }
        if (hasMAudioHotPot()) {
          if (!getMAudioHotPot().isInitialized()) {
            return false;
          }
        }
        if (hasMSceneSwitchHotPot()) {
          if (!getMSceneSwitchHotPot().isInitialized()) {
            return false;
          }
        }
        if (hasMImageListHotPot()) {
          if (!getMImageListHotPot().isInitialized()) {
            return false;
          }
        }
        if (hasMImageTxtHotPot()) {
          if (!getMImageTxtHotPot().isInitialized()) {
            return false;
          }
        }
        if (hasMLabelSize()) {
          if (!getMLabelSize().isInitialized()) {
            return false;
          }
        }
        if (hasMModelHotPot()) {
          if (!getMModelHotPot().isInitialized()) {
            return false;
          }
        }
        if (hasHyperlinkHotspot()) {
          if (!getHyperlinkHotspot().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.HotPot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.HotPot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int mHotPotID_ ;
      /**
       * <pre>
       *热点ID
       * </pre>
       *
       * <code>required int32 m_HotPotID = 1;</code>
       */
      public boolean hasMHotPotID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *热点ID
       * </pre>
       *
       * <code>required int32 m_HotPotID = 1;</code>
       */
      public int getMHotPotID() {
        return mHotPotID_;
      }
      /**
       * <pre>
       *热点ID
       * </pre>
       *
       * <code>required int32 m_HotPotID = 1;</code>
       */
      public Builder setMHotPotID(int value) {
        bitField0_ |= 0x00000001;
        mHotPotID_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点ID
       * </pre>
       *
       * <code>required int32 m_HotPotID = 1;</code>
       */
      public Builder clearMHotPotID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mHotPotID_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.HotPotAttribute mAttribute_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPotAttribute, com.nibiru.creator.data.HotPotData.HotPotAttribute.Builder, com.nibiru.creator.data.HotPotData.HotPotAttributeOrBuilder> mAttributeBuilder_;
      /**
       * <pre>
       *热点属性
       * </pre>
       *
       * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
       */
      public boolean hasMAttribute() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *热点属性
       * </pre>
       *
       * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotAttribute getMAttribute() {
        if (mAttributeBuilder_ == null) {
          return mAttribute_ == null ? com.nibiru.creator.data.HotPotData.HotPotAttribute.getDefaultInstance() : mAttribute_;
        } else {
          return mAttributeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *热点属性
       * </pre>
       *
       * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
       */
      public Builder setMAttribute(com.nibiru.creator.data.HotPotData.HotPotAttribute value) {
        if (mAttributeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mAttribute_ = value;
          onChanged();
        } else {
          mAttributeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *热点属性
       * </pre>
       *
       * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
       */
      public Builder setMAttribute(
          com.nibiru.creator.data.HotPotData.HotPotAttribute.Builder builderForValue) {
        if (mAttributeBuilder_ == null) {
          mAttribute_ = builderForValue.build();
          onChanged();
        } else {
          mAttributeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *热点属性
       * </pre>
       *
       * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
       */
      public Builder mergeMAttribute(com.nibiru.creator.data.HotPotData.HotPotAttribute value) {
        if (mAttributeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              mAttribute_ != null &&
              mAttribute_ != com.nibiru.creator.data.HotPotData.HotPotAttribute.getDefaultInstance()) {
            mAttribute_ =
              com.nibiru.creator.data.HotPotData.HotPotAttribute.newBuilder(mAttribute_).mergeFrom(value).buildPartial();
          } else {
            mAttribute_ = value;
          }
          onChanged();
        } else {
          mAttributeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *热点属性
       * </pre>
       *
       * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
       */
      public Builder clearMAttribute() {
        if (mAttributeBuilder_ == null) {
          mAttribute_ = null;
          onChanged();
        } else {
          mAttributeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       *热点属性
       * </pre>
       *
       * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotAttribute.Builder getMAttributeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMAttributeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *热点属性
       * </pre>
       *
       * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotAttributeOrBuilder getMAttributeOrBuilder() {
        if (mAttributeBuilder_ != null) {
          return mAttributeBuilder_.getMessageOrBuilder();
        } else {
          return mAttribute_ == null ?
              com.nibiru.creator.data.HotPotData.HotPotAttribute.getDefaultInstance() : mAttribute_;
        }
      }
      /**
       * <pre>
       *热点属性
       * </pre>
       *
       * <code>required .DataFactory.HotPotAttribute m_Attribute = 2;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPotAttribute, com.nibiru.creator.data.HotPotData.HotPotAttribute.Builder, com.nibiru.creator.data.HotPotData.HotPotAttributeOrBuilder> 
          getMAttributeFieldBuilder() {
        if (mAttributeBuilder_ == null) {
          mAttributeBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.HotPotAttribute, com.nibiru.creator.data.HotPotData.HotPotAttribute.Builder, com.nibiru.creator.data.HotPotData.HotPotAttributeOrBuilder>(
                  getMAttribute(),
                  getParentForChildren(),
                  isClean());
          mAttribute_ = null;
        }
        return mAttributeBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mPosition_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mPositionBuilder_;
      /**
       * <pre>
       *热点在场景中的位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 3;</code>
       */
      public boolean hasMPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *热点在场景中的位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMPosition() {
        if (mPositionBuilder_ == null) {
          return mPosition_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
        } else {
          return mPositionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *热点在场景中的位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 3;</code>
       */
      public Builder setMPosition(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mPosition_ = value;
          onChanged();
        } else {
          mPositionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *热点在场景中的位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 3;</code>
       */
      public Builder setMPosition(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mPositionBuilder_ == null) {
          mPosition_ = builderForValue.build();
          onChanged();
        } else {
          mPositionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *热点在场景中的位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 3;</code>
       */
      public Builder mergeMPosition(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mPositionBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              mPosition_ != null &&
              mPosition_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mPosition_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mPosition_).mergeFrom(value).buildPartial();
          } else {
            mPosition_ = value;
          }
          onChanged();
        } else {
          mPositionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *热点在场景中的位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 3;</code>
       */
      public Builder clearMPosition() {
        if (mPositionBuilder_ == null) {
          mPosition_ = null;
          onChanged();
        } else {
          mPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       *热点在场景中的位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMPositionBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMPositionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *热点在场景中的位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMPositionOrBuilder() {
        if (mPositionBuilder_ != null) {
          return mPositionBuilder_.getMessageOrBuilder();
        } else {
          return mPosition_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
        }
      }
      /**
       * <pre>
       *热点在场景中的位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 3;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMPositionFieldBuilder() {
        if (mPositionBuilder_ == null) {
          mPositionBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMPosition(),
                  getParentForChildren(),
                  isClean());
          mPosition_ = null;
        }
        return mPositionBuilder_;
      }

      private java.lang.Object mName_ = "";
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_Name = 4;</code>
       */
      public boolean hasMName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_Name = 4;</code>
       */
      public java.lang.String getMName() {
        java.lang.Object ref = mName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_Name = 4;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMNameBytes() {
        java.lang.Object ref = mName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_Name = 4;</code>
       */
      public Builder setMName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_Name = 4;</code>
       */
      public Builder clearMName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mName_ = getDefaultInstance().getMName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点名称
       * </pre>
       *
       * <code>required string m_Name = 4;</code>
       */
      public Builder setMNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mName_ = value;
        onChanged();
        return this;
      }

      private int mShowName_ ;
      /**
       * <pre>
       *是否显示热点名称
       * </pre>
       *
       * <code>required int32 m_ShowName = 5;</code>
       */
      public boolean hasMShowName() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *是否显示热点名称
       * </pre>
       *
       * <code>required int32 m_ShowName = 5;</code>
       */
      public int getMShowName() {
        return mShowName_;
      }
      /**
       * <pre>
       *是否显示热点名称
       * </pre>
       *
       * <code>required int32 m_ShowName = 5;</code>
       */
      public Builder setMShowName(int value) {
        bitField0_ |= 0x00000010;
        mShowName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *是否显示热点名称
       * </pre>
       *
       * <code>required int32 m_ShowName = 5;</code>
       */
      public Builder clearMShowName() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mShowName_ = 0;
        onChanged();
        return this;
      }

      private int mDisplayMode_ = 0;
      /**
       * <pre>
       *触发方式
       * </pre>
       *
       * <code>optional .DataFactory.DisplayMode m_DisplayMode = 6;</code>
       */
      public boolean hasMDisplayMode() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *触发方式
       * </pre>
       *
       * <code>optional .DataFactory.DisplayMode m_DisplayMode = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.DisplayMode getMDisplayMode() {
        com.nibiru.creator.data.HotPotData.DisplayMode result = com.nibiru.creator.data.HotPotData.DisplayMode.valueOf(mDisplayMode_);
        return result == null ? com.nibiru.creator.data.HotPotData.DisplayMode.DisplayMode_ClickShow : result;
      }
      /**
       * <pre>
       *触发方式
       * </pre>
       *
       * <code>optional .DataFactory.DisplayMode m_DisplayMode = 6;</code>
       */
      public Builder setMDisplayMode(com.nibiru.creator.data.HotPotData.DisplayMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        mDisplayMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *触发方式
       * </pre>
       *
       * <code>optional .DataFactory.DisplayMode m_DisplayMode = 6;</code>
       */
      public Builder clearMDisplayMode() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mDisplayMode_ = 0;
        onChanged();
        return this;
      }

      private int mDisappearMode_ = 0;
      /**
       * <pre>
       *消失方式
       * </pre>
       *
       * <code>optional .DataFactory.DisappearMode m_DisappearMode = 7;</code>
       */
      public boolean hasMDisappearMode() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *消失方式
       * </pre>
       *
       * <code>optional .DataFactory.DisappearMode m_DisappearMode = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.DisappearMode getMDisappearMode() {
        com.nibiru.creator.data.HotPotData.DisappearMode result = com.nibiru.creator.data.HotPotData.DisappearMode.valueOf(mDisappearMode_);
        return result == null ? com.nibiru.creator.data.HotPotData.DisappearMode.DisappearMode_ClickHidden : result;
      }
      /**
       * <pre>
       *消失方式
       * </pre>
       *
       * <code>optional .DataFactory.DisappearMode m_DisappearMode = 7;</code>
       */
      public Builder setMDisappearMode(com.nibiru.creator.data.HotPotData.DisappearMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        mDisappearMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *消失方式
       * </pre>
       *
       * <code>optional .DataFactory.DisappearMode m_DisappearMode = 7;</code>
       */
      public Builder clearMDisappearMode() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mDisappearMode_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.ImageHotPot mImageHotPot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ImageHotPot, com.nibiru.creator.data.HotPotData.ImageHotPot.Builder, com.nibiru.creator.data.HotPotData.ImageHotPotOrBuilder> mImageHotPotBuilder_;
      /**
       * <pre>
       *图片热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
       */
      public boolean hasMImageHotPot() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       *图片热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageHotPot getMImageHotPot() {
        if (mImageHotPotBuilder_ == null) {
          return mImageHotPot_ == null ? com.nibiru.creator.data.HotPotData.ImageHotPot.getDefaultInstance() : mImageHotPot_;
        } else {
          return mImageHotPotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *图片热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
       */
      public Builder setMImageHotPot(com.nibiru.creator.data.HotPotData.ImageHotPot value) {
        if (mImageHotPotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mImageHotPot_ = value;
          onChanged();
        } else {
          mImageHotPotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       *图片热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
       */
      public Builder setMImageHotPot(
          com.nibiru.creator.data.HotPotData.ImageHotPot.Builder builderForValue) {
        if (mImageHotPotBuilder_ == null) {
          mImageHotPot_ = builderForValue.build();
          onChanged();
        } else {
          mImageHotPotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       *图片热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
       */
      public Builder mergeMImageHotPot(com.nibiru.creator.data.HotPotData.ImageHotPot value) {
        if (mImageHotPotBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              mImageHotPot_ != null &&
              mImageHotPot_ != com.nibiru.creator.data.HotPotData.ImageHotPot.getDefaultInstance()) {
            mImageHotPot_ =
              com.nibiru.creator.data.HotPotData.ImageHotPot.newBuilder(mImageHotPot_).mergeFrom(value).buildPartial();
          } else {
            mImageHotPot_ = value;
          }
          onChanged();
        } else {
          mImageHotPotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       *图片热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
       */
      public Builder clearMImageHotPot() {
        if (mImageHotPotBuilder_ == null) {
          mImageHotPot_ = null;
          onChanged();
        } else {
          mImageHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <pre>
       *图片热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageHotPot.Builder getMImageHotPotBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getMImageHotPotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *图片热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageHotPotOrBuilder getMImageHotPotOrBuilder() {
        if (mImageHotPotBuilder_ != null) {
          return mImageHotPotBuilder_.getMessageOrBuilder();
        } else {
          return mImageHotPot_ == null ?
              com.nibiru.creator.data.HotPotData.ImageHotPot.getDefaultInstance() : mImageHotPot_;
        }
      }
      /**
       * <pre>
       *图片热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageHotPot m_ImageHotPot = 8;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ImageHotPot, com.nibiru.creator.data.HotPotData.ImageHotPot.Builder, com.nibiru.creator.data.HotPotData.ImageHotPotOrBuilder> 
          getMImageHotPotFieldBuilder() {
        if (mImageHotPotBuilder_ == null) {
          mImageHotPotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.ImageHotPot, com.nibiru.creator.data.HotPotData.ImageHotPot.Builder, com.nibiru.creator.data.HotPotData.ImageHotPotOrBuilder>(
                  getMImageHotPot(),
                  getParentForChildren(),
                  isClean());
          mImageHotPot_ = null;
        }
        return mImageHotPotBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.VideoImageHotPot mVideoImageHotPot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.VideoImageHotPot, com.nibiru.creator.data.HotPotData.VideoImageHotPot.Builder, com.nibiru.creator.data.HotPotData.VideoImageHotPotOrBuilder> mVideoImageHotPotBuilder_;
      /**
       * <pre>
       *视频热点
       * </pre>
       *
       * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
       */
      public boolean hasMVideoImageHotPot() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       *视频热点
       * </pre>
       *
       * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.VideoImageHotPot getMVideoImageHotPot() {
        if (mVideoImageHotPotBuilder_ == null) {
          return mVideoImageHotPot_ == null ? com.nibiru.creator.data.HotPotData.VideoImageHotPot.getDefaultInstance() : mVideoImageHotPot_;
        } else {
          return mVideoImageHotPotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *视频热点
       * </pre>
       *
       * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
       */
      public Builder setMVideoImageHotPot(com.nibiru.creator.data.HotPotData.VideoImageHotPot value) {
        if (mVideoImageHotPotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mVideoImageHotPot_ = value;
          onChanged();
        } else {
          mVideoImageHotPotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *视频热点
       * </pre>
       *
       * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
       */
      public Builder setMVideoImageHotPot(
          com.nibiru.creator.data.HotPotData.VideoImageHotPot.Builder builderForValue) {
        if (mVideoImageHotPotBuilder_ == null) {
          mVideoImageHotPot_ = builderForValue.build();
          onChanged();
        } else {
          mVideoImageHotPotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *视频热点
       * </pre>
       *
       * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
       */
      public Builder mergeMVideoImageHotPot(com.nibiru.creator.data.HotPotData.VideoImageHotPot value) {
        if (mVideoImageHotPotBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              mVideoImageHotPot_ != null &&
              mVideoImageHotPot_ != com.nibiru.creator.data.HotPotData.VideoImageHotPot.getDefaultInstance()) {
            mVideoImageHotPot_ =
              com.nibiru.creator.data.HotPotData.VideoImageHotPot.newBuilder(mVideoImageHotPot_).mergeFrom(value).buildPartial();
          } else {
            mVideoImageHotPot_ = value;
          }
          onChanged();
        } else {
          mVideoImageHotPotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *视频热点
       * </pre>
       *
       * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
       */
      public Builder clearMVideoImageHotPot() {
        if (mVideoImageHotPotBuilder_ == null) {
          mVideoImageHotPot_ = null;
          onChanged();
        } else {
          mVideoImageHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <pre>
       *视频热点
       * </pre>
       *
       * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.VideoImageHotPot.Builder getMVideoImageHotPotBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getMVideoImageHotPotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *视频热点
       * </pre>
       *
       * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.VideoImageHotPotOrBuilder getMVideoImageHotPotOrBuilder() {
        if (mVideoImageHotPotBuilder_ != null) {
          return mVideoImageHotPotBuilder_.getMessageOrBuilder();
        } else {
          return mVideoImageHotPot_ == null ?
              com.nibiru.creator.data.HotPotData.VideoImageHotPot.getDefaultInstance() : mVideoImageHotPot_;
        }
      }
      /**
       * <pre>
       *视频热点
       * </pre>
       *
       * <code>optional .DataFactory.VideoImageHotPot m_VideoImageHotPot = 9;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.VideoImageHotPot, com.nibiru.creator.data.HotPotData.VideoImageHotPot.Builder, com.nibiru.creator.data.HotPotData.VideoImageHotPotOrBuilder> 
          getMVideoImageHotPotFieldBuilder() {
        if (mVideoImageHotPotBuilder_ == null) {
          mVideoImageHotPotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.VideoImageHotPot, com.nibiru.creator.data.HotPotData.VideoImageHotPot.Builder, com.nibiru.creator.data.HotPotData.VideoImageHotPotOrBuilder>(
                  getMVideoImageHotPot(),
                  getParentForChildren(),
                  isClean());
          mVideoImageHotPot_ = null;
        }
        return mVideoImageHotPotBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.LabelHotPot mLabelHotPot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.LabelHotPot, com.nibiru.creator.data.HotPotData.LabelHotPot.Builder, com.nibiru.creator.data.HotPotData.LabelHotPotOrBuilder> mLabelHotPotBuilder_;
      /**
       * <pre>
       *文本热点
       * </pre>
       *
       * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
       */
      public boolean hasMLabelHotPot() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       *文本热点
       * </pre>
       *
       * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
       */
      public com.nibiru.creator.data.HotPotData.LabelHotPot getMLabelHotPot() {
        if (mLabelHotPotBuilder_ == null) {
          return mLabelHotPot_ == null ? com.nibiru.creator.data.HotPotData.LabelHotPot.getDefaultInstance() : mLabelHotPot_;
        } else {
          return mLabelHotPotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *文本热点
       * </pre>
       *
       * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
       */
      public Builder setMLabelHotPot(com.nibiru.creator.data.HotPotData.LabelHotPot value) {
        if (mLabelHotPotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mLabelHotPot_ = value;
          onChanged();
        } else {
          mLabelHotPotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       *文本热点
       * </pre>
       *
       * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
       */
      public Builder setMLabelHotPot(
          com.nibiru.creator.data.HotPotData.LabelHotPot.Builder builderForValue) {
        if (mLabelHotPotBuilder_ == null) {
          mLabelHotPot_ = builderForValue.build();
          onChanged();
        } else {
          mLabelHotPotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       *文本热点
       * </pre>
       *
       * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
       */
      public Builder mergeMLabelHotPot(com.nibiru.creator.data.HotPotData.LabelHotPot value) {
        if (mLabelHotPotBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              mLabelHotPot_ != null &&
              mLabelHotPot_ != com.nibiru.creator.data.HotPotData.LabelHotPot.getDefaultInstance()) {
            mLabelHotPot_ =
              com.nibiru.creator.data.HotPotData.LabelHotPot.newBuilder(mLabelHotPot_).mergeFrom(value).buildPartial();
          } else {
            mLabelHotPot_ = value;
          }
          onChanged();
        } else {
          mLabelHotPotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       *文本热点
       * </pre>
       *
       * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
       */
      public Builder clearMLabelHotPot() {
        if (mLabelHotPotBuilder_ == null) {
          mLabelHotPot_ = null;
          onChanged();
        } else {
          mLabelHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <pre>
       *文本热点
       * </pre>
       *
       * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
       */
      public com.nibiru.creator.data.HotPotData.LabelHotPot.Builder getMLabelHotPotBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getMLabelHotPotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *文本热点
       * </pre>
       *
       * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
       */
      public com.nibiru.creator.data.HotPotData.LabelHotPotOrBuilder getMLabelHotPotOrBuilder() {
        if (mLabelHotPotBuilder_ != null) {
          return mLabelHotPotBuilder_.getMessageOrBuilder();
        } else {
          return mLabelHotPot_ == null ?
              com.nibiru.creator.data.HotPotData.LabelHotPot.getDefaultInstance() : mLabelHotPot_;
        }
      }
      /**
       * <pre>
       *文本热点
       * </pre>
       *
       * <code>optional .DataFactory.LabelHotPot m_LabelHotPot = 10;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.LabelHotPot, com.nibiru.creator.data.HotPotData.LabelHotPot.Builder, com.nibiru.creator.data.HotPotData.LabelHotPotOrBuilder> 
          getMLabelHotPotFieldBuilder() {
        if (mLabelHotPotBuilder_ == null) {
          mLabelHotPotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.LabelHotPot, com.nibiru.creator.data.HotPotData.LabelHotPot.Builder, com.nibiru.creator.data.HotPotData.LabelHotPotOrBuilder>(
                  getMLabelHotPot(),
                  getParentForChildren(),
                  isClean());
          mLabelHotPot_ = null;
        }
        return mLabelHotPotBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.AudioHotPot mAudioHotPot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.AudioHotPot, com.nibiru.creator.data.HotPotData.AudioHotPot.Builder, com.nibiru.creator.data.HotPotData.AudioHotPotOrBuilder> mAudioHotPotBuilder_;
      /**
       * <pre>
       *音频热点
       * </pre>
       *
       * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
       */
      public boolean hasMAudioHotPot() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       *音频热点
       * </pre>
       *
       * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.AudioHotPot getMAudioHotPot() {
        if (mAudioHotPotBuilder_ == null) {
          return mAudioHotPot_ == null ? com.nibiru.creator.data.HotPotData.AudioHotPot.getDefaultInstance() : mAudioHotPot_;
        } else {
          return mAudioHotPotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *音频热点
       * </pre>
       *
       * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
       */
      public Builder setMAudioHotPot(com.nibiru.creator.data.HotPotData.AudioHotPot value) {
        if (mAudioHotPotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mAudioHotPot_ = value;
          onChanged();
        } else {
          mAudioHotPotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *音频热点
       * </pre>
       *
       * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
       */
      public Builder setMAudioHotPot(
          com.nibiru.creator.data.HotPotData.AudioHotPot.Builder builderForValue) {
        if (mAudioHotPotBuilder_ == null) {
          mAudioHotPot_ = builderForValue.build();
          onChanged();
        } else {
          mAudioHotPotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *音频热点
       * </pre>
       *
       * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
       */
      public Builder mergeMAudioHotPot(com.nibiru.creator.data.HotPotData.AudioHotPot value) {
        if (mAudioHotPotBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              mAudioHotPot_ != null &&
              mAudioHotPot_ != com.nibiru.creator.data.HotPotData.AudioHotPot.getDefaultInstance()) {
            mAudioHotPot_ =
              com.nibiru.creator.data.HotPotData.AudioHotPot.newBuilder(mAudioHotPot_).mergeFrom(value).buildPartial();
          } else {
            mAudioHotPot_ = value;
          }
          onChanged();
        } else {
          mAudioHotPotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *音频热点
       * </pre>
       *
       * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
       */
      public Builder clearMAudioHotPot() {
        if (mAudioHotPotBuilder_ == null) {
          mAudioHotPot_ = null;
          onChanged();
        } else {
          mAudioHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <pre>
       *音频热点
       * </pre>
       *
       * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.AudioHotPot.Builder getMAudioHotPotBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getMAudioHotPotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *音频热点
       * </pre>
       *
       * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.AudioHotPotOrBuilder getMAudioHotPotOrBuilder() {
        if (mAudioHotPotBuilder_ != null) {
          return mAudioHotPotBuilder_.getMessageOrBuilder();
        } else {
          return mAudioHotPot_ == null ?
              com.nibiru.creator.data.HotPotData.AudioHotPot.getDefaultInstance() : mAudioHotPot_;
        }
      }
      /**
       * <pre>
       *音频热点
       * </pre>
       *
       * <code>optional .DataFactory.AudioHotPot m_AudioHotPot = 11;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.AudioHotPot, com.nibiru.creator.data.HotPotData.AudioHotPot.Builder, com.nibiru.creator.data.HotPotData.AudioHotPotOrBuilder> 
          getMAudioHotPotFieldBuilder() {
        if (mAudioHotPotBuilder_ == null) {
          mAudioHotPotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.AudioHotPot, com.nibiru.creator.data.HotPotData.AudioHotPot.Builder, com.nibiru.creator.data.HotPotData.AudioHotPotOrBuilder>(
                  getMAudioHotPot(),
                  getParentForChildren(),
                  isClean());
          mAudioHotPot_ = null;
        }
        return mAudioHotPotBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.SceneSwitchHotPot mSceneSwitchHotPot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SceneSwitchHotPot, com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.Builder, com.nibiru.creator.data.HotPotData.SceneSwitchHotPotOrBuilder> mSceneSwitchHotPotBuilder_;
      /**
       * <pre>
       *切换热点
       * </pre>
       *
       * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
       */
      public boolean hasMSceneSwitchHotPot() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       *切换热点
       * </pre>
       *
       * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
       */
      public com.nibiru.creator.data.HotPotData.SceneSwitchHotPot getMSceneSwitchHotPot() {
        if (mSceneSwitchHotPotBuilder_ == null) {
          return mSceneSwitchHotPot_ == null ? com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.getDefaultInstance() : mSceneSwitchHotPot_;
        } else {
          return mSceneSwitchHotPotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *切换热点
       * </pre>
       *
       * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
       */
      public Builder setMSceneSwitchHotPot(com.nibiru.creator.data.HotPotData.SceneSwitchHotPot value) {
        if (mSceneSwitchHotPotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mSceneSwitchHotPot_ = value;
          onChanged();
        } else {
          mSceneSwitchHotPotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <pre>
       *切换热点
       * </pre>
       *
       * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
       */
      public Builder setMSceneSwitchHotPot(
          com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.Builder builderForValue) {
        if (mSceneSwitchHotPotBuilder_ == null) {
          mSceneSwitchHotPot_ = builderForValue.build();
          onChanged();
        } else {
          mSceneSwitchHotPotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <pre>
       *切换热点
       * </pre>
       *
       * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
       */
      public Builder mergeMSceneSwitchHotPot(com.nibiru.creator.data.HotPotData.SceneSwitchHotPot value) {
        if (mSceneSwitchHotPotBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              mSceneSwitchHotPot_ != null &&
              mSceneSwitchHotPot_ != com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.getDefaultInstance()) {
            mSceneSwitchHotPot_ =
              com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.newBuilder(mSceneSwitchHotPot_).mergeFrom(value).buildPartial();
          } else {
            mSceneSwitchHotPot_ = value;
          }
          onChanged();
        } else {
          mSceneSwitchHotPotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <pre>
       *切换热点
       * </pre>
       *
       * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
       */
      public Builder clearMSceneSwitchHotPot() {
        if (mSceneSwitchHotPotBuilder_ == null) {
          mSceneSwitchHotPot_ = null;
          onChanged();
        } else {
          mSceneSwitchHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <pre>
       *切换热点
       * </pre>
       *
       * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
       */
      public com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.Builder getMSceneSwitchHotPotBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getMSceneSwitchHotPotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *切换热点
       * </pre>
       *
       * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
       */
      public com.nibiru.creator.data.HotPotData.SceneSwitchHotPotOrBuilder getMSceneSwitchHotPotOrBuilder() {
        if (mSceneSwitchHotPotBuilder_ != null) {
          return mSceneSwitchHotPotBuilder_.getMessageOrBuilder();
        } else {
          return mSceneSwitchHotPot_ == null ?
              com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.getDefaultInstance() : mSceneSwitchHotPot_;
        }
      }
      /**
       * <pre>
       *切换热点
       * </pre>
       *
       * <code>optional .DataFactory.SceneSwitchHotPot m_SceneSwitchHotPot = 12;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SceneSwitchHotPot, com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.Builder, com.nibiru.creator.data.HotPotData.SceneSwitchHotPotOrBuilder> 
          getMSceneSwitchHotPotFieldBuilder() {
        if (mSceneSwitchHotPotBuilder_ == null) {
          mSceneSwitchHotPotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.SceneSwitchHotPot, com.nibiru.creator.data.HotPotData.SceneSwitchHotPot.Builder, com.nibiru.creator.data.HotPotData.SceneSwitchHotPotOrBuilder>(
                  getMSceneSwitchHotPot(),
                  getParentForChildren(),
                  isClean());
          mSceneSwitchHotPot_ = null;
        }
        return mSceneSwitchHotPotBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.ImageListHotPot mImageListHotPot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ImageListHotPot, com.nibiru.creator.data.HotPotData.ImageListHotPot.Builder, com.nibiru.creator.data.HotPotData.ImageListHotPotOrBuilder> mImageListHotPotBuilder_;
      /**
       * <pre>
       *图集热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
       */
      public boolean hasMImageListHotPot() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       *图集热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageListHotPot getMImageListHotPot() {
        if (mImageListHotPotBuilder_ == null) {
          return mImageListHotPot_ == null ? com.nibiru.creator.data.HotPotData.ImageListHotPot.getDefaultInstance() : mImageListHotPot_;
        } else {
          return mImageListHotPotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *图集热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
       */
      public Builder setMImageListHotPot(com.nibiru.creator.data.HotPotData.ImageListHotPot value) {
        if (mImageListHotPotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mImageListHotPot_ = value;
          onChanged();
        } else {
          mImageListHotPotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       *图集热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
       */
      public Builder setMImageListHotPot(
          com.nibiru.creator.data.HotPotData.ImageListHotPot.Builder builderForValue) {
        if (mImageListHotPotBuilder_ == null) {
          mImageListHotPot_ = builderForValue.build();
          onChanged();
        } else {
          mImageListHotPotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       *图集热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
       */
      public Builder mergeMImageListHotPot(com.nibiru.creator.data.HotPotData.ImageListHotPot value) {
        if (mImageListHotPotBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              mImageListHotPot_ != null &&
              mImageListHotPot_ != com.nibiru.creator.data.HotPotData.ImageListHotPot.getDefaultInstance()) {
            mImageListHotPot_ =
              com.nibiru.creator.data.HotPotData.ImageListHotPot.newBuilder(mImageListHotPot_).mergeFrom(value).buildPartial();
          } else {
            mImageListHotPot_ = value;
          }
          onChanged();
        } else {
          mImageListHotPotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       *图集热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
       */
      public Builder clearMImageListHotPot() {
        if (mImageListHotPotBuilder_ == null) {
          mImageListHotPot_ = null;
          onChanged();
        } else {
          mImageListHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <pre>
       *图集热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageListHotPot.Builder getMImageListHotPotBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getMImageListHotPotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *图集热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageListHotPotOrBuilder getMImageListHotPotOrBuilder() {
        if (mImageListHotPotBuilder_ != null) {
          return mImageListHotPotBuilder_.getMessageOrBuilder();
        } else {
          return mImageListHotPot_ == null ?
              com.nibiru.creator.data.HotPotData.ImageListHotPot.getDefaultInstance() : mImageListHotPot_;
        }
      }
      /**
       * <pre>
       *图集热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageListHotPot m_ImageListHotPot = 13;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ImageListHotPot, com.nibiru.creator.data.HotPotData.ImageListHotPot.Builder, com.nibiru.creator.data.HotPotData.ImageListHotPotOrBuilder> 
          getMImageListHotPotFieldBuilder() {
        if (mImageListHotPotBuilder_ == null) {
          mImageListHotPotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.ImageListHotPot, com.nibiru.creator.data.HotPotData.ImageListHotPot.Builder, com.nibiru.creator.data.HotPotData.ImageListHotPotOrBuilder>(
                  getMImageListHotPot(),
                  getParentForChildren(),
                  isClean());
          mImageListHotPot_ = null;
        }
        return mImageListHotPotBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.ImageTxtHotPot mImageTxtHotPot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ImageTxtHotPot, com.nibiru.creator.data.HotPotData.ImageTxtHotPot.Builder, com.nibiru.creator.data.HotPotData.ImageTxtHotPotOrBuilder> mImageTxtHotPotBuilder_;
      /**
       * <pre>
       *图文热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
       */
      public boolean hasMImageTxtHotPot() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       *图文热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageTxtHotPot getMImageTxtHotPot() {
        if (mImageTxtHotPotBuilder_ == null) {
          return mImageTxtHotPot_ == null ? com.nibiru.creator.data.HotPotData.ImageTxtHotPot.getDefaultInstance() : mImageTxtHotPot_;
        } else {
          return mImageTxtHotPotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *图文热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
       */
      public Builder setMImageTxtHotPot(com.nibiru.creator.data.HotPotData.ImageTxtHotPot value) {
        if (mImageTxtHotPotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mImageTxtHotPot_ = value;
          onChanged();
        } else {
          mImageTxtHotPotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       *图文热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
       */
      public Builder setMImageTxtHotPot(
          com.nibiru.creator.data.HotPotData.ImageTxtHotPot.Builder builderForValue) {
        if (mImageTxtHotPotBuilder_ == null) {
          mImageTxtHotPot_ = builderForValue.build();
          onChanged();
        } else {
          mImageTxtHotPotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       *图文热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
       */
      public Builder mergeMImageTxtHotPot(com.nibiru.creator.data.HotPotData.ImageTxtHotPot value) {
        if (mImageTxtHotPotBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              mImageTxtHotPot_ != null &&
              mImageTxtHotPot_ != com.nibiru.creator.data.HotPotData.ImageTxtHotPot.getDefaultInstance()) {
            mImageTxtHotPot_ =
              com.nibiru.creator.data.HotPotData.ImageTxtHotPot.newBuilder(mImageTxtHotPot_).mergeFrom(value).buildPartial();
          } else {
            mImageTxtHotPot_ = value;
          }
          onChanged();
        } else {
          mImageTxtHotPotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       *图文热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
       */
      public Builder clearMImageTxtHotPot() {
        if (mImageTxtHotPotBuilder_ == null) {
          mImageTxtHotPot_ = null;
          onChanged();
        } else {
          mImageTxtHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <pre>
       *图文热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageTxtHotPot.Builder getMImageTxtHotPotBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getMImageTxtHotPotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *图文热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
       */
      public com.nibiru.creator.data.HotPotData.ImageTxtHotPotOrBuilder getMImageTxtHotPotOrBuilder() {
        if (mImageTxtHotPotBuilder_ != null) {
          return mImageTxtHotPotBuilder_.getMessageOrBuilder();
        } else {
          return mImageTxtHotPot_ == null ?
              com.nibiru.creator.data.HotPotData.ImageTxtHotPot.getDefaultInstance() : mImageTxtHotPot_;
        }
      }
      /**
       * <pre>
       *图文热点
       * </pre>
       *
       * <code>optional .DataFactory.ImageTxtHotPot m_ImageTxtHotPot = 14;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ImageTxtHotPot, com.nibiru.creator.data.HotPotData.ImageTxtHotPot.Builder, com.nibiru.creator.data.HotPotData.ImageTxtHotPotOrBuilder> 
          getMImageTxtHotPotFieldBuilder() {
        if (mImageTxtHotPotBuilder_ == null) {
          mImageTxtHotPotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.ImageTxtHotPot, com.nibiru.creator.data.HotPotData.ImageTxtHotPot.Builder, com.nibiru.creator.data.HotPotData.ImageTxtHotPotOrBuilder>(
                  getMImageTxtHotPot(),
                  getParentForChildren(),
                  isClean());
          mImageTxtHotPot_ = null;
        }
        return mImageTxtHotPotBuilder_;
      }

      private long mStartTime_ ;
      /**
       * <pre>
       *开始时间
       * </pre>
       *
       * <code>optional int64 m_StartTime = 15;</code>
       */
      public boolean hasMStartTime() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <pre>
       *开始时间
       * </pre>
       *
       * <code>optional int64 m_StartTime = 15;</code>
       */
      public long getMStartTime() {
        return mStartTime_;
      }
      /**
       * <pre>
       *开始时间
       * </pre>
       *
       * <code>optional int64 m_StartTime = 15;</code>
       */
      public Builder setMStartTime(long value) {
        bitField0_ |= 0x00004000;
        mStartTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *开始时间
       * </pre>
       *
       * <code>optional int64 m_StartTime = 15;</code>
       */
      public Builder clearMStartTime() {
        bitField0_ = (bitField0_ & ~0x00004000);
        mStartTime_ = 0L;
        onChanged();
        return this;
      }

      private long mEndTime_ ;
      /**
       * <pre>
       *结束时间
       * </pre>
       *
       * <code>optional int64 m_EndTime = 16;</code>
       */
      public boolean hasMEndTime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <pre>
       *结束时间
       * </pre>
       *
       * <code>optional int64 m_EndTime = 16;</code>
       */
      public long getMEndTime() {
        return mEndTime_;
      }
      /**
       * <pre>
       *结束时间
       * </pre>
       *
       * <code>optional int64 m_EndTime = 16;</code>
       */
      public Builder setMEndTime(long value) {
        bitField0_ |= 0x00008000;
        mEndTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *结束时间
       * </pre>
       *
       * <code>optional int64 m_EndTime = 16;</code>
       */
      public Builder clearMEndTime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        mEndTime_ = 0L;
        onChanged();
        return this;
      }

      private int mState_ ;
      /**
       * <pre>
       * 热点编辑状态（一体机端用）
       * </pre>
       *
       * <code>optional int32 m_State = 17;</code>
       */
      public boolean hasMState() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <pre>
       * 热点编辑状态（一体机端用）
       * </pre>
       *
       * <code>optional int32 m_State = 17;</code>
       */
      public int getMState() {
        return mState_;
      }
      /**
       * <pre>
       * 热点编辑状态（一体机端用）
       * </pre>
       *
       * <code>optional int32 m_State = 17;</code>
       */
      public Builder setMState(int value) {
        bitField0_ |= 0x00010000;
        mState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 热点编辑状态（一体机端用）
       * </pre>
       *
       * <code>optional int32 m_State = 17;</code>
       */
      public Builder clearMState() {
        bitField0_ = (bitField0_ & ~0x00010000);
        mState_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mLabelSize_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mLabelSizeBuilder_;
      /**
       * <pre>
       * 热点图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
       */
      public boolean hasMLabelSize() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <pre>
       * 热点图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMLabelSize() {
        if (mLabelSizeBuilder_ == null) {
          return mLabelSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mLabelSize_;
        } else {
          return mLabelSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 热点图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
       */
      public Builder setMLabelSize(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mLabelSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mLabelSize_ = value;
          onChanged();
        } else {
          mLabelSizeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <pre>
       * 热点图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
       */
      public Builder setMLabelSize(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mLabelSizeBuilder_ == null) {
          mLabelSize_ = builderForValue.build();
          onChanged();
        } else {
          mLabelSizeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <pre>
       * 热点图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
       */
      public Builder mergeMLabelSize(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mLabelSizeBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              mLabelSize_ != null &&
              mLabelSize_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mLabelSize_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mLabelSize_).mergeFrom(value).buildPartial();
          } else {
            mLabelSize_ = value;
          }
          onChanged();
        } else {
          mLabelSizeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <pre>
       * 热点图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
       */
      public Builder clearMLabelSize() {
        if (mLabelSizeBuilder_ == null) {
          mLabelSize_ = null;
          onChanged();
        } else {
          mLabelSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <pre>
       * 热点图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMLabelSizeBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getMLabelSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 热点图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMLabelSizeOrBuilder() {
        if (mLabelSizeBuilder_ != null) {
          return mLabelSizeBuilder_.getMessageOrBuilder();
        } else {
          return mLabelSize_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mLabelSize_;
        }
      }
      /**
       * <pre>
       * 热点图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 18;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMLabelSizeFieldBuilder() {
        if (mLabelSizeBuilder_ == null) {
          mLabelSizeBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMLabelSize(),
                  getParentForChildren(),
                  isClean());
          mLabelSize_ = null;
        }
        return mLabelSizeBuilder_;
      }

      private float mRadius_ ;
      /**
       * <pre>
       * 热点远近大小（一体机端用）
       * </pre>
       *
       * <code>optional float m_Radius = 19;</code>
       */
      public boolean hasMRadius() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <pre>
       * 热点远近大小（一体机端用）
       * </pre>
       *
       * <code>optional float m_Radius = 19;</code>
       */
      public float getMRadius() {
        return mRadius_;
      }
      /**
       * <pre>
       * 热点远近大小（一体机端用）
       * </pre>
       *
       * <code>optional float m_Radius = 19;</code>
       */
      public Builder setMRadius(float value) {
        bitField0_ |= 0x00040000;
        mRadius_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 热点远近大小（一体机端用）
       * </pre>
       *
       * <code>optional float m_Radius = 19;</code>
       */
      public Builder clearMRadius() {
        bitField0_ = (bitField0_ & ~0x00040000);
        mRadius_ = 0F;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.ModelHotPot mModelHotPot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ModelHotPot, com.nibiru.creator.data.HotPotData.ModelHotPot.Builder, com.nibiru.creator.data.HotPotData.ModelHotPotOrBuilder> mModelHotPotBuilder_;
      /**
       * <pre>
       *模型热点
       * </pre>
       *
       * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
       */
      public boolean hasMModelHotPot() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <pre>
       *模型热点
       * </pre>
       *
       * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
       */
      public com.nibiru.creator.data.HotPotData.ModelHotPot getMModelHotPot() {
        if (mModelHotPotBuilder_ == null) {
          return mModelHotPot_ == null ? com.nibiru.creator.data.HotPotData.ModelHotPot.getDefaultInstance() : mModelHotPot_;
        } else {
          return mModelHotPotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *模型热点
       * </pre>
       *
       * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
       */
      public Builder setMModelHotPot(com.nibiru.creator.data.HotPotData.ModelHotPot value) {
        if (mModelHotPotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mModelHotPot_ = value;
          onChanged();
        } else {
          mModelHotPotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <pre>
       *模型热点
       * </pre>
       *
       * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
       */
      public Builder setMModelHotPot(
          com.nibiru.creator.data.HotPotData.ModelHotPot.Builder builderForValue) {
        if (mModelHotPotBuilder_ == null) {
          mModelHotPot_ = builderForValue.build();
          onChanged();
        } else {
          mModelHotPotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <pre>
       *模型热点
       * </pre>
       *
       * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
       */
      public Builder mergeMModelHotPot(com.nibiru.creator.data.HotPotData.ModelHotPot value) {
        if (mModelHotPotBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              mModelHotPot_ != null &&
              mModelHotPot_ != com.nibiru.creator.data.HotPotData.ModelHotPot.getDefaultInstance()) {
            mModelHotPot_ =
              com.nibiru.creator.data.HotPotData.ModelHotPot.newBuilder(mModelHotPot_).mergeFrom(value).buildPartial();
          } else {
            mModelHotPot_ = value;
          }
          onChanged();
        } else {
          mModelHotPotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <pre>
       *模型热点
       * </pre>
       *
       * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
       */
      public Builder clearMModelHotPot() {
        if (mModelHotPotBuilder_ == null) {
          mModelHotPot_ = null;
          onChanged();
        } else {
          mModelHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <pre>
       *模型热点
       * </pre>
       *
       * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
       */
      public com.nibiru.creator.data.HotPotData.ModelHotPot.Builder getMModelHotPotBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getMModelHotPotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *模型热点
       * </pre>
       *
       * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
       */
      public com.nibiru.creator.data.HotPotData.ModelHotPotOrBuilder getMModelHotPotOrBuilder() {
        if (mModelHotPotBuilder_ != null) {
          return mModelHotPotBuilder_.getMessageOrBuilder();
        } else {
          return mModelHotPot_ == null ?
              com.nibiru.creator.data.HotPotData.ModelHotPot.getDefaultInstance() : mModelHotPot_;
        }
      }
      /**
       * <pre>
       *模型热点
       * </pre>
       *
       * <code>optional .DataFactory.ModelHotPot m_ModelHotPot = 20;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ModelHotPot, com.nibiru.creator.data.HotPotData.ModelHotPot.Builder, com.nibiru.creator.data.HotPotData.ModelHotPotOrBuilder> 
          getMModelHotPotFieldBuilder() {
        if (mModelHotPotBuilder_ == null) {
          mModelHotPotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.ModelHotPot, com.nibiru.creator.data.HotPotData.ModelHotPot.Builder, com.nibiru.creator.data.HotPotData.ModelHotPotOrBuilder>(
                  getMModelHotPot(),
                  getParentForChildren(),
                  isClean());
          mModelHotPot_ = null;
        }
        return mModelHotPotBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.HyperlinkHotspot hyperlinkHotspot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HyperlinkHotspot, com.nibiru.creator.data.HotPotData.HyperlinkHotspot.Builder, com.nibiru.creator.data.HotPotData.HyperlinkHotspotOrBuilder> hyperlinkHotspotBuilder_;
      /**
       * <pre>
       *超链接热点
       * </pre>
       *
       * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
       */
      public boolean hasHyperlinkHotspot() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <pre>
       *超链接热点
       * </pre>
       *
       * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
       */
      public com.nibiru.creator.data.HotPotData.HyperlinkHotspot getHyperlinkHotspot() {
        if (hyperlinkHotspotBuilder_ == null) {
          return hyperlinkHotspot_ == null ? com.nibiru.creator.data.HotPotData.HyperlinkHotspot.getDefaultInstance() : hyperlinkHotspot_;
        } else {
          return hyperlinkHotspotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *超链接热点
       * </pre>
       *
       * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
       */
      public Builder setHyperlinkHotspot(com.nibiru.creator.data.HotPotData.HyperlinkHotspot value) {
        if (hyperlinkHotspotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hyperlinkHotspot_ = value;
          onChanged();
        } else {
          hyperlinkHotspotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <pre>
       *超链接热点
       * </pre>
       *
       * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
       */
      public Builder setHyperlinkHotspot(
          com.nibiru.creator.data.HotPotData.HyperlinkHotspot.Builder builderForValue) {
        if (hyperlinkHotspotBuilder_ == null) {
          hyperlinkHotspot_ = builderForValue.build();
          onChanged();
        } else {
          hyperlinkHotspotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <pre>
       *超链接热点
       * </pre>
       *
       * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
       */
      public Builder mergeHyperlinkHotspot(com.nibiru.creator.data.HotPotData.HyperlinkHotspot value) {
        if (hyperlinkHotspotBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              hyperlinkHotspot_ != null &&
              hyperlinkHotspot_ != com.nibiru.creator.data.HotPotData.HyperlinkHotspot.getDefaultInstance()) {
            hyperlinkHotspot_ =
              com.nibiru.creator.data.HotPotData.HyperlinkHotspot.newBuilder(hyperlinkHotspot_).mergeFrom(value).buildPartial();
          } else {
            hyperlinkHotspot_ = value;
          }
          onChanged();
        } else {
          hyperlinkHotspotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <pre>
       *超链接热点
       * </pre>
       *
       * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
       */
      public Builder clearHyperlinkHotspot() {
        if (hyperlinkHotspotBuilder_ == null) {
          hyperlinkHotspot_ = null;
          onChanged();
        } else {
          hyperlinkHotspotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <pre>
       *超链接热点
       * </pre>
       *
       * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
       */
      public com.nibiru.creator.data.HotPotData.HyperlinkHotspot.Builder getHyperlinkHotspotBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getHyperlinkHotspotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *超链接热点
       * </pre>
       *
       * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
       */
      public com.nibiru.creator.data.HotPotData.HyperlinkHotspotOrBuilder getHyperlinkHotspotOrBuilder() {
        if (hyperlinkHotspotBuilder_ != null) {
          return hyperlinkHotspotBuilder_.getMessageOrBuilder();
        } else {
          return hyperlinkHotspot_ == null ?
              com.nibiru.creator.data.HotPotData.HyperlinkHotspot.getDefaultInstance() : hyperlinkHotspot_;
        }
      }
      /**
       * <pre>
       *超链接热点
       * </pre>
       *
       * <code>optional .DataFactory.HyperlinkHotspot hyperlinkHotspot = 21;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HyperlinkHotspot, com.nibiru.creator.data.HotPotData.HyperlinkHotspot.Builder, com.nibiru.creator.data.HotPotData.HyperlinkHotspotOrBuilder> 
          getHyperlinkHotspotFieldBuilder() {
        if (hyperlinkHotspotBuilder_ == null) {
          hyperlinkHotspotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.HyperlinkHotspot, com.nibiru.creator.data.HotPotData.HyperlinkHotspot.Builder, com.nibiru.creator.data.HotPotData.HyperlinkHotspotOrBuilder>(
                  getHyperlinkHotspot(),
                  getParentForChildren(),
                  isClean());
          hyperlinkHotspot_ = null;
        }
        return hyperlinkHotspotBuilder_;
      }

      private int mMaterialId_ ;
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 22;</code>
       */
      public boolean hasMMaterialId() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 22;</code>
       */
      public int getMMaterialId() {
        return mMaterialId_;
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 22;</code>
       */
      public Builder setMMaterialId(int value) {
        bitField0_ |= 0x00200000;
        mMaterialId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 22;</code>
       */
      public Builder clearMMaterialId() {
        bitField0_ = (bitField0_ & ~0x00200000);
        mMaterialId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mDisplayName_ = "";
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 23;</code>
       */
      public boolean hasMDisplayName() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 23;</code>
       */
      public java.lang.String getMDisplayName() {
        java.lang.Object ref = mDisplayName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mDisplayName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 23;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMDisplayNameBytes() {
        java.lang.Object ref = mDisplayName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mDisplayName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 23;</code>
       */
      public Builder setMDisplayName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00400000;
        mDisplayName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 23;</code>
       */
      public Builder clearMDisplayName() {
        bitField0_ = (bitField0_ & ~0x00400000);
        mDisplayName_ = getDefaultInstance().getMDisplayName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 23;</code>
       */
      public Builder setMDisplayNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00400000;
        mDisplayName_ = value;
        onChanged();
        return this;
      }

      private int mDisplayAlign_ ;
      /**
       * <pre>
       *热点内容显示位置， 0 下方，1 中间
       * </pre>
       *
       * <code>optional int32 m_DisplayAlign = 24;</code>
       */
      public boolean hasMDisplayAlign() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <pre>
       *热点内容显示位置， 0 下方，1 中间
       * </pre>
       *
       * <code>optional int32 m_DisplayAlign = 24;</code>
       */
      public int getMDisplayAlign() {
        return mDisplayAlign_;
      }
      /**
       * <pre>
       *热点内容显示位置， 0 下方，1 中间
       * </pre>
       *
       * <code>optional int32 m_DisplayAlign = 24;</code>
       */
      public Builder setMDisplayAlign(int value) {
        bitField0_ |= 0x00800000;
        mDisplayAlign_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点内容显示位置， 0 下方，1 中间
       * </pre>
       *
       * <code>optional int32 m_DisplayAlign = 24;</code>
       */
      public Builder clearMDisplayAlign() {
        bitField0_ = (bitField0_ & ~0x00800000);
        mDisplayAlign_ = 0;
        onChanged();
        return this;
      }

      private long mClickLarger_ ;
      /**
       * <pre>
       *热点点击放大
       * </pre>
       *
       * <code>optional int64 m_ClickLarger = 25;</code>
       */
      public boolean hasMClickLarger() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <pre>
       *热点点击放大
       * </pre>
       *
       * <code>optional int64 m_ClickLarger = 25;</code>
       */
      public long getMClickLarger() {
        return mClickLarger_;
      }
      /**
       * <pre>
       *热点点击放大
       * </pre>
       *
       * <code>optional int64 m_ClickLarger = 25;</code>
       */
      public Builder setMClickLarger(long value) {
        bitField0_ |= 0x01000000;
        mClickLarger_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点点击放大
       * </pre>
       *
       * <code>optional int64 m_ClickLarger = 25;</code>
       */
      public Builder clearMClickLarger() {
        bitField0_ = (bitField0_ & ~0x01000000);
        mClickLarger_ = 0L;
        onChanged();
        return this;
      }

      private long mClickRotate_ ;
      /**
       * <pre>
       *热点点击旋转
       * </pre>
       *
       * <code>optional int64 m_ClickRotate = 26;</code>
       */
      public boolean hasMClickRotate() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <pre>
       *热点点击旋转
       * </pre>
       *
       * <code>optional int64 m_ClickRotate = 26;</code>
       */
      public long getMClickRotate() {
        return mClickRotate_;
      }
      /**
       * <pre>
       *热点点击旋转
       * </pre>
       *
       * <code>optional int64 m_ClickRotate = 26;</code>
       */
      public Builder setMClickRotate(long value) {
        bitField0_ |= 0x02000000;
        mClickRotate_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点点击旋转
       * </pre>
       *
       * <code>optional int64 m_ClickRotate = 26;</code>
       */
      public Builder clearMClickRotate() {
        bitField0_ = (bitField0_ & ~0x02000000);
        mClickRotate_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object mClickAudioPath_ = "";
      /**
       * <pre>
       *热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 27;</code>
       */
      public boolean hasMClickAudioPath() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <pre>
       *热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 27;</code>
       */
      public java.lang.String getMClickAudioPath() {
        java.lang.Object ref = mClickAudioPath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mClickAudioPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 27;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMClickAudioPathBytes() {
        java.lang.Object ref = mClickAudioPath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mClickAudioPath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 27;</code>
       */
      public Builder setMClickAudioPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        mClickAudioPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 27;</code>
       */
      public Builder clearMClickAudioPath() {
        bitField0_ = (bitField0_ & ~0x04000000);
        mClickAudioPath_ = getDefaultInstance().getMClickAudioPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 27;</code>
       */
      public Builder setMClickAudioPathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        mClickAudioPath_ = value;
        onChanged();
        return this;
      }

      private int mFontSize_ = 14;
      /**
       * <pre>
       *热点名称字体大小  
       * </pre>
       *
       * <code>optional int32 m_FontSize = 28 [default = 14];</code>
       */
      public boolean hasMFontSize() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <pre>
       *热点名称字体大小  
       * </pre>
       *
       * <code>optional int32 m_FontSize = 28 [default = 14];</code>
       */
      public int getMFontSize() {
        return mFontSize_;
      }
      /**
       * <pre>
       *热点名称字体大小  
       * </pre>
       *
       * <code>optional int32 m_FontSize = 28 [default = 14];</code>
       */
      public Builder setMFontSize(int value) {
        bitField0_ |= 0x08000000;
        mFontSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点名称字体大小  
       * </pre>
       *
       * <code>optional int32 m_FontSize = 28 [default = 14];</code>
       */
      public Builder clearMFontSize() {
        bitField0_ = (bitField0_ & ~0x08000000);
        mFontSize_ = 14;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Exhibits3DHotspot mExhibitsHotPot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Exhibits3DHotspot, com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.Builder, com.nibiru.creator.data.HotPotData.Exhibits3DHotspotOrBuilder> mExhibitsHotPotBuilder_;
      /**
       * <pre>
       *Exhiits3D热点
       * </pre>
       *
       * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
       */
      public boolean hasMExhibitsHotPot() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <pre>
       *Exhiits3D热点
       * </pre>
       *
       * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
       */
      public com.nibiru.creator.data.HotPotData.Exhibits3DHotspot getMExhibitsHotPot() {
        if (mExhibitsHotPotBuilder_ == null) {
          return mExhibitsHotPot_ == null ? com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.getDefaultInstance() : mExhibitsHotPot_;
        } else {
          return mExhibitsHotPotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *Exhiits3D热点
       * </pre>
       *
       * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
       */
      public Builder setMExhibitsHotPot(com.nibiru.creator.data.HotPotData.Exhibits3DHotspot value) {
        if (mExhibitsHotPotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mExhibitsHotPot_ = value;
          onChanged();
        } else {
          mExhibitsHotPotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <pre>
       *Exhiits3D热点
       * </pre>
       *
       * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
       */
      public Builder setMExhibitsHotPot(
          com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.Builder builderForValue) {
        if (mExhibitsHotPotBuilder_ == null) {
          mExhibitsHotPot_ = builderForValue.build();
          onChanged();
        } else {
          mExhibitsHotPotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <pre>
       *Exhiits3D热点
       * </pre>
       *
       * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
       */
      public Builder mergeMExhibitsHotPot(com.nibiru.creator.data.HotPotData.Exhibits3DHotspot value) {
        if (mExhibitsHotPotBuilder_ == null) {
          if (((bitField0_ & 0x10000000) == 0x10000000) &&
              mExhibitsHotPot_ != null &&
              mExhibitsHotPot_ != com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.getDefaultInstance()) {
            mExhibitsHotPot_ =
              com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.newBuilder(mExhibitsHotPot_).mergeFrom(value).buildPartial();
          } else {
            mExhibitsHotPot_ = value;
          }
          onChanged();
        } else {
          mExhibitsHotPotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <pre>
       *Exhiits3D热点
       * </pre>
       *
       * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
       */
      public Builder clearMExhibitsHotPot() {
        if (mExhibitsHotPotBuilder_ == null) {
          mExhibitsHotPot_ = null;
          onChanged();
        } else {
          mExhibitsHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        return this;
      }
      /**
       * <pre>
       *Exhiits3D热点
       * </pre>
       *
       * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
       */
      public com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.Builder getMExhibitsHotPotBuilder() {
        bitField0_ |= 0x10000000;
        onChanged();
        return getMExhibitsHotPotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *Exhiits3D热点
       * </pre>
       *
       * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
       */
      public com.nibiru.creator.data.HotPotData.Exhibits3DHotspotOrBuilder getMExhibitsHotPotOrBuilder() {
        if (mExhibitsHotPotBuilder_ != null) {
          return mExhibitsHotPotBuilder_.getMessageOrBuilder();
        } else {
          return mExhibitsHotPot_ == null ?
              com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.getDefaultInstance() : mExhibitsHotPot_;
        }
      }
      /**
       * <pre>
       *Exhiits3D热点
       * </pre>
       *
       * <code>optional .DataFactory.Exhibits3DHotspot m_exhibitsHotPot = 29;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Exhibits3DHotspot, com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.Builder, com.nibiru.creator.data.HotPotData.Exhibits3DHotspotOrBuilder> 
          getMExhibitsHotPotFieldBuilder() {
        if (mExhibitsHotPotBuilder_ == null) {
          mExhibitsHotPotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Exhibits3DHotspot, com.nibiru.creator.data.HotPotData.Exhibits3DHotspot.Builder, com.nibiru.creator.data.HotPotData.Exhibits3DHotspotOrBuilder>(
                  getMExhibitsHotPot(),
                  getParentForChildren(),
                  isClean());
          mExhibitsHotPot_ = null;
        }
        return mExhibitsHotPotBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.ExhibitsARHotspot mExhibitsARHotPot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ExhibitsARHotspot, com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.Builder, com.nibiru.creator.data.HotPotData.ExhibitsARHotspotOrBuilder> mExhibitsARHotPotBuilder_;
      /**
       * <pre>
       *ExhiitsAR热点
       * </pre>
       *
       * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
       */
      public boolean hasMExhibitsARHotPot() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <pre>
       *ExhiitsAR热点
       * </pre>
       *
       * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
       */
      public com.nibiru.creator.data.HotPotData.ExhibitsARHotspot getMExhibitsARHotPot() {
        if (mExhibitsARHotPotBuilder_ == null) {
          return mExhibitsARHotPot_ == null ? com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.getDefaultInstance() : mExhibitsARHotPot_;
        } else {
          return mExhibitsARHotPotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *ExhiitsAR热点
       * </pre>
       *
       * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
       */
      public Builder setMExhibitsARHotPot(com.nibiru.creator.data.HotPotData.ExhibitsARHotspot value) {
        if (mExhibitsARHotPotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mExhibitsARHotPot_ = value;
          onChanged();
        } else {
          mExhibitsARHotPotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <pre>
       *ExhiitsAR热点
       * </pre>
       *
       * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
       */
      public Builder setMExhibitsARHotPot(
          com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.Builder builderForValue) {
        if (mExhibitsARHotPotBuilder_ == null) {
          mExhibitsARHotPot_ = builderForValue.build();
          onChanged();
        } else {
          mExhibitsARHotPotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <pre>
       *ExhiitsAR热点
       * </pre>
       *
       * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
       */
      public Builder mergeMExhibitsARHotPot(com.nibiru.creator.data.HotPotData.ExhibitsARHotspot value) {
        if (mExhibitsARHotPotBuilder_ == null) {
          if (((bitField0_ & 0x20000000) == 0x20000000) &&
              mExhibitsARHotPot_ != null &&
              mExhibitsARHotPot_ != com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.getDefaultInstance()) {
            mExhibitsARHotPot_ =
              com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.newBuilder(mExhibitsARHotPot_).mergeFrom(value).buildPartial();
          } else {
            mExhibitsARHotPot_ = value;
          }
          onChanged();
        } else {
          mExhibitsARHotPotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <pre>
       *ExhiitsAR热点
       * </pre>
       *
       * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
       */
      public Builder clearMExhibitsARHotPot() {
        if (mExhibitsARHotPotBuilder_ == null) {
          mExhibitsARHotPot_ = null;
          onChanged();
        } else {
          mExhibitsARHotPotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        return this;
      }
      /**
       * <pre>
       *ExhiitsAR热点
       * </pre>
       *
       * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
       */
      public com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.Builder getMExhibitsARHotPotBuilder() {
        bitField0_ |= 0x20000000;
        onChanged();
        return getMExhibitsARHotPotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *ExhiitsAR热点
       * </pre>
       *
       * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
       */
      public com.nibiru.creator.data.HotPotData.ExhibitsARHotspotOrBuilder getMExhibitsARHotPotOrBuilder() {
        if (mExhibitsARHotPotBuilder_ != null) {
          return mExhibitsARHotPotBuilder_.getMessageOrBuilder();
        } else {
          return mExhibitsARHotPot_ == null ?
              com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.getDefaultInstance() : mExhibitsARHotPot_;
        }
      }
      /**
       * <pre>
       *ExhiitsAR热点
       * </pre>
       *
       * <code>optional .DataFactory.ExhibitsARHotspot m_exhibitsARHotPot = 30;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ExhibitsARHotspot, com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.Builder, com.nibiru.creator.data.HotPotData.ExhibitsARHotspotOrBuilder> 
          getMExhibitsARHotPotFieldBuilder() {
        if (mExhibitsARHotPotBuilder_ == null) {
          mExhibitsARHotPotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.ExhibitsARHotspot, com.nibiru.creator.data.HotPotData.ExhibitsARHotspot.Builder, com.nibiru.creator.data.HotPotData.ExhibitsARHotspotOrBuilder>(
                  getMExhibitsARHotPot(),
                  getParentForChildren(),
                  isClean());
          mExhibitsARHotPot_ = null;
        }
        return mExhibitsARHotPotBuilder_;
      }

      private int mAppearanceLayout_ ;
      /**
       * <pre>
       *热点图标布局位置， 1 右、 2 底部
       * </pre>
       *
       * <code>optional int32 m_appearanceLayout = 31;</code>
       */
      public boolean hasMAppearanceLayout() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <pre>
       *热点图标布局位置， 1 右、 2 底部
       * </pre>
       *
       * <code>optional int32 m_appearanceLayout = 31;</code>
       */
      public int getMAppearanceLayout() {
        return mAppearanceLayout_;
      }
      /**
       * <pre>
       *热点图标布局位置， 1 右、 2 底部
       * </pre>
       *
       * <code>optional int32 m_appearanceLayout = 31;</code>
       */
      public Builder setMAppearanceLayout(int value) {
        bitField0_ |= 0x40000000;
        mAppearanceLayout_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *热点图标布局位置， 1 右、 2 底部
       * </pre>
       *
       * <code>optional int32 m_appearanceLayout = 31;</code>
       */
      public Builder clearMAppearanceLayout() {
        bitField0_ = (bitField0_ & ~0x40000000);
        mAppearanceLayout_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object hoverImage_ = "";
      /**
       * <pre>
       *替换图片
       * </pre>
       *
       * <code>optional string hoverImage = 34;</code>
       */
      public boolean hasHoverImage() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <pre>
       *替换图片
       * </pre>
       *
       * <code>optional string hoverImage = 34;</code>
       */
      public java.lang.String getHoverImage() {
        java.lang.Object ref = hoverImage_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            hoverImage_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *替换图片
       * </pre>
       *
       * <code>optional string hoverImage = 34;</code>
       */
      public com.nibiru.protobuf.ByteString
          getHoverImageBytes() {
        java.lang.Object ref = hoverImage_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          hoverImage_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *替换图片
       * </pre>
       *
       * <code>optional string hoverImage = 34;</code>
       */
      public Builder setHoverImage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x80000000;
        hoverImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *替换图片
       * </pre>
       *
       * <code>optional string hoverImage = 34;</code>
       */
      public Builder clearHoverImage() {
        bitField0_ = (bitField0_ & ~0x80000000);
        hoverImage_ = getDefaultInstance().getHoverImage();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *替换图片
       * </pre>
       *
       * <code>optional string hoverImage = 34;</code>
       */
      public Builder setHoverImageBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x80000000;
        hoverImage_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.HotPot)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.HotPot)
    private static final com.nibiru.creator.data.HotPotData.HotPot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.HotPot();
    }

    public static com.nibiru.creator.data.HotPotData.HotPot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<HotPot>
        PARSER = new com.nibiru.protobuf.AbstractParser<HotPot>() {
      public HotPot parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new HotPot(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<HotPot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<HotPot> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.HotPot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventAppearanceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.EventAppearance)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *事件外观
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    boolean hasMAppearanceImage();
    /**
     * <pre>
     *事件外观
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    java.lang.String getMAppearanceImage();
    /**
     * <pre>
     *事件外观
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMAppearanceImageBytes();

    /**
     * <pre>
     *图标大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    boolean hasMAnchorPoint();
    /**
     * <pre>
     *图标大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMAnchorPoint();
    /**
     * <pre>
     *图标大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMAnchorPointOrBuilder();

    /**
     * <pre>
     *事件图标名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    boolean hasMAppearanceName();
    /**
     * <pre>
     *事件图标名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    java.lang.String getMAppearanceName();
    /**
     * <pre>
     *事件图标名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMAppearanceNameBytes();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();
  }
  /**
   * <pre>
   * 事件外观
   * </pre>
   *
   * Protobuf type {@code DataFactory.EventAppearance}
   */
  public  static final class EventAppearance extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.EventAppearance)
      EventAppearanceOrBuilder {
    // Use EventAppearance.newBuilder() to construct.
    private EventAppearance(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventAppearance() {
      mAppearanceImage_ = "";
      mAppearanceName_ = "";
      mFileUrl_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EventAppearance(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mAppearanceImage_ = bs;
              break;
            }
            case 18: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mAnchorPoint_.toBuilder();
              }
              mAnchorPoint_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mAnchorPoint_);
                mAnchorPoint_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mAppearanceName_ = bs;
              break;
            }
            case 34: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              mFileUrl_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_EventAppearance_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_EventAppearance_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.EventAppearance.class, com.nibiru.creator.data.HotPotData.EventAppearance.Builder.class);
    }

    private int bitField0_;
    public static final int M_APPEARANCEIMAGE_FIELD_NUMBER = 1;
    private volatile java.lang.Object mAppearanceImage_;
    /**
     * <pre>
     *事件外观
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    public boolean hasMAppearanceImage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *事件外观
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    public java.lang.String getMAppearanceImage() {
      java.lang.Object ref = mAppearanceImage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mAppearanceImage_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *事件外观
     * </pre>
     *
     * <code>required string m_AppearanceImage = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMAppearanceImageBytes() {
      java.lang.Object ref = mAppearanceImage_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mAppearanceImage_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ANCHORPOINT_FIELD_NUMBER = 2;
    private com.nibiru.creator.data.HotPotData.Vec2 mAnchorPoint_;
    /**
     * <pre>
     *图标大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    public boolean hasMAnchorPoint() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *图标大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMAnchorPoint() {
      return mAnchorPoint_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mAnchorPoint_;
    }
    /**
     * <pre>
     *图标大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMAnchorPointOrBuilder() {
      return mAnchorPoint_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mAnchorPoint_;
    }

    public static final int M_APPEARANCENAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object mAppearanceName_;
    /**
     * <pre>
     *事件图标名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    public boolean hasMAppearanceName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *事件图标名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    public java.lang.String getMAppearanceName() {
      java.lang.Object ref = mAppearanceName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mAppearanceName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *事件图标名称
     * </pre>
     *
     * <code>required string m_AppearanceName = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMAppearanceNameBytes() {
      java.lang.Object ref = mAppearanceName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mAppearanceName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_FILEURL_FIELD_NUMBER = 4;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 4;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMAppearanceImage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAnchorPoint()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAppearanceName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMAnchorPoint().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mAppearanceImage_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getMAnchorPoint());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mAppearanceName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 4, mFileUrl_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mAppearanceImage_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(2, getMAnchorPoint());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mAppearanceName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(4, mFileUrl_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.EventAppearance)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.EventAppearance other = (com.nibiru.creator.data.HotPotData.EventAppearance) obj;

      boolean result = true;
      result = result && (hasMAppearanceImage() == other.hasMAppearanceImage());
      if (hasMAppearanceImage()) {
        result = result && getMAppearanceImage()
            .equals(other.getMAppearanceImage());
      }
      result = result && (hasMAnchorPoint() == other.hasMAnchorPoint());
      if (hasMAnchorPoint()) {
        result = result && getMAnchorPoint()
            .equals(other.getMAnchorPoint());
      }
      result = result && (hasMAppearanceName() == other.hasMAppearanceName());
      if (hasMAppearanceName()) {
        result = result && getMAppearanceName()
            .equals(other.getMAppearanceName());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMAppearanceImage()) {
        hash = (37 * hash) + M_APPEARANCEIMAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMAppearanceImage().hashCode();
      }
      if (hasMAnchorPoint()) {
        hash = (37 * hash) + M_ANCHORPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getMAnchorPoint().hashCode();
      }
      if (hasMAppearanceName()) {
        hash = (37 * hash) + M_APPEARANCENAME_FIELD_NUMBER;
        hash = (53 * hash) + getMAppearanceName().hashCode();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.EventAppearance parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.EventAppearance parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.EventAppearance parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.EventAppearance parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.EventAppearance parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.EventAppearance parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.EventAppearance parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.EventAppearance parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.EventAppearance parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.EventAppearance parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.EventAppearance prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 事件外观
     * </pre>
     *
     * Protobuf type {@code DataFactory.EventAppearance}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.EventAppearance)
        com.nibiru.creator.data.HotPotData.EventAppearanceOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_EventAppearance_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_EventAppearance_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.EventAppearance.class, com.nibiru.creator.data.HotPotData.EventAppearance.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.EventAppearance.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMAnchorPointFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mAppearanceImage_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (mAnchorPointBuilder_ == null) {
          mAnchorPoint_ = null;
        } else {
          mAnchorPointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        mAppearanceName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_EventAppearance_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.EventAppearance getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.EventAppearance.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.EventAppearance build() {
        com.nibiru.creator.data.HotPotData.EventAppearance result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.EventAppearance buildPartial() {
        com.nibiru.creator.data.HotPotData.EventAppearance result = new com.nibiru.creator.data.HotPotData.EventAppearance(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mAppearanceImage_ = mAppearanceImage_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (mAnchorPointBuilder_ == null) {
          result.mAnchorPoint_ = mAnchorPoint_;
        } else {
          result.mAnchorPoint_ = mAnchorPointBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mAppearanceName_ = mAppearanceName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mFileUrl_ = mFileUrl_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.EventAppearance) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.EventAppearance)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.EventAppearance other) {
        if (other == com.nibiru.creator.data.HotPotData.EventAppearance.getDefaultInstance()) return this;
        if (other.hasMAppearanceImage()) {
          bitField0_ |= 0x00000001;
          mAppearanceImage_ = other.mAppearanceImage_;
          onChanged();
        }
        if (other.hasMAnchorPoint()) {
          mergeMAnchorPoint(other.getMAnchorPoint());
        }
        if (other.hasMAppearanceName()) {
          bitField0_ |= 0x00000004;
          mAppearanceName_ = other.mAppearanceName_;
          onChanged();
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00000008;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMAppearanceImage()) {
          return false;
        }
        if (!hasMAnchorPoint()) {
          return false;
        }
        if (!hasMAppearanceName()) {
          return false;
        }
        if (!getMAnchorPoint().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.EventAppearance parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.EventAppearance) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mAppearanceImage_ = "";
      /**
       * <pre>
       *事件外观
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public boolean hasMAppearanceImage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *事件外观
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public java.lang.String getMAppearanceImage() {
        java.lang.Object ref = mAppearanceImage_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mAppearanceImage_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *事件外观
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMAppearanceImageBytes() {
        java.lang.Object ref = mAppearanceImage_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mAppearanceImage_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *事件外观
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public Builder setMAppearanceImage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mAppearanceImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件外观
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public Builder clearMAppearanceImage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mAppearanceImage_ = getDefaultInstance().getMAppearanceImage();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件外观
       * </pre>
       *
       * <code>required string m_AppearanceImage = 1;</code>
       */
      public Builder setMAppearanceImageBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mAppearanceImage_ = value;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mAnchorPoint_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mAnchorPointBuilder_;
      /**
       * <pre>
       *图标大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public boolean hasMAnchorPoint() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *图标大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMAnchorPoint() {
        if (mAnchorPointBuilder_ == null) {
          return mAnchorPoint_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mAnchorPoint_;
        } else {
          return mAnchorPointBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *图标大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public Builder setMAnchorPoint(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mAnchorPointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mAnchorPoint_ = value;
          onChanged();
        } else {
          mAnchorPointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *图标大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public Builder setMAnchorPoint(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mAnchorPointBuilder_ == null) {
          mAnchorPoint_ = builderForValue.build();
          onChanged();
        } else {
          mAnchorPointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *图标大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public Builder mergeMAnchorPoint(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mAnchorPointBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              mAnchorPoint_ != null &&
              mAnchorPoint_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mAnchorPoint_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mAnchorPoint_).mergeFrom(value).buildPartial();
          } else {
            mAnchorPoint_ = value;
          }
          onChanged();
        } else {
          mAnchorPointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *图标大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public Builder clearMAnchorPoint() {
        if (mAnchorPointBuilder_ == null) {
          mAnchorPoint_ = null;
          onChanged();
        } else {
          mAnchorPointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       *图标大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMAnchorPointBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMAnchorPointFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *图标大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMAnchorPointOrBuilder() {
        if (mAnchorPointBuilder_ != null) {
          return mAnchorPointBuilder_.getMessageOrBuilder();
        } else {
          return mAnchorPoint_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mAnchorPoint_;
        }
      }
      /**
       * <pre>
       *图标大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_AnchorPoint = 2;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMAnchorPointFieldBuilder() {
        if (mAnchorPointBuilder_ == null) {
          mAnchorPointBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMAnchorPoint(),
                  getParentForChildren(),
                  isClean());
          mAnchorPoint_ = null;
        }
        return mAnchorPointBuilder_;
      }

      private java.lang.Object mAppearanceName_ = "";
      /**
       * <pre>
       *事件图标名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public boolean hasMAppearanceName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *事件图标名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public java.lang.String getMAppearanceName() {
        java.lang.Object ref = mAppearanceName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mAppearanceName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *事件图标名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMAppearanceNameBytes() {
        java.lang.Object ref = mAppearanceName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mAppearanceName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *事件图标名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public Builder setMAppearanceName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mAppearanceName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件图标名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public Builder clearMAppearanceName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mAppearanceName_ = getDefaultInstance().getMAppearanceName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件图标名称
       * </pre>
       *
       * <code>required string m_AppearanceName = 3;</code>
       */
      public Builder setMAppearanceNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mAppearanceName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 4;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.EventAppearance)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.EventAppearance)
    private static final com.nibiru.creator.data.HotPotData.EventAppearance DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.EventAppearance();
    }

    public static com.nibiru.creator.data.HotPotData.EventAppearance getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<EventAppearance>
        PARSER = new com.nibiru.protobuf.AbstractParser<EventAppearance>() {
      public EventAppearance parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new EventAppearance(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<EventAppearance> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<EventAppearance> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.EventAppearance getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.Event)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *事件ID
     * </pre>
     *
     * <code>optional int32 m_ID = 1;</code>
     */
    boolean hasMID();
    /**
     * <pre>
     *事件ID
     * </pre>
     *
     * <code>optional int32 m_ID = 1;</code>
     */
    int getMID();

    /**
     * <pre>
     *事件跳转到的场景ID
     * </pre>
     *
     * <code>optional int32 m_sceneId = 2;</code>
     */
    boolean hasMSceneId();
    /**
     * <pre>
     *事件跳转到的场景ID
     * </pre>
     *
     * <code>optional int32 m_sceneId = 2;</code>
     */
    int getMSceneId();

    /**
     * <pre>
     *事件在场景中的位置
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
     */
    boolean hasMPosition();
    /**
     * <pre>
     *事件在场景中的位置
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMPosition();
    /**
     * <pre>
     *事件在场景中的位置
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMPositionOrBuilder();

    /**
     * <pre>
     *事件名称
     * </pre>
     *
     * <code>optional string m_Name = 4;</code>
     */
    boolean hasMName();
    /**
     * <pre>
     *事件名称
     * </pre>
     *
     * <code>optional string m_Name = 4;</code>
     */
    java.lang.String getMName();
    /**
     * <pre>
     *事件名称
     * </pre>
     *
     * <code>optional string m_Name = 4;</code>
     */
    com.nibiru.protobuf.ByteString
        getMNameBytes();

    /**
     * <pre>
     *是否显示事件名称
     * </pre>
     *
     * <code>optional int32 m_ShowName = 5;</code>
     */
    boolean hasMShowName();
    /**
     * <pre>
     *是否显示事件名称
     * </pre>
     *
     * <code>optional int32 m_ShowName = 5;</code>
     */
    int getMShowName();

    /**
     * <pre>
     *触发时间
     * </pre>
     *
     * <code>optional int64 m_triggerTime = 6;</code>
     */
    boolean hasMTriggerTime();
    /**
     * <pre>
     *触发时间
     * </pre>
     *
     * <code>optional int64 m_triggerTime = 6;</code>
     */
    long getMTriggerTime();

    /**
     * <pre>
     *事件描述
     * </pre>
     *
     * <code>optional string m_description = 7;</code>
     */
    boolean hasMDescription();
    /**
     * <pre>
     *事件描述
     * </pre>
     *
     * <code>optional string m_description = 7;</code>
     */
    java.lang.String getMDescription();
    /**
     * <pre>
     *事件描述
     * </pre>
     *
     * <code>optional string m_description = 7;</code>
     */
    com.nibiru.protobuf.ByteString
        getMDescriptionBytes();

    /**
     * <pre>
     *事件开始的场景ID
     * </pre>
     *
     * <code>optional int32 m_startIndex = 8;</code>
     */
    boolean hasMStartIndex();
    /**
     * <pre>
     *事件开始的场景ID
     * </pre>
     *
     * <code>optional int32 m_startIndex = 8;</code>
     */
    int getMStartIndex();

    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_endIndex = 9;</code>
     */
    java.util.List<java.lang.Integer> getMEndIndexList();
    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_endIndex = 9;</code>
     */
    int getMEndIndexCount();
    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_endIndex = 9;</code>
     */
    int getMEndIndex(int index);

    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_nextSceneIds = 10;</code>
     */
    java.util.List<java.lang.Integer> getMNextSceneIdsList();
    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_nextSceneIds = 10;</code>
     */
    int getMNextSceneIdsCount();
    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_nextSceneIds = 10;</code>
     */
    int getMNextSceneIds(int index);

    /**
     * <pre>
     *事件的外观
     * </pre>
     *
     * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
     */
    boolean hasMAttribute();
    /**
     * <pre>
     *事件的外观
     * </pre>
     *
     * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
     */
    com.nibiru.creator.data.HotPotData.EventAppearance getMAttribute();
    /**
     * <pre>
     *事件的外观
     * </pre>
     *
     * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
     */
    com.nibiru.creator.data.HotPotData.EventAppearanceOrBuilder getMAttributeOrBuilder();

    /**
     * <pre>
     *是否是结束事件
     * </pre>
     *
     * <code>optional int32 m_isEndEvent = 12;</code>
     */
    boolean hasMIsEndEvent();
    /**
     * <pre>
     *是否是结束事件
     * </pre>
     *
     * <code>optional int32 m_isEndEvent = 12;</code>
     */
    int getMIsEndEvent();

    /**
     * <pre>
     *事件图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
     */
    boolean hasMLabelSize();
    /**
     * <pre>
     *事件图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMLabelSize();
    /**
     * <pre>
     *事件图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMLabelSizeOrBuilder();

    /**
     * <code>optional float m_Radius = 14;</code>
     */
    boolean hasMRadius();
    /**
     * <code>optional float m_Radius = 14;</code>
     */
    float getMRadius();

    /**
     * <code>optional int32 m_State = 15;</code>
     */
    boolean hasMState();
    /**
     * <code>optional int32 m_State = 15;</code>
     */
    int getMState();

    /**
     * <pre>
     *开始播放时间
     * </pre>
     *
     * <code>optional int64 startTime = 16;</code>
     */
    boolean hasStartTime();
    /**
     * <pre>
     *开始播放时间
     * </pre>
     *
     * <code>optional int64 startTime = 16;</code>
     */
    long getStartTime();

    /**
     * <pre>
     * optional int32             endTime=17;			//结束播放时间 - 此版本不再设置结束播放时间
     * </pre>
     *
     * <code>optional int32 m_arrowStyle = 17;</code>
     */
    boolean hasMArrowStyle();
    /**
     * <pre>
     * optional int32             endTime=17;			//结束播放时间 - 此版本不再设置结束播放时间
     * </pre>
     *
     * <code>optional int32 m_arrowStyle = 17;</code>
     */
    int getMArrowStyle();

    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
     */
    boolean hasMArrowColor();
    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4 getMArrowColor();
    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMArrowColorOrBuilder();

    /**
     * <pre>
     * (双向箭头样式 指向终点场景里的事件id)
     * </pre>
     *
     * <code>optional int32 m_HotOrEventIndex = 19;</code>
     */
    boolean hasMHotOrEventIndex();
    /**
     * <pre>
     * (双向箭头样式 指向终点场景里的事件id)
     * </pre>
     *
     * <code>optional int32 m_HotOrEventIndex = 19;</code>
     */
    int getMHotOrEventIndex();
  }
  /**
   * <pre>
   * 事件
   * </pre>
   *
   * Protobuf type {@code DataFactory.Event}
   */
  public  static final class Event extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.Event)
      EventOrBuilder {
    // Use Event.newBuilder() to construct.
    private Event(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Event() {
      mID_ = 0;
      mSceneId_ = 0;
      mName_ = "";
      mShowName_ = 0;
      mTriggerTime_ = 0L;
      mDescription_ = "";
      mStartIndex_ = 0;
      mEndIndex_ = java.util.Collections.emptyList();
      mNextSceneIds_ = java.util.Collections.emptyList();
      mIsEndEvent_ = 0;
      mRadius_ = 0F;
      mState_ = 0;
      startTime_ = 0L;
      mArrowStyle_ = 0;
      mHotOrEventIndex_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Event(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mSceneId_ = input.readInt32();
              break;
            }
            case 26: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = mPosition_.toBuilder();
              }
              mPosition_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mPosition_);
                mPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              mName_ = bs;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              mShowName_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mTriggerTime_ = input.readInt64();
              break;
            }
            case 58: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              mDescription_ = bs;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              mStartIndex_ = input.readInt32();
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                mEndIndex_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              mEndIndex_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                mEndIndex_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                mEndIndex_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                mNextSceneIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              mNextSceneIds_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                mNextSceneIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                mNextSceneIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 90: {
              com.nibiru.creator.data.HotPotData.EventAppearance.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = mAttribute_.toBuilder();
              }
              mAttribute_ = input.readMessage(com.nibiru.creator.data.HotPotData.EventAppearance.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mAttribute_);
                mAttribute_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 96: {
              bitField0_ |= 0x00000200;
              mIsEndEvent_ = input.readInt32();
              break;
            }
            case 106: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = mLabelSize_.toBuilder();
              }
              mLabelSize_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mLabelSize_);
                mLabelSize_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 117: {
              bitField0_ |= 0x00000800;
              mRadius_ = input.readFloat();
              break;
            }
            case 120: {
              bitField0_ |= 0x00001000;
              mState_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00002000;
              startTime_ = input.readInt64();
              break;
            }
            case 136: {
              bitField0_ |= 0x00004000;
              mArrowStyle_ = input.readInt32();
              break;
            }
            case 146: {
              com.nibiru.creator.data.HotPotData.Vec4.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = mArrowColor_.toBuilder();
              }
              mArrowColor_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec4.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mArrowColor_);
                mArrowColor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 152: {
              bitField0_ |= 0x00010000;
              mHotOrEventIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          mEndIndex_ = java.util.Collections.unmodifiableList(mEndIndex_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          mNextSceneIds_ = java.util.Collections.unmodifiableList(mNextSceneIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Event_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Event_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.Event.class, com.nibiru.creator.data.HotPotData.Event.Builder.class);
    }

    private int bitField0_;
    public static final int M_ID_FIELD_NUMBER = 1;
    private int mID_;
    /**
     * <pre>
     *事件ID
     * </pre>
     *
     * <code>optional int32 m_ID = 1;</code>
     */
    public boolean hasMID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *事件ID
     * </pre>
     *
     * <code>optional int32 m_ID = 1;</code>
     */
    public int getMID() {
      return mID_;
    }

    public static final int M_SCENEID_FIELD_NUMBER = 2;
    private int mSceneId_;
    /**
     * <pre>
     *事件跳转到的场景ID
     * </pre>
     *
     * <code>optional int32 m_sceneId = 2;</code>
     */
    public boolean hasMSceneId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *事件跳转到的场景ID
     * </pre>
     *
     * <code>optional int32 m_sceneId = 2;</code>
     */
    public int getMSceneId() {
      return mSceneId_;
    }

    public static final int M_POSITION_FIELD_NUMBER = 3;
    private com.nibiru.creator.data.HotPotData.Vec2 mPosition_;
    /**
     * <pre>
     *事件在场景中的位置
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
     */
    public boolean hasMPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *事件在场景中的位置
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMPosition() {
      return mPosition_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
    }
    /**
     * <pre>
     *事件在场景中的位置
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMPositionOrBuilder() {
      return mPosition_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
    }

    public static final int M_NAME_FIELD_NUMBER = 4;
    private volatile java.lang.Object mName_;
    /**
     * <pre>
     *事件名称
     * </pre>
     *
     * <code>optional string m_Name = 4;</code>
     */
    public boolean hasMName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *事件名称
     * </pre>
     *
     * <code>optional string m_Name = 4;</code>
     */
    public java.lang.String getMName() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *事件名称
     * </pre>
     *
     * <code>optional string m_Name = 4;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMNameBytes() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_SHOWNAME_FIELD_NUMBER = 5;
    private int mShowName_;
    /**
     * <pre>
     *是否显示事件名称
     * </pre>
     *
     * <code>optional int32 m_ShowName = 5;</code>
     */
    public boolean hasMShowName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *是否显示事件名称
     * </pre>
     *
     * <code>optional int32 m_ShowName = 5;</code>
     */
    public int getMShowName() {
      return mShowName_;
    }

    public static final int M_TRIGGERTIME_FIELD_NUMBER = 6;
    private long mTriggerTime_;
    /**
     * <pre>
     *触发时间
     * </pre>
     *
     * <code>optional int64 m_triggerTime = 6;</code>
     */
    public boolean hasMTriggerTime() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *触发时间
     * </pre>
     *
     * <code>optional int64 m_triggerTime = 6;</code>
     */
    public long getMTriggerTime() {
      return mTriggerTime_;
    }

    public static final int M_DESCRIPTION_FIELD_NUMBER = 7;
    private volatile java.lang.Object mDescription_;
    /**
     * <pre>
     *事件描述
     * </pre>
     *
     * <code>optional string m_description = 7;</code>
     */
    public boolean hasMDescription() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *事件描述
     * </pre>
     *
     * <code>optional string m_description = 7;</code>
     */
    public java.lang.String getMDescription() {
      java.lang.Object ref = mDescription_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mDescription_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *事件描述
     * </pre>
     *
     * <code>optional string m_description = 7;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMDescriptionBytes() {
      java.lang.Object ref = mDescription_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mDescription_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_STARTINDEX_FIELD_NUMBER = 8;
    private int mStartIndex_;
    /**
     * <pre>
     *事件开始的场景ID
     * </pre>
     *
     * <code>optional int32 m_startIndex = 8;</code>
     */
    public boolean hasMStartIndex() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *事件开始的场景ID
     * </pre>
     *
     * <code>optional int32 m_startIndex = 8;</code>
     */
    public int getMStartIndex() {
      return mStartIndex_;
    }

    public static final int M_ENDINDEX_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> mEndIndex_;
    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_endIndex = 9;</code>
     */
    public java.util.List<java.lang.Integer>
        getMEndIndexList() {
      return mEndIndex_;
    }
    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_endIndex = 9;</code>
     */
    public int getMEndIndexCount() {
      return mEndIndex_.size();
    }
    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_endIndex = 9;</code>
     */
    public int getMEndIndex(int index) {
      return mEndIndex_.get(index);
    }

    public static final int M_NEXTSCENEIDS_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> mNextSceneIds_;
    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_nextSceneIds = 10;</code>
     */
    public java.util.List<java.lang.Integer>
        getMNextSceneIdsList() {
      return mNextSceneIds_;
    }
    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_nextSceneIds = 10;</code>
     */
    public int getMNextSceneIdsCount() {
      return mNextSceneIds_.size();
    }
    /**
     * <pre>
     *跳转到的场景ID
     * </pre>
     *
     * <code>repeated int32 m_nextSceneIds = 10;</code>
     */
    public int getMNextSceneIds(int index) {
      return mNextSceneIds_.get(index);
    }

    public static final int M_ATTRIBUTE_FIELD_NUMBER = 11;
    private com.nibiru.creator.data.HotPotData.EventAppearance mAttribute_;
    /**
     * <pre>
     *事件的外观
     * </pre>
     *
     * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
     */
    public boolean hasMAttribute() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     *事件的外观
     * </pre>
     *
     * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
     */
    public com.nibiru.creator.data.HotPotData.EventAppearance getMAttribute() {
      return mAttribute_ == null ? com.nibiru.creator.data.HotPotData.EventAppearance.getDefaultInstance() : mAttribute_;
    }
    /**
     * <pre>
     *事件的外观
     * </pre>
     *
     * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
     */
    public com.nibiru.creator.data.HotPotData.EventAppearanceOrBuilder getMAttributeOrBuilder() {
      return mAttribute_ == null ? com.nibiru.creator.data.HotPotData.EventAppearance.getDefaultInstance() : mAttribute_;
    }

    public static final int M_ISENDEVENT_FIELD_NUMBER = 12;
    private int mIsEndEvent_;
    /**
     * <pre>
     *是否是结束事件
     * </pre>
     *
     * <code>optional int32 m_isEndEvent = 12;</code>
     */
    public boolean hasMIsEndEvent() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     *是否是结束事件
     * </pre>
     *
     * <code>optional int32 m_isEndEvent = 12;</code>
     */
    public int getMIsEndEvent() {
      return mIsEndEvent_;
    }

    public static final int M_LABELSIZE_FIELD_NUMBER = 13;
    private com.nibiru.creator.data.HotPotData.Vec2 mLabelSize_;
    /**
     * <pre>
     *事件图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
     */
    public boolean hasMLabelSize() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     *事件图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMLabelSize() {
      return mLabelSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mLabelSize_;
    }
    /**
     * <pre>
     *事件图标大小
     * </pre>
     *
     * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMLabelSizeOrBuilder() {
      return mLabelSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mLabelSize_;
    }

    public static final int M_RADIUS_FIELD_NUMBER = 14;
    private float mRadius_;
    /**
     * <code>optional float m_Radius = 14;</code>
     */
    public boolean hasMRadius() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float m_Radius = 14;</code>
     */
    public float getMRadius() {
      return mRadius_;
    }

    public static final int M_STATE_FIELD_NUMBER = 15;
    private int mState_;
    /**
     * <code>optional int32 m_State = 15;</code>
     */
    public boolean hasMState() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 m_State = 15;</code>
     */
    public int getMState() {
      return mState_;
    }

    public static final int STARTTIME_FIELD_NUMBER = 16;
    private long startTime_;
    /**
     * <pre>
     *开始播放时间
     * </pre>
     *
     * <code>optional int64 startTime = 16;</code>
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     *开始播放时间
     * </pre>
     *
     * <code>optional int64 startTime = 16;</code>
     */
    public long getStartTime() {
      return startTime_;
    }

    public static final int M_ARROWSTYLE_FIELD_NUMBER = 17;
    private int mArrowStyle_;
    /**
     * <pre>
     * optional int32             endTime=17;			//结束播放时间 - 此版本不再设置结束播放时间
     * </pre>
     *
     * <code>optional int32 m_arrowStyle = 17;</code>
     */
    public boolean hasMArrowStyle() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <pre>
     * optional int32             endTime=17;			//结束播放时间 - 此版本不再设置结束播放时间
     * </pre>
     *
     * <code>optional int32 m_arrowStyle = 17;</code>
     */
    public int getMArrowStyle() {
      return mArrowStyle_;
    }

    public static final int M_ARROWCOLOR_FIELD_NUMBER = 18;
    private com.nibiru.creator.data.HotPotData.Vec4 mArrowColor_;
    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
     */
    public boolean hasMArrowColor() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4 getMArrowColor() {
      return mArrowColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mArrowColor_;
    }
    /**
     * <pre>
     *箭头颜色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMArrowColorOrBuilder() {
      return mArrowColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mArrowColor_;
    }

    public static final int M_HOTOREVENTINDEX_FIELD_NUMBER = 19;
    private int mHotOrEventIndex_;
    /**
     * <pre>
     * (双向箭头样式 指向终点场景里的事件id)
     * </pre>
     *
     * <code>optional int32 m_HotOrEventIndex = 19;</code>
     */
    public boolean hasMHotOrEventIndex() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <pre>
     * (双向箭头样式 指向终点场景里的事件id)
     * </pre>
     *
     * <code>optional int32 m_HotOrEventIndex = 19;</code>
     */
    public int getMHotOrEventIndex() {
      return mHotOrEventIndex_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMAttribute()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMPosition()) {
        if (!getMPosition().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getMAttribute().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMLabelSize()) {
        if (!getMLabelSize().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMArrowColor()) {
        if (!getMArrowColor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mSceneId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getMPosition());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 4, mName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, mShowName_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt64(6, mTriggerTime_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 7, mDescription_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, mStartIndex_);
      }
      for (int i = 0; i < mEndIndex_.size(); i++) {
        output.writeInt32(9, mEndIndex_.get(i));
      }
      for (int i = 0; i < mNextSceneIds_.size(); i++) {
        output.writeInt32(10, mNextSceneIds_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(11, getMAttribute());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(12, mIsEndEvent_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(13, getMLabelSize());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(14, mRadius_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(15, mState_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt64(16, startTime_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(17, mArrowStyle_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(18, getMArrowColor());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(19, mHotOrEventIndex_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(1, mID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(2, mSceneId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(3, getMPosition());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(4, mName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(5, mShowName_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(6, mTriggerTime_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(7, mDescription_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(8, mStartIndex_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mEndIndex_.size(); i++) {
          dataSize += com.nibiru.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mEndIndex_.get(i));
        }
        size += dataSize;
        size += 1 * getMEndIndexList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mNextSceneIds_.size(); i++) {
          dataSize += com.nibiru.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mNextSceneIds_.get(i));
        }
        size += dataSize;
        size += 1 * getMNextSceneIdsList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(11, getMAttribute());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(12, mIsEndEvent_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(13, getMLabelSize());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(14, mRadius_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(15, mState_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(16, startTime_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(17, mArrowStyle_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(18, getMArrowColor());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(19, mHotOrEventIndex_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.Event)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.Event other = (com.nibiru.creator.data.HotPotData.Event) obj;

      boolean result = true;
      result = result && (hasMID() == other.hasMID());
      if (hasMID()) {
        result = result && (getMID()
            == other.getMID());
      }
      result = result && (hasMSceneId() == other.hasMSceneId());
      if (hasMSceneId()) {
        result = result && (getMSceneId()
            == other.getMSceneId());
      }
      result = result && (hasMPosition() == other.hasMPosition());
      if (hasMPosition()) {
        result = result && getMPosition()
            .equals(other.getMPosition());
      }
      result = result && (hasMName() == other.hasMName());
      if (hasMName()) {
        result = result && getMName()
            .equals(other.getMName());
      }
      result = result && (hasMShowName() == other.hasMShowName());
      if (hasMShowName()) {
        result = result && (getMShowName()
            == other.getMShowName());
      }
      result = result && (hasMTriggerTime() == other.hasMTriggerTime());
      if (hasMTriggerTime()) {
        result = result && (getMTriggerTime()
            == other.getMTriggerTime());
      }
      result = result && (hasMDescription() == other.hasMDescription());
      if (hasMDescription()) {
        result = result && getMDescription()
            .equals(other.getMDescription());
      }
      result = result && (hasMStartIndex() == other.hasMStartIndex());
      if (hasMStartIndex()) {
        result = result && (getMStartIndex()
            == other.getMStartIndex());
      }
      result = result && getMEndIndexList()
          .equals(other.getMEndIndexList());
      result = result && getMNextSceneIdsList()
          .equals(other.getMNextSceneIdsList());
      result = result && (hasMAttribute() == other.hasMAttribute());
      if (hasMAttribute()) {
        result = result && getMAttribute()
            .equals(other.getMAttribute());
      }
      result = result && (hasMIsEndEvent() == other.hasMIsEndEvent());
      if (hasMIsEndEvent()) {
        result = result && (getMIsEndEvent()
            == other.getMIsEndEvent());
      }
      result = result && (hasMLabelSize() == other.hasMLabelSize());
      if (hasMLabelSize()) {
        result = result && getMLabelSize()
            .equals(other.getMLabelSize());
      }
      result = result && (hasMRadius() == other.hasMRadius());
      if (hasMRadius()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMRadius())
            == java.lang.Float.floatToIntBits(
                other.getMRadius()));
      }
      result = result && (hasMState() == other.hasMState());
      if (hasMState()) {
        result = result && (getMState()
            == other.getMState());
      }
      result = result && (hasStartTime() == other.hasStartTime());
      if (hasStartTime()) {
        result = result && (getStartTime()
            == other.getStartTime());
      }
      result = result && (hasMArrowStyle() == other.hasMArrowStyle());
      if (hasMArrowStyle()) {
        result = result && (getMArrowStyle()
            == other.getMArrowStyle());
      }
      result = result && (hasMArrowColor() == other.hasMArrowColor());
      if (hasMArrowColor()) {
        result = result && getMArrowColor()
            .equals(other.getMArrowColor());
      }
      result = result && (hasMHotOrEventIndex() == other.hasMHotOrEventIndex());
      if (hasMHotOrEventIndex()) {
        result = result && (getMHotOrEventIndex()
            == other.getMHotOrEventIndex());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMID()) {
        hash = (37 * hash) + M_ID_FIELD_NUMBER;
        hash = (53 * hash) + getMID();
      }
      if (hasMSceneId()) {
        hash = (37 * hash) + M_SCENEID_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneId();
      }
      if (hasMPosition()) {
        hash = (37 * hash) + M_POSITION_FIELD_NUMBER;
        hash = (53 * hash) + getMPosition().hashCode();
      }
      if (hasMName()) {
        hash = (37 * hash) + M_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getMName().hashCode();
      }
      if (hasMShowName()) {
        hash = (37 * hash) + M_SHOWNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMShowName();
      }
      if (hasMTriggerTime()) {
        hash = (37 * hash) + M_TRIGGERTIME_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getMTriggerTime());
      }
      if (hasMDescription()) {
        hash = (37 * hash) + M_DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getMDescription().hashCode();
      }
      if (hasMStartIndex()) {
        hash = (37 * hash) + M_STARTINDEX_FIELD_NUMBER;
        hash = (53 * hash) + getMStartIndex();
      }
      if (getMEndIndexCount() > 0) {
        hash = (37 * hash) + M_ENDINDEX_FIELD_NUMBER;
        hash = (53 * hash) + getMEndIndexList().hashCode();
      }
      if (getMNextSceneIdsCount() > 0) {
        hash = (37 * hash) + M_NEXTSCENEIDS_FIELD_NUMBER;
        hash = (53 * hash) + getMNextSceneIdsList().hashCode();
      }
      if (hasMAttribute()) {
        hash = (37 * hash) + M_ATTRIBUTE_FIELD_NUMBER;
        hash = (53 * hash) + getMAttribute().hashCode();
      }
      if (hasMIsEndEvent()) {
        hash = (37 * hash) + M_ISENDEVENT_FIELD_NUMBER;
        hash = (53 * hash) + getMIsEndEvent();
      }
      if (hasMLabelSize()) {
        hash = (37 * hash) + M_LABELSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMLabelSize().hashCode();
      }
      if (hasMRadius()) {
        hash = (37 * hash) + M_RADIUS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMRadius());
      }
      if (hasMState()) {
        hash = (37 * hash) + M_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getMState();
      }
      if (hasStartTime()) {
        hash = (37 * hash) + STARTTIME_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getStartTime());
      }
      if (hasMArrowStyle()) {
        hash = (37 * hash) + M_ARROWSTYLE_FIELD_NUMBER;
        hash = (53 * hash) + getMArrowStyle();
      }
      if (hasMArrowColor()) {
        hash = (37 * hash) + M_ARROWCOLOR_FIELD_NUMBER;
        hash = (53 * hash) + getMArrowColor().hashCode();
      }
      if (hasMHotOrEventIndex()) {
        hash = (37 * hash) + M_HOTOREVENTINDEX_FIELD_NUMBER;
        hash = (53 * hash) + getMHotOrEventIndex();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.Event parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Event parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Event parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Event parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Event parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Event parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Event parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Event parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Event parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Event parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.Event prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 事件
     * </pre>
     *
     * Protobuf type {@code DataFactory.Event}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.Event)
        com.nibiru.creator.data.HotPotData.EventOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Event_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Event_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.Event.class, com.nibiru.creator.data.HotPotData.Event.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.Event.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMPositionFieldBuilder();
          getMAttributeFieldBuilder();
          getMLabelSizeFieldBuilder();
          getMArrowColorFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        mSceneId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (mPositionBuilder_ == null) {
          mPosition_ = null;
        } else {
          mPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        mName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        mShowName_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mTriggerTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        mDescription_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        mStartIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        mEndIndex_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        mNextSceneIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        if (mAttributeBuilder_ == null) {
          mAttribute_ = null;
        } else {
          mAttributeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        mIsEndEvent_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        if (mLabelSizeBuilder_ == null) {
          mLabelSize_ = null;
        } else {
          mLabelSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        mRadius_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        mState_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        startTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00008000);
        mArrowStyle_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        if (mArrowColorBuilder_ == null) {
          mArrowColor_ = null;
        } else {
          mArrowColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        mHotOrEventIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Event_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.Event getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.Event.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.Event build() {
        com.nibiru.creator.data.HotPotData.Event result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.Event buildPartial() {
        com.nibiru.creator.data.HotPotData.Event result = new com.nibiru.creator.data.HotPotData.Event(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mID_ = mID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mSceneId_ = mSceneId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (mPositionBuilder_ == null) {
          result.mPosition_ = mPosition_;
        } else {
          result.mPosition_ = mPositionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mName_ = mName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mShowName_ = mShowName_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mTriggerTime_ = mTriggerTime_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mDescription_ = mDescription_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mStartIndex_ = mStartIndex_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          mEndIndex_ = java.util.Collections.unmodifiableList(mEndIndex_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.mEndIndex_ = mEndIndex_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          mNextSceneIds_ = java.util.Collections.unmodifiableList(mNextSceneIds_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.mNextSceneIds_ = mNextSceneIds_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000100;
        }
        if (mAttributeBuilder_ == null) {
          result.mAttribute_ = mAttribute_;
        } else {
          result.mAttribute_ = mAttributeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000200;
        }
        result.mIsEndEvent_ = mIsEndEvent_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000400;
        }
        if (mLabelSizeBuilder_ == null) {
          result.mLabelSize_ = mLabelSize_;
        } else {
          result.mLabelSize_ = mLabelSizeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.mRadius_ = mRadius_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.mState_ = mState_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.startTime_ = startTime_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.mArrowStyle_ = mArrowStyle_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (mArrowColorBuilder_ == null) {
          result.mArrowColor_ = mArrowColor_;
        } else {
          result.mArrowColor_ = mArrowColorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.mHotOrEventIndex_ = mHotOrEventIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.Event) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.Event)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.Event other) {
        if (other == com.nibiru.creator.data.HotPotData.Event.getDefaultInstance()) return this;
        if (other.hasMID()) {
          setMID(other.getMID());
        }
        if (other.hasMSceneId()) {
          setMSceneId(other.getMSceneId());
        }
        if (other.hasMPosition()) {
          mergeMPosition(other.getMPosition());
        }
        if (other.hasMName()) {
          bitField0_ |= 0x00000008;
          mName_ = other.mName_;
          onChanged();
        }
        if (other.hasMShowName()) {
          setMShowName(other.getMShowName());
        }
        if (other.hasMTriggerTime()) {
          setMTriggerTime(other.getMTriggerTime());
        }
        if (other.hasMDescription()) {
          bitField0_ |= 0x00000040;
          mDescription_ = other.mDescription_;
          onChanged();
        }
        if (other.hasMStartIndex()) {
          setMStartIndex(other.getMStartIndex());
        }
        if (!other.mEndIndex_.isEmpty()) {
          if (mEndIndex_.isEmpty()) {
            mEndIndex_ = other.mEndIndex_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureMEndIndexIsMutable();
            mEndIndex_.addAll(other.mEndIndex_);
          }
          onChanged();
        }
        if (!other.mNextSceneIds_.isEmpty()) {
          if (mNextSceneIds_.isEmpty()) {
            mNextSceneIds_ = other.mNextSceneIds_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureMNextSceneIdsIsMutable();
            mNextSceneIds_.addAll(other.mNextSceneIds_);
          }
          onChanged();
        }
        if (other.hasMAttribute()) {
          mergeMAttribute(other.getMAttribute());
        }
        if (other.hasMIsEndEvent()) {
          setMIsEndEvent(other.getMIsEndEvent());
        }
        if (other.hasMLabelSize()) {
          mergeMLabelSize(other.getMLabelSize());
        }
        if (other.hasMRadius()) {
          setMRadius(other.getMRadius());
        }
        if (other.hasMState()) {
          setMState(other.getMState());
        }
        if (other.hasStartTime()) {
          setStartTime(other.getStartTime());
        }
        if (other.hasMArrowStyle()) {
          setMArrowStyle(other.getMArrowStyle());
        }
        if (other.hasMArrowColor()) {
          mergeMArrowColor(other.getMArrowColor());
        }
        if (other.hasMHotOrEventIndex()) {
          setMHotOrEventIndex(other.getMHotOrEventIndex());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMAttribute()) {
          return false;
        }
        if (hasMPosition()) {
          if (!getMPosition().isInitialized()) {
            return false;
          }
        }
        if (!getMAttribute().isInitialized()) {
          return false;
        }
        if (hasMLabelSize()) {
          if (!getMLabelSize().isInitialized()) {
            return false;
          }
        }
        if (hasMArrowColor()) {
          if (!getMArrowColor().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.Event parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.Event) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int mID_ ;
      /**
       * <pre>
       *事件ID
       * </pre>
       *
       * <code>optional int32 m_ID = 1;</code>
       */
      public boolean hasMID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *事件ID
       * </pre>
       *
       * <code>optional int32 m_ID = 1;</code>
       */
      public int getMID() {
        return mID_;
      }
      /**
       * <pre>
       *事件ID
       * </pre>
       *
       * <code>optional int32 m_ID = 1;</code>
       */
      public Builder setMID(int value) {
        bitField0_ |= 0x00000001;
        mID_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件ID
       * </pre>
       *
       * <code>optional int32 m_ID = 1;</code>
       */
      public Builder clearMID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mID_ = 0;
        onChanged();
        return this;
      }

      private int mSceneId_ ;
      /**
       * <pre>
       *事件跳转到的场景ID
       * </pre>
       *
       * <code>optional int32 m_sceneId = 2;</code>
       */
      public boolean hasMSceneId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *事件跳转到的场景ID
       * </pre>
       *
       * <code>optional int32 m_sceneId = 2;</code>
       */
      public int getMSceneId() {
        return mSceneId_;
      }
      /**
       * <pre>
       *事件跳转到的场景ID
       * </pre>
       *
       * <code>optional int32 m_sceneId = 2;</code>
       */
      public Builder setMSceneId(int value) {
        bitField0_ |= 0x00000002;
        mSceneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件跳转到的场景ID
       * </pre>
       *
       * <code>optional int32 m_sceneId = 2;</code>
       */
      public Builder clearMSceneId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mSceneId_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mPosition_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mPositionBuilder_;
      /**
       * <pre>
       *事件在场景中的位置
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
       */
      public boolean hasMPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *事件在场景中的位置
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMPosition() {
        if (mPositionBuilder_ == null) {
          return mPosition_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
        } else {
          return mPositionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *事件在场景中的位置
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
       */
      public Builder setMPosition(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mPosition_ = value;
          onChanged();
        } else {
          mPositionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *事件在场景中的位置
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
       */
      public Builder setMPosition(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mPositionBuilder_ == null) {
          mPosition_ = builderForValue.build();
          onChanged();
        } else {
          mPositionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *事件在场景中的位置
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
       */
      public Builder mergeMPosition(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mPositionBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              mPosition_ != null &&
              mPosition_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mPosition_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mPosition_).mergeFrom(value).buildPartial();
          } else {
            mPosition_ = value;
          }
          onChanged();
        } else {
          mPositionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *事件在场景中的位置
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
       */
      public Builder clearMPosition() {
        if (mPositionBuilder_ == null) {
          mPosition_ = null;
          onChanged();
        } else {
          mPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       *事件在场景中的位置
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMPositionBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMPositionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *事件在场景中的位置
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMPositionOrBuilder() {
        if (mPositionBuilder_ != null) {
          return mPositionBuilder_.getMessageOrBuilder();
        } else {
          return mPosition_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
        }
      }
      /**
       * <pre>
       *事件在场景中的位置
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_Position = 3;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMPositionFieldBuilder() {
        if (mPositionBuilder_ == null) {
          mPositionBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMPosition(),
                  getParentForChildren(),
                  isClean());
          mPosition_ = null;
        }
        return mPositionBuilder_;
      }

      private java.lang.Object mName_ = "";
      /**
       * <pre>
       *事件名称
       * </pre>
       *
       * <code>optional string m_Name = 4;</code>
       */
      public boolean hasMName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *事件名称
       * </pre>
       *
       * <code>optional string m_Name = 4;</code>
       */
      public java.lang.String getMName() {
        java.lang.Object ref = mName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *事件名称
       * </pre>
       *
       * <code>optional string m_Name = 4;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMNameBytes() {
        java.lang.Object ref = mName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *事件名称
       * </pre>
       *
       * <code>optional string m_Name = 4;</code>
       */
      public Builder setMName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件名称
       * </pre>
       *
       * <code>optional string m_Name = 4;</code>
       */
      public Builder clearMName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mName_ = getDefaultInstance().getMName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件名称
       * </pre>
       *
       * <code>optional string m_Name = 4;</code>
       */
      public Builder setMNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mName_ = value;
        onChanged();
        return this;
      }

      private int mShowName_ ;
      /**
       * <pre>
       *是否显示事件名称
       * </pre>
       *
       * <code>optional int32 m_ShowName = 5;</code>
       */
      public boolean hasMShowName() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *是否显示事件名称
       * </pre>
       *
       * <code>optional int32 m_ShowName = 5;</code>
       */
      public int getMShowName() {
        return mShowName_;
      }
      /**
       * <pre>
       *是否显示事件名称
       * </pre>
       *
       * <code>optional int32 m_ShowName = 5;</code>
       */
      public Builder setMShowName(int value) {
        bitField0_ |= 0x00000010;
        mShowName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *是否显示事件名称
       * </pre>
       *
       * <code>optional int32 m_ShowName = 5;</code>
       */
      public Builder clearMShowName() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mShowName_ = 0;
        onChanged();
        return this;
      }

      private long mTriggerTime_ ;
      /**
       * <pre>
       *触发时间
       * </pre>
       *
       * <code>optional int64 m_triggerTime = 6;</code>
       */
      public boolean hasMTriggerTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *触发时间
       * </pre>
       *
       * <code>optional int64 m_triggerTime = 6;</code>
       */
      public long getMTriggerTime() {
        return mTriggerTime_;
      }
      /**
       * <pre>
       *触发时间
       * </pre>
       *
       * <code>optional int64 m_triggerTime = 6;</code>
       */
      public Builder setMTriggerTime(long value) {
        bitField0_ |= 0x00000020;
        mTriggerTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *触发时间
       * </pre>
       *
       * <code>optional int64 m_triggerTime = 6;</code>
       */
      public Builder clearMTriggerTime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mTriggerTime_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object mDescription_ = "";
      /**
       * <pre>
       *事件描述
       * </pre>
       *
       * <code>optional string m_description = 7;</code>
       */
      public boolean hasMDescription() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *事件描述
       * </pre>
       *
       * <code>optional string m_description = 7;</code>
       */
      public java.lang.String getMDescription() {
        java.lang.Object ref = mDescription_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mDescription_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *事件描述
       * </pre>
       *
       * <code>optional string m_description = 7;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMDescriptionBytes() {
        java.lang.Object ref = mDescription_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mDescription_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *事件描述
       * </pre>
       *
       * <code>optional string m_description = 7;</code>
       */
      public Builder setMDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mDescription_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件描述
       * </pre>
       *
       * <code>optional string m_description = 7;</code>
       */
      public Builder clearMDescription() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mDescription_ = getDefaultInstance().getMDescription();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件描述
       * </pre>
       *
       * <code>optional string m_description = 7;</code>
       */
      public Builder setMDescriptionBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mDescription_ = value;
        onChanged();
        return this;
      }

      private int mStartIndex_ ;
      /**
       * <pre>
       *事件开始的场景ID
       * </pre>
       *
       * <code>optional int32 m_startIndex = 8;</code>
       */
      public boolean hasMStartIndex() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       *事件开始的场景ID
       * </pre>
       *
       * <code>optional int32 m_startIndex = 8;</code>
       */
      public int getMStartIndex() {
        return mStartIndex_;
      }
      /**
       * <pre>
       *事件开始的场景ID
       * </pre>
       *
       * <code>optional int32 m_startIndex = 8;</code>
       */
      public Builder setMStartIndex(int value) {
        bitField0_ |= 0x00000080;
        mStartIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *事件开始的场景ID
       * </pre>
       *
       * <code>optional int32 m_startIndex = 8;</code>
       */
      public Builder clearMStartIndex() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mStartIndex_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> mEndIndex_ = java.util.Collections.emptyList();
      private void ensureMEndIndexIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          mEndIndex_ = new java.util.ArrayList<java.lang.Integer>(mEndIndex_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_endIndex = 9;</code>
       */
      public java.util.List<java.lang.Integer>
          getMEndIndexList() {
        return java.util.Collections.unmodifiableList(mEndIndex_);
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_endIndex = 9;</code>
       */
      public int getMEndIndexCount() {
        return mEndIndex_.size();
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_endIndex = 9;</code>
       */
      public int getMEndIndex(int index) {
        return mEndIndex_.get(index);
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_endIndex = 9;</code>
       */
      public Builder setMEndIndex(
          int index, int value) {
        ensureMEndIndexIsMutable();
        mEndIndex_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_endIndex = 9;</code>
       */
      public Builder addMEndIndex(int value) {
        ensureMEndIndexIsMutable();
        mEndIndex_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_endIndex = 9;</code>
       */
      public Builder addAllMEndIndex(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMEndIndexIsMutable();
        com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
            values, mEndIndex_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_endIndex = 9;</code>
       */
      public Builder clearMEndIndex() {
        mEndIndex_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> mNextSceneIds_ = java.util.Collections.emptyList();
      private void ensureMNextSceneIdsIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          mNextSceneIds_ = new java.util.ArrayList<java.lang.Integer>(mNextSceneIds_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_nextSceneIds = 10;</code>
       */
      public java.util.List<java.lang.Integer>
          getMNextSceneIdsList() {
        return java.util.Collections.unmodifiableList(mNextSceneIds_);
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_nextSceneIds = 10;</code>
       */
      public int getMNextSceneIdsCount() {
        return mNextSceneIds_.size();
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_nextSceneIds = 10;</code>
       */
      public int getMNextSceneIds(int index) {
        return mNextSceneIds_.get(index);
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_nextSceneIds = 10;</code>
       */
      public Builder setMNextSceneIds(
          int index, int value) {
        ensureMNextSceneIdsIsMutable();
        mNextSceneIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_nextSceneIds = 10;</code>
       */
      public Builder addMNextSceneIds(int value) {
        ensureMNextSceneIdsIsMutable();
        mNextSceneIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_nextSceneIds = 10;</code>
       */
      public Builder addAllMNextSceneIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMNextSceneIdsIsMutable();
        com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
            values, mNextSceneIds_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *跳转到的场景ID
       * </pre>
       *
       * <code>repeated int32 m_nextSceneIds = 10;</code>
       */
      public Builder clearMNextSceneIds() {
        mNextSceneIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.EventAppearance mAttribute_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.EventAppearance, com.nibiru.creator.data.HotPotData.EventAppearance.Builder, com.nibiru.creator.data.HotPotData.EventAppearanceOrBuilder> mAttributeBuilder_;
      /**
       * <pre>
       *事件的外观
       * </pre>
       *
       * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
       */
      public boolean hasMAttribute() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       *事件的外观
       * </pre>
       *
       * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.EventAppearance getMAttribute() {
        if (mAttributeBuilder_ == null) {
          return mAttribute_ == null ? com.nibiru.creator.data.HotPotData.EventAppearance.getDefaultInstance() : mAttribute_;
        } else {
          return mAttributeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *事件的外观
       * </pre>
       *
       * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
       */
      public Builder setMAttribute(com.nibiru.creator.data.HotPotData.EventAppearance value) {
        if (mAttributeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mAttribute_ = value;
          onChanged();
        } else {
          mAttributeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *事件的外观
       * </pre>
       *
       * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
       */
      public Builder setMAttribute(
          com.nibiru.creator.data.HotPotData.EventAppearance.Builder builderForValue) {
        if (mAttributeBuilder_ == null) {
          mAttribute_ = builderForValue.build();
          onChanged();
        } else {
          mAttributeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *事件的外观
       * </pre>
       *
       * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
       */
      public Builder mergeMAttribute(com.nibiru.creator.data.HotPotData.EventAppearance value) {
        if (mAttributeBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              mAttribute_ != null &&
              mAttribute_ != com.nibiru.creator.data.HotPotData.EventAppearance.getDefaultInstance()) {
            mAttribute_ =
              com.nibiru.creator.data.HotPotData.EventAppearance.newBuilder(mAttribute_).mergeFrom(value).buildPartial();
          } else {
            mAttribute_ = value;
          }
          onChanged();
        } else {
          mAttributeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *事件的外观
       * </pre>
       *
       * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
       */
      public Builder clearMAttribute() {
        if (mAttributeBuilder_ == null) {
          mAttribute_ = null;
          onChanged();
        } else {
          mAttributeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <pre>
       *事件的外观
       * </pre>
       *
       * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.EventAppearance.Builder getMAttributeBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getMAttributeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *事件的外观
       * </pre>
       *
       * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.EventAppearanceOrBuilder getMAttributeOrBuilder() {
        if (mAttributeBuilder_ != null) {
          return mAttributeBuilder_.getMessageOrBuilder();
        } else {
          return mAttribute_ == null ?
              com.nibiru.creator.data.HotPotData.EventAppearance.getDefaultInstance() : mAttribute_;
        }
      }
      /**
       * <pre>
       *事件的外观
       * </pre>
       *
       * <code>required .DataFactory.EventAppearance m_Attribute = 11;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.EventAppearance, com.nibiru.creator.data.HotPotData.EventAppearance.Builder, com.nibiru.creator.data.HotPotData.EventAppearanceOrBuilder> 
          getMAttributeFieldBuilder() {
        if (mAttributeBuilder_ == null) {
          mAttributeBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.EventAppearance, com.nibiru.creator.data.HotPotData.EventAppearance.Builder, com.nibiru.creator.data.HotPotData.EventAppearanceOrBuilder>(
                  getMAttribute(),
                  getParentForChildren(),
                  isClean());
          mAttribute_ = null;
        }
        return mAttributeBuilder_;
      }

      private int mIsEndEvent_ ;
      /**
       * <pre>
       *是否是结束事件
       * </pre>
       *
       * <code>optional int32 m_isEndEvent = 12;</code>
       */
      public boolean hasMIsEndEvent() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       *是否是结束事件
       * </pre>
       *
       * <code>optional int32 m_isEndEvent = 12;</code>
       */
      public int getMIsEndEvent() {
        return mIsEndEvent_;
      }
      /**
       * <pre>
       *是否是结束事件
       * </pre>
       *
       * <code>optional int32 m_isEndEvent = 12;</code>
       */
      public Builder setMIsEndEvent(int value) {
        bitField0_ |= 0x00000800;
        mIsEndEvent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *是否是结束事件
       * </pre>
       *
       * <code>optional int32 m_isEndEvent = 12;</code>
       */
      public Builder clearMIsEndEvent() {
        bitField0_ = (bitField0_ & ~0x00000800);
        mIsEndEvent_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mLabelSize_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mLabelSizeBuilder_;
      /**
       * <pre>
       *事件图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
       */
      public boolean hasMLabelSize() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       *事件图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMLabelSize() {
        if (mLabelSizeBuilder_ == null) {
          return mLabelSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mLabelSize_;
        } else {
          return mLabelSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *事件图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
       */
      public Builder setMLabelSize(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mLabelSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mLabelSize_ = value;
          onChanged();
        } else {
          mLabelSizeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       *事件图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
       */
      public Builder setMLabelSize(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mLabelSizeBuilder_ == null) {
          mLabelSize_ = builderForValue.build();
          onChanged();
        } else {
          mLabelSizeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       *事件图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
       */
      public Builder mergeMLabelSize(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mLabelSizeBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              mLabelSize_ != null &&
              mLabelSize_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mLabelSize_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mLabelSize_).mergeFrom(value).buildPartial();
          } else {
            mLabelSize_ = value;
          }
          onChanged();
        } else {
          mLabelSizeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <pre>
       *事件图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
       */
      public Builder clearMLabelSize() {
        if (mLabelSizeBuilder_ == null) {
          mLabelSize_ = null;
          onChanged();
        } else {
          mLabelSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <pre>
       *事件图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMLabelSizeBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getMLabelSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *事件图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMLabelSizeOrBuilder() {
        if (mLabelSizeBuilder_ != null) {
          return mLabelSizeBuilder_.getMessageOrBuilder();
        } else {
          return mLabelSize_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mLabelSize_;
        }
      }
      /**
       * <pre>
       *事件图标大小
       * </pre>
       *
       * <code>optional .DataFactory.Vec2 m_labelSize = 13;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMLabelSizeFieldBuilder() {
        if (mLabelSizeBuilder_ == null) {
          mLabelSizeBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMLabelSize(),
                  getParentForChildren(),
                  isClean());
          mLabelSize_ = null;
        }
        return mLabelSizeBuilder_;
      }

      private float mRadius_ ;
      /**
       * <code>optional float m_Radius = 14;</code>
       */
      public boolean hasMRadius() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float m_Radius = 14;</code>
       */
      public float getMRadius() {
        return mRadius_;
      }
      /**
       * <code>optional float m_Radius = 14;</code>
       */
      public Builder setMRadius(float value) {
        bitField0_ |= 0x00002000;
        mRadius_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float m_Radius = 14;</code>
       */
      public Builder clearMRadius() {
        bitField0_ = (bitField0_ & ~0x00002000);
        mRadius_ = 0F;
        onChanged();
        return this;
      }

      private int mState_ ;
      /**
       * <code>optional int32 m_State = 15;</code>
       */
      public boolean hasMState() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 m_State = 15;</code>
       */
      public int getMState() {
        return mState_;
      }
      /**
       * <code>optional int32 m_State = 15;</code>
       */
      public Builder setMState(int value) {
        bitField0_ |= 0x00004000;
        mState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 m_State = 15;</code>
       */
      public Builder clearMState() {
        bitField0_ = (bitField0_ & ~0x00004000);
        mState_ = 0;
        onChanged();
        return this;
      }

      private long startTime_ ;
      /**
       * <pre>
       *开始播放时间
       * </pre>
       *
       * <code>optional int64 startTime = 16;</code>
       */
      public boolean hasStartTime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <pre>
       *开始播放时间
       * </pre>
       *
       * <code>optional int64 startTime = 16;</code>
       */
      public long getStartTime() {
        return startTime_;
      }
      /**
       * <pre>
       *开始播放时间
       * </pre>
       *
       * <code>optional int64 startTime = 16;</code>
       */
      public Builder setStartTime(long value) {
        bitField0_ |= 0x00008000;
        startTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *开始播放时间
       * </pre>
       *
       * <code>optional int64 startTime = 16;</code>
       */
      public Builder clearStartTime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        startTime_ = 0L;
        onChanged();
        return this;
      }

      private int mArrowStyle_ ;
      /**
       * <pre>
       * optional int32             endTime=17;			//结束播放时间 - 此版本不再设置结束播放时间
       * </pre>
       *
       * <code>optional int32 m_arrowStyle = 17;</code>
       */
      public boolean hasMArrowStyle() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <pre>
       * optional int32             endTime=17;			//结束播放时间 - 此版本不再设置结束播放时间
       * </pre>
       *
       * <code>optional int32 m_arrowStyle = 17;</code>
       */
      public int getMArrowStyle() {
        return mArrowStyle_;
      }
      /**
       * <pre>
       * optional int32             endTime=17;			//结束播放时间 - 此版本不再设置结束播放时间
       * </pre>
       *
       * <code>optional int32 m_arrowStyle = 17;</code>
       */
      public Builder setMArrowStyle(int value) {
        bitField0_ |= 0x00010000;
        mArrowStyle_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * optional int32             endTime=17;			//结束播放时间 - 此版本不再设置结束播放时间
       * </pre>
       *
       * <code>optional int32 m_arrowStyle = 17;</code>
       */
      public Builder clearMArrowStyle() {
        bitField0_ = (bitField0_ & ~0x00010000);
        mArrowStyle_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec4 mArrowColor_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> mArrowColorBuilder_;
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
       */
      public boolean hasMArrowColor() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4 getMArrowColor() {
        if (mArrowColorBuilder_ == null) {
          return mArrowColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mArrowColor_;
        } else {
          return mArrowColorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
       */
      public Builder setMArrowColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mArrowColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mArrowColor_ = value;
          onChanged();
        } else {
          mArrowColorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
       */
      public Builder setMArrowColor(
          com.nibiru.creator.data.HotPotData.Vec4.Builder builderForValue) {
        if (mArrowColorBuilder_ == null) {
          mArrowColor_ = builderForValue.build();
          onChanged();
        } else {
          mArrowColorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
       */
      public Builder mergeMArrowColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mArrowColorBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              mArrowColor_ != null &&
              mArrowColor_ != com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance()) {
            mArrowColor_ =
              com.nibiru.creator.data.HotPotData.Vec4.newBuilder(mArrowColor_).mergeFrom(value).buildPartial();
          } else {
            mArrowColor_ = value;
          }
          onChanged();
        } else {
          mArrowColorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
       */
      public Builder clearMArrowColor() {
        if (mArrowColorBuilder_ == null) {
          mArrowColor_ = null;
          onChanged();
        } else {
          mArrowColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4.Builder getMArrowColorBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getMArrowColorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMArrowColorOrBuilder() {
        if (mArrowColorBuilder_ != null) {
          return mArrowColorBuilder_.getMessageOrBuilder();
        } else {
          return mArrowColor_ == null ?
              com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mArrowColor_;
        }
      }
      /**
       * <pre>
       *箭头颜色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_arrowColor = 18;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> 
          getMArrowColorFieldBuilder() {
        if (mArrowColorBuilder_ == null) {
          mArrowColorBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder>(
                  getMArrowColor(),
                  getParentForChildren(),
                  isClean());
          mArrowColor_ = null;
        }
        return mArrowColorBuilder_;
      }

      private int mHotOrEventIndex_ ;
      /**
       * <pre>
       * (双向箭头样式 指向终点场景里的事件id)
       * </pre>
       *
       * <code>optional int32 m_HotOrEventIndex = 19;</code>
       */
      public boolean hasMHotOrEventIndex() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <pre>
       * (双向箭头样式 指向终点场景里的事件id)
       * </pre>
       *
       * <code>optional int32 m_HotOrEventIndex = 19;</code>
       */
      public int getMHotOrEventIndex() {
        return mHotOrEventIndex_;
      }
      /**
       * <pre>
       * (双向箭头样式 指向终点场景里的事件id)
       * </pre>
       *
       * <code>optional int32 m_HotOrEventIndex = 19;</code>
       */
      public Builder setMHotOrEventIndex(int value) {
        bitField0_ |= 0x00040000;
        mHotOrEventIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (双向箭头样式 指向终点场景里的事件id)
       * </pre>
       *
       * <code>optional int32 m_HotOrEventIndex = 19;</code>
       */
      public Builder clearMHotOrEventIndex() {
        bitField0_ = (bitField0_ & ~0x00040000);
        mHotOrEventIndex_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.Event)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.Event)
    private static final com.nibiru.creator.data.HotPotData.Event DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.Event();
    }

    public static com.nibiru.creator.data.HotPotData.Event getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<Event>
        PARSER = new com.nibiru.protobuf.AbstractParser<Event>() {
      public Event parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new Event(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<Event> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<Event> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.Event getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BackGroundAudioOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.BackGroundAudio)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_FileName = 1;</code>
     */
    boolean hasMFileName();
    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_FileName = 1;</code>
     */
    java.lang.String getMFileName();
    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_FileName = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileNameBytes();

    /**
     * <pre>
     *播放一次/循环播放
     * </pre>
     *
     * <code>required int32 m_LoopTime = 2;</code>
     */
    boolean hasMLoopTime();
    /**
     * <pre>
     *播放一次/循环播放
     * </pre>
     *
     * <code>required int32 m_LoopTime = 2;</code>
     */
    int getMLoopTime();

    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    boolean hasMDisplayName();
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    java.lang.String getMDisplayName();
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMDisplayNameBytes();

    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 4;</code>
     */
    boolean hasMMaterialId();
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 4;</code>
     */
    int getMMaterialId();

    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 5;</code>
     */
    boolean hasMIconPath();
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 5;</code>
     */
    java.lang.String getMIconPath();
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 5;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIconPathBytes();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 7;</code>
     */
    boolean hasMIconUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 7;</code>
     */
    java.lang.String getMIconUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 7;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIconUrlBytes();

    /**
     * <pre>
     *背景音乐音量
     * </pre>
     *
     * <code>optional int32 m_volume = 9 [default = 100];</code>
     */
    boolean hasMVolume();
    /**
     * <pre>
     *背景音乐音量
     * </pre>
     *
     * <code>optional int32 m_volume = 9 [default = 100];</code>
     */
    int getMVolume();
  }
  /**
   * <pre>
   *背景音乐
   * </pre>
   *
   * Protobuf type {@code DataFactory.BackGroundAudio}
   */
  public  static final class BackGroundAudio extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.BackGroundAudio)
      BackGroundAudioOrBuilder {
    // Use BackGroundAudio.newBuilder() to construct.
    private BackGroundAudio(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BackGroundAudio() {
      mFileName_ = "";
      mLoopTime_ = 0;
      mDisplayName_ = "";
      mMaterialId_ = 0;
      mIconPath_ = "";
      mFileUrl_ = "";
      mIconUrl_ = "";
      mVolume_ = 100;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BackGroundAudio(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mFileName_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mLoopTime_ = input.readInt32();
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mDisplayName_ = bs;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              mMaterialId_ = input.readInt32();
              break;
            }
            case 42: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              mIconPath_ = bs;
              break;
            }
            case 50: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              mFileUrl_ = bs;
              break;
            }
            case 58: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              mIconUrl_ = bs;
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              mVolume_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_BackGroundAudio_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_BackGroundAudio_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.BackGroundAudio.class, com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder.class);
    }

    private int bitField0_;
    public static final int M_FILENAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object mFileName_;
    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_FileName = 1;</code>
     */
    public boolean hasMFileName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_FileName = 1;</code>
     */
    public java.lang.String getMFileName() {
      java.lang.Object ref = mFileName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *音频路径
     * </pre>
     *
     * <code>required string m_FileName = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileNameBytes() {
      java.lang.Object ref = mFileName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_LOOPTIME_FIELD_NUMBER = 2;
    private int mLoopTime_;
    /**
     * <pre>
     *播放一次/循环播放
     * </pre>
     *
     * <code>required int32 m_LoopTime = 2;</code>
     */
    public boolean hasMLoopTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *播放一次/循环播放
     * </pre>
     *
     * <code>required int32 m_LoopTime = 2;</code>
     */
    public int getMLoopTime() {
      return mLoopTime_;
    }

    public static final int M_DISPLAYNAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object mDisplayName_;
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    public boolean hasMDisplayName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    public java.lang.String getMDisplayName() {
      java.lang.Object ref = mDisplayName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mDisplayName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *显示名称
     * </pre>
     *
     * <code>optional string m_displayName = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMDisplayNameBytes() {
      java.lang.Object ref = mDisplayName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mDisplayName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_MATERIALID_FIELD_NUMBER = 4;
    private int mMaterialId_;
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 4;</code>
     */
    public boolean hasMMaterialId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 4;</code>
     */
    public int getMMaterialId() {
      return mMaterialId_;
    }

    public static final int M_ICONPATH_FIELD_NUMBER = 5;
    private volatile java.lang.Object mIconPath_;
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 5;</code>
     */
    public boolean hasMIconPath() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 5;</code>
     */
    public java.lang.String getMIconPath() {
      java.lang.Object ref = mIconPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mIconPath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 5;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIconPathBytes() {
      java.lang.Object ref = mIconPath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mIconPath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_FILEURL_FIELD_NUMBER = 6;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 6;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ICONURL_FIELD_NUMBER = 7;
    private volatile java.lang.Object mIconUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 7;</code>
     */
    public boolean hasMIconUrl() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 7;</code>
     */
    public java.lang.String getMIconUrl() {
      java.lang.Object ref = mIconUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mIconUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 7;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIconUrlBytes() {
      java.lang.Object ref = mIconUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mIconUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_VOLUME_FIELD_NUMBER = 9;
    private int mVolume_;
    /**
     * <pre>
     *背景音乐音量
     * </pre>
     *
     * <code>optional int32 m_volume = 9 [default = 100];</code>
     */
    public boolean hasMVolume() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *背景音乐音量
     * </pre>
     *
     * <code>optional int32 m_volume = 9 [default = 100];</code>
     */
    public int getMVolume() {
      return mVolume_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMFileName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMLoopTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mFileName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mLoopTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mDisplayName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, mMaterialId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 5, mIconPath_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 6, mFileUrl_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 7, mIconUrl_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(9, mVolume_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mFileName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(2, mLoopTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mDisplayName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(4, mMaterialId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(5, mIconPath_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(6, mFileUrl_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(7, mIconUrl_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(9, mVolume_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.BackGroundAudio)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.BackGroundAudio other = (com.nibiru.creator.data.HotPotData.BackGroundAudio) obj;

      boolean result = true;
      result = result && (hasMFileName() == other.hasMFileName());
      if (hasMFileName()) {
        result = result && getMFileName()
            .equals(other.getMFileName());
      }
      result = result && (hasMLoopTime() == other.hasMLoopTime());
      if (hasMLoopTime()) {
        result = result && (getMLoopTime()
            == other.getMLoopTime());
      }
      result = result && (hasMDisplayName() == other.hasMDisplayName());
      if (hasMDisplayName()) {
        result = result && getMDisplayName()
            .equals(other.getMDisplayName());
      }
      result = result && (hasMMaterialId() == other.hasMMaterialId());
      if (hasMMaterialId()) {
        result = result && (getMMaterialId()
            == other.getMMaterialId());
      }
      result = result && (hasMIconPath() == other.hasMIconPath());
      if (hasMIconPath()) {
        result = result && getMIconPath()
            .equals(other.getMIconPath());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && (hasMIconUrl() == other.hasMIconUrl());
      if (hasMIconUrl()) {
        result = result && getMIconUrl()
            .equals(other.getMIconUrl());
      }
      result = result && (hasMVolume() == other.hasMVolume());
      if (hasMVolume()) {
        result = result && (getMVolume()
            == other.getMVolume());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMFileName()) {
        hash = (37 * hash) + M_FILENAME_FIELD_NUMBER;
        hash = (53 * hash) + getMFileName().hashCode();
      }
      if (hasMLoopTime()) {
        hash = (37 * hash) + M_LOOPTIME_FIELD_NUMBER;
        hash = (53 * hash) + getMLoopTime();
      }
      if (hasMDisplayName()) {
        hash = (37 * hash) + M_DISPLAYNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMDisplayName().hashCode();
      }
      if (hasMMaterialId()) {
        hash = (37 * hash) + M_MATERIALID_FIELD_NUMBER;
        hash = (53 * hash) + getMMaterialId();
      }
      if (hasMIconPath()) {
        hash = (37 * hash) + M_ICONPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMIconPath().hashCode();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      if (hasMIconUrl()) {
        hash = (37 * hash) + M_ICONURL_FIELD_NUMBER;
        hash = (53 * hash) + getMIconUrl().hashCode();
      }
      if (hasMVolume()) {
        hash = (37 * hash) + M_VOLUME_FIELD_NUMBER;
        hash = (53 * hash) + getMVolume();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.BackGroundAudio parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.BackGroundAudio parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.BackGroundAudio parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.BackGroundAudio parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.BackGroundAudio parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.BackGroundAudio parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.BackGroundAudio parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.BackGroundAudio parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.BackGroundAudio parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.BackGroundAudio parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.BackGroundAudio prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * Protobuf type {@code DataFactory.BackGroundAudio}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.BackGroundAudio)
        com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_BackGroundAudio_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_BackGroundAudio_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.BackGroundAudio.class, com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.BackGroundAudio.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mFileName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mLoopTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mDisplayName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        mMaterialId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        mIconPath_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        mIconUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        mVolume_ = 100;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_BackGroundAudio_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.BackGroundAudio getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.BackGroundAudio build() {
        com.nibiru.creator.data.HotPotData.BackGroundAudio result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.BackGroundAudio buildPartial() {
        com.nibiru.creator.data.HotPotData.BackGroundAudio result = new com.nibiru.creator.data.HotPotData.BackGroundAudio(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mFileName_ = mFileName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mLoopTime_ = mLoopTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mDisplayName_ = mDisplayName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mMaterialId_ = mMaterialId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mIconPath_ = mIconPath_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mFileUrl_ = mFileUrl_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mIconUrl_ = mIconUrl_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mVolume_ = mVolume_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.BackGroundAudio) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.BackGroundAudio)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.BackGroundAudio other) {
        if (other == com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance()) return this;
        if (other.hasMFileName()) {
          bitField0_ |= 0x00000001;
          mFileName_ = other.mFileName_;
          onChanged();
        }
        if (other.hasMLoopTime()) {
          setMLoopTime(other.getMLoopTime());
        }
        if (other.hasMDisplayName()) {
          bitField0_ |= 0x00000004;
          mDisplayName_ = other.mDisplayName_;
          onChanged();
        }
        if (other.hasMMaterialId()) {
          setMMaterialId(other.getMMaterialId());
        }
        if (other.hasMIconPath()) {
          bitField0_ |= 0x00000010;
          mIconPath_ = other.mIconPath_;
          onChanged();
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00000020;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        if (other.hasMIconUrl()) {
          bitField0_ |= 0x00000040;
          mIconUrl_ = other.mIconUrl_;
          onChanged();
        }
        if (other.hasMVolume()) {
          setMVolume(other.getMVolume());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMFileName()) {
          return false;
        }
        if (!hasMLoopTime()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.BackGroundAudio parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.BackGroundAudio) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mFileName_ = "";
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_FileName = 1;</code>
       */
      public boolean hasMFileName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_FileName = 1;</code>
       */
      public java.lang.String getMFileName() {
        java.lang.Object ref = mFileName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_FileName = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileNameBytes() {
        java.lang.Object ref = mFileName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_FileName = 1;</code>
       */
      public Builder setMFileName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mFileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_FileName = 1;</code>
       */
      public Builder clearMFileName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mFileName_ = getDefaultInstance().getMFileName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *音频路径
       * </pre>
       *
       * <code>required string m_FileName = 1;</code>
       */
      public Builder setMFileNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mFileName_ = value;
        onChanged();
        return this;
      }

      private int mLoopTime_ ;
      /**
       * <pre>
       *播放一次/循环播放
       * </pre>
       *
       * <code>required int32 m_LoopTime = 2;</code>
       */
      public boolean hasMLoopTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *播放一次/循环播放
       * </pre>
       *
       * <code>required int32 m_LoopTime = 2;</code>
       */
      public int getMLoopTime() {
        return mLoopTime_;
      }
      /**
       * <pre>
       *播放一次/循环播放
       * </pre>
       *
       * <code>required int32 m_LoopTime = 2;</code>
       */
      public Builder setMLoopTime(int value) {
        bitField0_ |= 0x00000002;
        mLoopTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *播放一次/循环播放
       * </pre>
       *
       * <code>required int32 m_LoopTime = 2;</code>
       */
      public Builder clearMLoopTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mLoopTime_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mDisplayName_ = "";
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public boolean hasMDisplayName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public java.lang.String getMDisplayName() {
        java.lang.Object ref = mDisplayName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mDisplayName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMDisplayNameBytes() {
        java.lang.Object ref = mDisplayName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mDisplayName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public Builder setMDisplayName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mDisplayName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public Builder clearMDisplayName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mDisplayName_ = getDefaultInstance().getMDisplayName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *显示名称
       * </pre>
       *
       * <code>optional string m_displayName = 3;</code>
       */
      public Builder setMDisplayNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mDisplayName_ = value;
        onChanged();
        return this;
      }

      private int mMaterialId_ ;
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 4;</code>
       */
      public boolean hasMMaterialId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 4;</code>
       */
      public int getMMaterialId() {
        return mMaterialId_;
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 4;</code>
       */
      public Builder setMMaterialId(int value) {
        bitField0_ |= 0x00000008;
        mMaterialId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 4;</code>
       */
      public Builder clearMMaterialId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mMaterialId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mIconPath_ = "";
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 5;</code>
       */
      public boolean hasMIconPath() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 5;</code>
       */
      public java.lang.String getMIconPath() {
        java.lang.Object ref = mIconPath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mIconPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 5;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIconPathBytes() {
        java.lang.Object ref = mIconPath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mIconPath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 5;</code>
       */
      public Builder setMIconPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mIconPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 5;</code>
       */
      public Builder clearMIconPath() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mIconPath_ = getDefaultInstance().getMIconPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 5;</code>
       */
      public Builder setMIconPathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mIconPath_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 6;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mFileUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mIconUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 7;</code>
       */
      public boolean hasMIconUrl() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 7;</code>
       */
      public java.lang.String getMIconUrl() {
        java.lang.Object ref = mIconUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mIconUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 7;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIconUrlBytes() {
        java.lang.Object ref = mIconUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mIconUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 7;</code>
       */
      public Builder setMIconUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mIconUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 7;</code>
       */
      public Builder clearMIconUrl() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mIconUrl_ = getDefaultInstance().getMIconUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 7;</code>
       */
      public Builder setMIconUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mIconUrl_ = value;
        onChanged();
        return this;
      }

      private int mVolume_ = 100;
      /**
       * <pre>
       *背景音乐音量
       * </pre>
       *
       * <code>optional int32 m_volume = 9 [default = 100];</code>
       */
      public boolean hasMVolume() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       *背景音乐音量
       * </pre>
       *
       * <code>optional int32 m_volume = 9 [default = 100];</code>
       */
      public int getMVolume() {
        return mVolume_;
      }
      /**
       * <pre>
       *背景音乐音量
       * </pre>
       *
       * <code>optional int32 m_volume = 9 [default = 100];</code>
       */
      public Builder setMVolume(int value) {
        bitField0_ |= 0x00000080;
        mVolume_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *背景音乐音量
       * </pre>
       *
       * <code>optional int32 m_volume = 9 [default = 100];</code>
       */
      public Builder clearMVolume() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mVolume_ = 100;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.BackGroundAudio)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.BackGroundAudio)
    private static final com.nibiru.creator.data.HotPotData.BackGroundAudio DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.BackGroundAudio();
    }

    public static com.nibiru.creator.data.HotPotData.BackGroundAudio getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<BackGroundAudio>
        PARSER = new com.nibiru.protobuf.AbstractParser<BackGroundAudio>() {
      public BackGroundAudio parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new BackGroundAudio(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<BackGroundAudio> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<BackGroundAudio> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.BackGroundAudio getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FontOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.Font)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_fontFamily = 1;</code>
     */
    boolean hasMFontFamily();
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_fontFamily = 1;</code>
     */
    java.lang.String getMFontFamily();
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_fontFamily = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFontFamilyBytes();

    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>required int32 m_fontSize = 2;</code>
     */
    boolean hasMFontSize();
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>required int32 m_fontSize = 2;</code>
     */
    int getMFontSize();

    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>required float m_lineHeight = 3;</code>
     */
    boolean hasMLineHeight();
    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>required float m_lineHeight = 3;</code>
     */
    float getMLineHeight();

    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
     */
    boolean hasMFontColor();
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4 getMFontColor();
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFontColorOrBuilder();

    /**
     * <pre>
     *加粗
     * </pre>
     *
     * <code>required int32 m_bold = 5;</code>
     */
    boolean hasMBold();
    /**
     * <pre>
     *加粗
     * </pre>
     *
     * <code>required int32 m_bold = 5;</code>
     */
    int getMBold();

    /**
     * <pre>
     *斜体
     * </pre>
     *
     * <code>required int32 m_italic = 6;</code>
     */
    boolean hasMItalic();
    /**
     * <pre>
     *斜体
     * </pre>
     *
     * <code>required int32 m_italic = 6;</code>
     */
    int getMItalic();

    /**
     * <pre>
     *下划线
     * </pre>
     *
     * <code>required int32 m_underline = 7;</code>
     */
    boolean hasMUnderline();
    /**
     * <pre>
     *下划线
     * </pre>
     *
     * <code>required int32 m_underline = 7;</code>
     */
    int getMUnderline();

    /**
     * <pre>
     *对齐方式
     * </pre>
     *
     * <code>required int32 m_alignment = 8;</code>
     */
    boolean hasMAlignment();
    /**
     * <pre>
     *对齐方式
     * </pre>
     *
     * <code>required int32 m_alignment = 8;</code>
     */
    int getMAlignment();
  }
  /**
   * <pre>
   *字体（选择器中Component）
   * </pre>
   *
   * Protobuf type {@code DataFactory.Font}
   */
  public  static final class Font extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.Font)
      FontOrBuilder {
    // Use Font.newBuilder() to construct.
    private Font(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Font() {
      mFontFamily_ = "";
      mFontSize_ = 0;
      mLineHeight_ = 0F;
      mBold_ = 0;
      mItalic_ = 0;
      mUnderline_ = 0;
      mAlignment_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Font(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mFontFamily_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mFontSize_ = input.readInt32();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              mLineHeight_ = input.readFloat();
              break;
            }
            case 34: {
              com.nibiru.creator.data.HotPotData.Vec4.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = mFontColor_.toBuilder();
              }
              mFontColor_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec4.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mFontColor_);
                mFontColor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              mBold_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mItalic_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              mUnderline_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              mAlignment_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Font_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Font_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.Font.class, com.nibiru.creator.data.HotPotData.Font.Builder.class);
    }

    private int bitField0_;
    public static final int M_FONTFAMILY_FIELD_NUMBER = 1;
    private volatile java.lang.Object mFontFamily_;
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_fontFamily = 1;</code>
     */
    public boolean hasMFontFamily() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_fontFamily = 1;</code>
     */
    public java.lang.String getMFontFamily() {
      java.lang.Object ref = mFontFamily_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFontFamily_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>required string m_fontFamily = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFontFamilyBytes() {
      java.lang.Object ref = mFontFamily_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFontFamily_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_FONTSIZE_FIELD_NUMBER = 2;
    private int mFontSize_;
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>required int32 m_fontSize = 2;</code>
     */
    public boolean hasMFontSize() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>required int32 m_fontSize = 2;</code>
     */
    public int getMFontSize() {
      return mFontSize_;
    }

    public static final int M_LINEHEIGHT_FIELD_NUMBER = 3;
    private float mLineHeight_;
    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>required float m_lineHeight = 3;</code>
     */
    public boolean hasMLineHeight() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *行间距
     * </pre>
     *
     * <code>required float m_lineHeight = 3;</code>
     */
    public float getMLineHeight() {
      return mLineHeight_;
    }

    public static final int M_FONTCOLOR_FIELD_NUMBER = 4;
    private com.nibiru.creator.data.HotPotData.Vec4 mFontColor_;
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
     */
    public boolean hasMFontColor() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4 getMFontColor() {
      return mFontColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
    }
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFontColorOrBuilder() {
      return mFontColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
    }

    public static final int M_BOLD_FIELD_NUMBER = 5;
    private int mBold_;
    /**
     * <pre>
     *加粗
     * </pre>
     *
     * <code>required int32 m_bold = 5;</code>
     */
    public boolean hasMBold() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *加粗
     * </pre>
     *
     * <code>required int32 m_bold = 5;</code>
     */
    public int getMBold() {
      return mBold_;
    }

    public static final int M_ITALIC_FIELD_NUMBER = 6;
    private int mItalic_;
    /**
     * <pre>
     *斜体
     * </pre>
     *
     * <code>required int32 m_italic = 6;</code>
     */
    public boolean hasMItalic() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *斜体
     * </pre>
     *
     * <code>required int32 m_italic = 6;</code>
     */
    public int getMItalic() {
      return mItalic_;
    }

    public static final int M_UNDERLINE_FIELD_NUMBER = 7;
    private int mUnderline_;
    /**
     * <pre>
     *下划线
     * </pre>
     *
     * <code>required int32 m_underline = 7;</code>
     */
    public boolean hasMUnderline() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *下划线
     * </pre>
     *
     * <code>required int32 m_underline = 7;</code>
     */
    public int getMUnderline() {
      return mUnderline_;
    }

    public static final int M_ALIGNMENT_FIELD_NUMBER = 8;
    private int mAlignment_;
    /**
     * <pre>
     *对齐方式
     * </pre>
     *
     * <code>required int32 m_alignment = 8;</code>
     */
    public boolean hasMAlignment() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *对齐方式
     * </pre>
     *
     * <code>required int32 m_alignment = 8;</code>
     */
    public int getMAlignment() {
      return mAlignment_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMFontFamily()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMFontSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMLineHeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMFontColor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMBold()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMItalic()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMUnderline()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAlignment()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMFontColor().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mFontFamily_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mFontSize_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, mLineHeight_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, getMFontColor());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, mBold_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, mItalic_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, mUnderline_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, mAlignment_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mFontFamily_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(2, mFontSize_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(3, mLineHeight_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(4, getMFontColor());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(5, mBold_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(6, mItalic_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(7, mUnderline_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(8, mAlignment_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.Font)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.Font other = (com.nibiru.creator.data.HotPotData.Font) obj;

      boolean result = true;
      result = result && (hasMFontFamily() == other.hasMFontFamily());
      if (hasMFontFamily()) {
        result = result && getMFontFamily()
            .equals(other.getMFontFamily());
      }
      result = result && (hasMFontSize() == other.hasMFontSize());
      if (hasMFontSize()) {
        result = result && (getMFontSize()
            == other.getMFontSize());
      }
      result = result && (hasMLineHeight() == other.hasMLineHeight());
      if (hasMLineHeight()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMLineHeight())
            == java.lang.Float.floatToIntBits(
                other.getMLineHeight()));
      }
      result = result && (hasMFontColor() == other.hasMFontColor());
      if (hasMFontColor()) {
        result = result && getMFontColor()
            .equals(other.getMFontColor());
      }
      result = result && (hasMBold() == other.hasMBold());
      if (hasMBold()) {
        result = result && (getMBold()
            == other.getMBold());
      }
      result = result && (hasMItalic() == other.hasMItalic());
      if (hasMItalic()) {
        result = result && (getMItalic()
            == other.getMItalic());
      }
      result = result && (hasMUnderline() == other.hasMUnderline());
      if (hasMUnderline()) {
        result = result && (getMUnderline()
            == other.getMUnderline());
      }
      result = result && (hasMAlignment() == other.hasMAlignment());
      if (hasMAlignment()) {
        result = result && (getMAlignment()
            == other.getMAlignment());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMFontFamily()) {
        hash = (37 * hash) + M_FONTFAMILY_FIELD_NUMBER;
        hash = (53 * hash) + getMFontFamily().hashCode();
      }
      if (hasMFontSize()) {
        hash = (37 * hash) + M_FONTSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMFontSize();
      }
      if (hasMLineHeight()) {
        hash = (37 * hash) + M_LINEHEIGHT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMLineHeight());
      }
      if (hasMFontColor()) {
        hash = (37 * hash) + M_FONTCOLOR_FIELD_NUMBER;
        hash = (53 * hash) + getMFontColor().hashCode();
      }
      if (hasMBold()) {
        hash = (37 * hash) + M_BOLD_FIELD_NUMBER;
        hash = (53 * hash) + getMBold();
      }
      if (hasMItalic()) {
        hash = (37 * hash) + M_ITALIC_FIELD_NUMBER;
        hash = (53 * hash) + getMItalic();
      }
      if (hasMUnderline()) {
        hash = (37 * hash) + M_UNDERLINE_FIELD_NUMBER;
        hash = (53 * hash) + getMUnderline();
      }
      if (hasMAlignment()) {
        hash = (37 * hash) + M_ALIGNMENT_FIELD_NUMBER;
        hash = (53 * hash) + getMAlignment();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.Font parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Font parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Font parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Font parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Font parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Font parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Font parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Font parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Font parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Font parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.Font prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *字体（选择器中Component）
     * </pre>
     *
     * Protobuf type {@code DataFactory.Font}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.Font)
        com.nibiru.creator.data.HotPotData.FontOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Font_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Font_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.Font.class, com.nibiru.creator.data.HotPotData.Font.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.Font.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMFontColorFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mFontFamily_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mFontSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mLineHeight_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (mFontColorBuilder_ == null) {
          mFontColor_ = null;
        } else {
          mFontColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        mBold_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mItalic_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        mUnderline_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        mAlignment_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Font_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.Font getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.Font.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.Font build() {
        com.nibiru.creator.data.HotPotData.Font result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.Font buildPartial() {
        com.nibiru.creator.data.HotPotData.Font result = new com.nibiru.creator.data.HotPotData.Font(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mFontFamily_ = mFontFamily_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mFontSize_ = mFontSize_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mLineHeight_ = mLineHeight_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (mFontColorBuilder_ == null) {
          result.mFontColor_ = mFontColor_;
        } else {
          result.mFontColor_ = mFontColorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mBold_ = mBold_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mItalic_ = mItalic_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mUnderline_ = mUnderline_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mAlignment_ = mAlignment_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.Font) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.Font)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.Font other) {
        if (other == com.nibiru.creator.data.HotPotData.Font.getDefaultInstance()) return this;
        if (other.hasMFontFamily()) {
          bitField0_ |= 0x00000001;
          mFontFamily_ = other.mFontFamily_;
          onChanged();
        }
        if (other.hasMFontSize()) {
          setMFontSize(other.getMFontSize());
        }
        if (other.hasMLineHeight()) {
          setMLineHeight(other.getMLineHeight());
        }
        if (other.hasMFontColor()) {
          mergeMFontColor(other.getMFontColor());
        }
        if (other.hasMBold()) {
          setMBold(other.getMBold());
        }
        if (other.hasMItalic()) {
          setMItalic(other.getMItalic());
        }
        if (other.hasMUnderline()) {
          setMUnderline(other.getMUnderline());
        }
        if (other.hasMAlignment()) {
          setMAlignment(other.getMAlignment());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMFontFamily()) {
          return false;
        }
        if (!hasMFontSize()) {
          return false;
        }
        if (!hasMLineHeight()) {
          return false;
        }
        if (!hasMFontColor()) {
          return false;
        }
        if (!hasMBold()) {
          return false;
        }
        if (!hasMItalic()) {
          return false;
        }
        if (!hasMUnderline()) {
          return false;
        }
        if (!hasMAlignment()) {
          return false;
        }
        if (!getMFontColor().isInitialized()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.Font parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.Font) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mFontFamily_ = "";
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_fontFamily = 1;</code>
       */
      public boolean hasMFontFamily() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_fontFamily = 1;</code>
       */
      public java.lang.String getMFontFamily() {
        java.lang.Object ref = mFontFamily_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFontFamily_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_fontFamily = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFontFamilyBytes() {
        java.lang.Object ref = mFontFamily_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFontFamily_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_fontFamily = 1;</code>
       */
      public Builder setMFontFamily(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mFontFamily_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_fontFamily = 1;</code>
       */
      public Builder clearMFontFamily() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mFontFamily_ = getDefaultInstance().getMFontFamily();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>required string m_fontFamily = 1;</code>
       */
      public Builder setMFontFamilyBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mFontFamily_ = value;
        onChanged();
        return this;
      }

      private int mFontSize_ ;
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>required int32 m_fontSize = 2;</code>
       */
      public boolean hasMFontSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>required int32 m_fontSize = 2;</code>
       */
      public int getMFontSize() {
        return mFontSize_;
      }
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>required int32 m_fontSize = 2;</code>
       */
      public Builder setMFontSize(int value) {
        bitField0_ |= 0x00000002;
        mFontSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>required int32 m_fontSize = 2;</code>
       */
      public Builder clearMFontSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mFontSize_ = 0;
        onChanged();
        return this;
      }

      private float mLineHeight_ ;
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>required float m_lineHeight = 3;</code>
       */
      public boolean hasMLineHeight() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>required float m_lineHeight = 3;</code>
       */
      public float getMLineHeight() {
        return mLineHeight_;
      }
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>required float m_lineHeight = 3;</code>
       */
      public Builder setMLineHeight(float value) {
        bitField0_ |= 0x00000004;
        mLineHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *行间距
       * </pre>
       *
       * <code>required float m_lineHeight = 3;</code>
       */
      public Builder clearMLineHeight() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mLineHeight_ = 0F;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec4 mFontColor_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> mFontColorBuilder_;
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
       */
      public boolean hasMFontColor() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4 getMFontColor() {
        if (mFontColorBuilder_ == null) {
          return mFontColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
        } else {
          return mFontColorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
       */
      public Builder setMFontColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mFontColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mFontColor_ = value;
          onChanged();
        } else {
          mFontColorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
       */
      public Builder setMFontColor(
          com.nibiru.creator.data.HotPotData.Vec4.Builder builderForValue) {
        if (mFontColorBuilder_ == null) {
          mFontColor_ = builderForValue.build();
          onChanged();
        } else {
          mFontColorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
       */
      public Builder mergeMFontColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mFontColorBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              mFontColor_ != null &&
              mFontColor_ != com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance()) {
            mFontColor_ =
              com.nibiru.creator.data.HotPotData.Vec4.newBuilder(mFontColor_).mergeFrom(value).buildPartial();
          } else {
            mFontColor_ = value;
          }
          onChanged();
        } else {
          mFontColorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
       */
      public Builder clearMFontColor() {
        if (mFontColorBuilder_ == null) {
          mFontColor_ = null;
          onChanged();
        } else {
          mFontColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4.Builder getMFontColorBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getMFontColorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFontColorOrBuilder() {
        if (mFontColorBuilder_ != null) {
          return mFontColorBuilder_.getMessageOrBuilder();
        } else {
          return mFontColor_ == null ?
              com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFontColor_;
        }
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>required .DataFactory.Vec4 m_fontColor = 4;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> 
          getMFontColorFieldBuilder() {
        if (mFontColorBuilder_ == null) {
          mFontColorBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder>(
                  getMFontColor(),
                  getParentForChildren(),
                  isClean());
          mFontColor_ = null;
        }
        return mFontColorBuilder_;
      }

      private int mBold_ ;
      /**
       * <pre>
       *加粗
       * </pre>
       *
       * <code>required int32 m_bold = 5;</code>
       */
      public boolean hasMBold() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *加粗
       * </pre>
       *
       * <code>required int32 m_bold = 5;</code>
       */
      public int getMBold() {
        return mBold_;
      }
      /**
       * <pre>
       *加粗
       * </pre>
       *
       * <code>required int32 m_bold = 5;</code>
       */
      public Builder setMBold(int value) {
        bitField0_ |= 0x00000010;
        mBold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *加粗
       * </pre>
       *
       * <code>required int32 m_bold = 5;</code>
       */
      public Builder clearMBold() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mBold_ = 0;
        onChanged();
        return this;
      }

      private int mItalic_ ;
      /**
       * <pre>
       *斜体
       * </pre>
       *
       * <code>required int32 m_italic = 6;</code>
       */
      public boolean hasMItalic() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *斜体
       * </pre>
       *
       * <code>required int32 m_italic = 6;</code>
       */
      public int getMItalic() {
        return mItalic_;
      }
      /**
       * <pre>
       *斜体
       * </pre>
       *
       * <code>required int32 m_italic = 6;</code>
       */
      public Builder setMItalic(int value) {
        bitField0_ |= 0x00000020;
        mItalic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *斜体
       * </pre>
       *
       * <code>required int32 m_italic = 6;</code>
       */
      public Builder clearMItalic() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mItalic_ = 0;
        onChanged();
        return this;
      }

      private int mUnderline_ ;
      /**
       * <pre>
       *下划线
       * </pre>
       *
       * <code>required int32 m_underline = 7;</code>
       */
      public boolean hasMUnderline() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *下划线
       * </pre>
       *
       * <code>required int32 m_underline = 7;</code>
       */
      public int getMUnderline() {
        return mUnderline_;
      }
      /**
       * <pre>
       *下划线
       * </pre>
       *
       * <code>required int32 m_underline = 7;</code>
       */
      public Builder setMUnderline(int value) {
        bitField0_ |= 0x00000040;
        mUnderline_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *下划线
       * </pre>
       *
       * <code>required int32 m_underline = 7;</code>
       */
      public Builder clearMUnderline() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mUnderline_ = 0;
        onChanged();
        return this;
      }

      private int mAlignment_ ;
      /**
       * <pre>
       *对齐方式
       * </pre>
       *
       * <code>required int32 m_alignment = 8;</code>
       */
      public boolean hasMAlignment() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       *对齐方式
       * </pre>
       *
       * <code>required int32 m_alignment = 8;</code>
       */
      public int getMAlignment() {
        return mAlignment_;
      }
      /**
       * <pre>
       *对齐方式
       * </pre>
       *
       * <code>required int32 m_alignment = 8;</code>
       */
      public Builder setMAlignment(int value) {
        bitField0_ |= 0x00000080;
        mAlignment_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *对齐方式
       * </pre>
       *
       * <code>required int32 m_alignment = 8;</code>
       */
      public Builder clearMAlignment() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mAlignment_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.Font)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.Font)
    private static final com.nibiru.creator.data.HotPotData.Font DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.Font();
    }

    public static com.nibiru.creator.data.HotPotData.Font getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<Font>
        PARSER = new com.nibiru.protobuf.AbstractParser<Font>() {
      public Font parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new Font(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<Font> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<Font> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.Font getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ComponentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.Component)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 1;</code>
     */
    boolean hasMPosition();
    /**
     * <pre>
     *位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 1;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMPosition();
    /**
     * <pre>
     *位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 1;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMPositionOrBuilder();

    /**
     * <pre>
     *大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_size = 2;</code>
     */
    boolean hasMSize();
    /**
     * <pre>
     *大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_size = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMSize();
    /**
     * <pre>
     *大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_size = 2;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMSizeOrBuilder();

    /**
     * <pre>
     *透明度
     * </pre>
     *
     * <code>required float m_opacity = 3;</code>
     */
    boolean hasMOpacity();
    /**
     * <pre>
     *透明度
     * </pre>
     *
     * <code>required float m_opacity = 3;</code>
     */
    float getMOpacity();

    /**
     * <pre>
     *旋转角度
     * </pre>
     *
     * <code>required float m_rotateAngle = 4;</code>
     */
    boolean hasMRotateAngle();
    /**
     * <pre>
     *旋转角度
     * </pre>
     *
     * <code>required float m_rotateAngle = 4;</code>
     */
    float getMRotateAngle();

    /**
     * <pre>
     *字体
     * </pre>
     *
     * <code>optional .DataFactory.Font m_font = 5;</code>
     */
    boolean hasMFont();
    /**
     * <pre>
     *字体
     * </pre>
     *
     * <code>optional .DataFactory.Font m_font = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.Font getMFont();
    /**
     * <pre>
     *字体
     * </pre>
     *
     * <code>optional .DataFactory.Font m_font = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.FontOrBuilder getMFontOrBuilder();

    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>optional string m_content = 6;</code>
     */
    boolean hasMContent();
    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>optional string m_content = 6;</code>
     */
    java.lang.String getMContent();
    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>optional string m_content = 6;</code>
     */
    com.nibiru.protobuf.ByteString
        getMContentBytes();

    /**
     * <pre>
     *圆角半径
     * </pre>
     *
     * <code>optional float m_radius = 7;</code>
     */
    boolean hasMRadius();
    /**
     * <pre>
     *圆角半径
     * </pre>
     *
     * <code>optional float m_radius = 7;</code>
     */
    float getMRadius();

    /**
     * <pre>
     *填充颜色色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
     */
    boolean hasMFillColor();
    /**
     * <pre>
     *填充颜色色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4 getMFillColor();
    /**
     * <pre>
     *填充颜色色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFillColorOrBuilder();

    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string imagePath = 9;</code>
     */
    boolean hasImagePath();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string imagePath = 9;</code>
     */
    java.lang.String getImagePath();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string imagePath = 9;</code>
     */
    com.nibiru.protobuf.ByteString
        getImagePathBytes();

    /**
     * <pre>
     *包含的热点
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
     */
    boolean hasMHotspot();
    /**
     * <pre>
     *包含的热点
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPot getMHotspot();
    /**
     * <pre>
     *包含的热点
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMHotspotOrBuilder();

    /**
     * <pre>
     *包含的跳转
     * </pre>
     *
     * <code>optional int32 m_jumpSceneId = 11;</code>
     */
    boolean hasMJumpSceneId();
    /**
     * <pre>
     *包含的跳转
     * </pre>
     *
     * <code>optional int32 m_jumpSceneId = 11;</code>
     */
    int getMJumpSceneId();

    /**
     * <pre>
     *组件的ID
     * </pre>
     *
     * <code>required int32 m_Id = 12;</code>
     */
    boolean hasMId();
    /**
     * <pre>
     *组件的ID
     * </pre>
     *
     * <code>required int32 m_Id = 12;</code>
     */
    int getMId();

    /**
     * <pre>
     *所属于的场景ID
     * </pre>
     *
     * <code>required int32 m_sceneId = 13;</code>
     */
    boolean hasMSceneId();
    /**
     * <pre>
     *所属于的场景ID
     * </pre>
     *
     * <code>required int32 m_sceneId = 13;</code>
     */
    int getMSceneId();

    /**
     * <pre>
     *类型
     * </pre>
     *
     * <code>required int32 m_type = 14;</code>
     */
    boolean hasMType();
    /**
     * <pre>
     *类型
     * </pre>
     *
     * <code>required int32 m_type = 14;</code>
     */
    int getMType();

    /**
     * <pre>
     *层叠顺序
     * </pre>
     *
     * <code>optional int32 m_ZValue = 15;</code>
     */
    boolean hasMZValue();
    /**
     * <pre>
     *层叠顺序
     * </pre>
     *
     * <code>optional int32 m_ZValue = 15;</code>
     */
    int getMZValue();

    /**
     * <code>optional int32 m_materialId = 16;</code>
     */
    boolean hasMMaterialId();
    /**
     * <code>optional int32 m_materialId = 16;</code>
     */
    int getMMaterialId();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 17;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 17;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 17;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();

    /**
     * <pre>
     *组件属性 1 不可调整大小、不可移动
     * </pre>
     *
     * <code>optional int32 m_attribute = 18;</code>
     */
    boolean hasMAttribute();
    /**
     * <pre>
     *组件属性 1 不可调整大小、不可移动
     * </pre>
     *
     * <code>optional int32 m_attribute = 18;</code>
     */
    int getMAttribute();

    /**
     * <pre>
     *数据统计
     * </pre>
     *
     * <code>optional int32 m_statistics = 19;</code>
     */
    boolean hasMStatistics();
    /**
     * <pre>
     *数据统计
     * </pre>
     *
     * <code>optional int32 m_statistics = 19;</code>
     */
    int getMStatistics();
  }
  /**
   * <pre>
   *选择器中的组件
   * </pre>
   *
   * Protobuf type {@code DataFactory.Component}
   */
  public  static final class Component extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.Component)
      ComponentOrBuilder {
    // Use Component.newBuilder() to construct.
    private Component(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Component() {
      mOpacity_ = 0F;
      mRotateAngle_ = 0F;
      mContent_ = "";
      mRadius_ = 0F;
      imagePath_ = "";
      mJumpSceneId_ = 0;
      mId_ = 0;
      mSceneId_ = 0;
      mType_ = 0;
      mZValue_ = 0;
      mMaterialId_ = 0;
      mFileUrl_ = "";
      mAttribute_ = 0;
      mStatistics_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Component(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = mPosition_.toBuilder();
              }
              mPosition_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mPosition_);
                mPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mSize_.toBuilder();
              }
              mSize_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mSize_);
                mSize_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              mOpacity_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              mRotateAngle_ = input.readFloat();
              break;
            }
            case 42: {
              com.nibiru.creator.data.HotPotData.Font.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = mFont_.toBuilder();
              }
              mFont_ = input.readMessage(com.nibiru.creator.data.HotPotData.Font.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mFont_);
                mFont_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              mContent_ = bs;
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              mRadius_ = input.readFloat();
              break;
            }
            case 66: {
              com.nibiru.creator.data.HotPotData.Vec4.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = mFillColor_.toBuilder();
              }
              mFillColor_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec4.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mFillColor_);
                mFillColor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000100;
              imagePath_ = bs;
              break;
            }
            case 82: {
              com.nibiru.creator.data.HotPotData.HotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = mHotspot_.toBuilder();
              }
              mHotspot_ = input.readMessage(com.nibiru.creator.data.HotPotData.HotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mHotspot_);
                mHotspot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              mJumpSceneId_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              mId_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              mSceneId_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              mType_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              mZValue_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              mMaterialId_ = input.readInt32();
              break;
            }
            case 138: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00010000;
              mFileUrl_ = bs;
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              mAttribute_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              mStatistics_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Component_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Component_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.Component.class, com.nibiru.creator.data.HotPotData.Component.Builder.class);
    }

    private int bitField0_;
    public static final int M_POSITION_FIELD_NUMBER = 1;
    private com.nibiru.creator.data.HotPotData.Vec2 mPosition_;
    /**
     * <pre>
     *位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 1;</code>
     */
    public boolean hasMPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 1;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMPosition() {
      return mPosition_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
    }
    /**
     * <pre>
     *位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_Position = 1;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMPositionOrBuilder() {
      return mPosition_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
    }

    public static final int M_SIZE_FIELD_NUMBER = 2;
    private com.nibiru.creator.data.HotPotData.Vec2 mSize_;
    /**
     * <pre>
     *大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_size = 2;</code>
     */
    public boolean hasMSize() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_size = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMSize() {
      return mSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mSize_;
    }
    /**
     * <pre>
     *大小
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_size = 2;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMSizeOrBuilder() {
      return mSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mSize_;
    }

    public static final int M_OPACITY_FIELD_NUMBER = 3;
    private float mOpacity_;
    /**
     * <pre>
     *透明度
     * </pre>
     *
     * <code>required float m_opacity = 3;</code>
     */
    public boolean hasMOpacity() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *透明度
     * </pre>
     *
     * <code>required float m_opacity = 3;</code>
     */
    public float getMOpacity() {
      return mOpacity_;
    }

    public static final int M_ROTATEANGLE_FIELD_NUMBER = 4;
    private float mRotateAngle_;
    /**
     * <pre>
     *旋转角度
     * </pre>
     *
     * <code>required float m_rotateAngle = 4;</code>
     */
    public boolean hasMRotateAngle() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *旋转角度
     * </pre>
     *
     * <code>required float m_rotateAngle = 4;</code>
     */
    public float getMRotateAngle() {
      return mRotateAngle_;
    }

    public static final int M_FONT_FIELD_NUMBER = 5;
    private com.nibiru.creator.data.HotPotData.Font mFont_;
    /**
     * <pre>
     *字体
     * </pre>
     *
     * <code>optional .DataFactory.Font m_font = 5;</code>
     */
    public boolean hasMFont() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *字体
     * </pre>
     *
     * <code>optional .DataFactory.Font m_font = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.Font getMFont() {
      return mFont_ == null ? com.nibiru.creator.data.HotPotData.Font.getDefaultInstance() : mFont_;
    }
    /**
     * <pre>
     *字体
     * </pre>
     *
     * <code>optional .DataFactory.Font m_font = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.FontOrBuilder getMFontOrBuilder() {
      return mFont_ == null ? com.nibiru.creator.data.HotPotData.Font.getDefaultInstance() : mFont_;
    }

    public static final int M_CONTENT_FIELD_NUMBER = 6;
    private volatile java.lang.Object mContent_;
    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>optional string m_content = 6;</code>
     */
    public boolean hasMContent() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>optional string m_content = 6;</code>
     */
    public java.lang.String getMContent() {
      java.lang.Object ref = mContent_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mContent_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *文本内容
     * </pre>
     *
     * <code>optional string m_content = 6;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMContentBytes() {
      java.lang.Object ref = mContent_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mContent_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_RADIUS_FIELD_NUMBER = 7;
    private float mRadius_;
    /**
     * <pre>
     *圆角半径
     * </pre>
     *
     * <code>optional float m_radius = 7;</code>
     */
    public boolean hasMRadius() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *圆角半径
     * </pre>
     *
     * <code>optional float m_radius = 7;</code>
     */
    public float getMRadius() {
      return mRadius_;
    }

    public static final int M_FILLCOLOR_FIELD_NUMBER = 8;
    private com.nibiru.creator.data.HotPotData.Vec4 mFillColor_;
    /**
     * <pre>
     *填充颜色色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
     */
    public boolean hasMFillColor() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *填充颜色色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4 getMFillColor() {
      return mFillColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFillColor_;
    }
    /**
     * <pre>
     *填充颜色色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFillColorOrBuilder() {
      return mFillColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFillColor_;
    }

    public static final int IMAGEPATH_FIELD_NUMBER = 9;
    private volatile java.lang.Object imagePath_;
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string imagePath = 9;</code>
     */
    public boolean hasImagePath() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string imagePath = 9;</code>
     */
    public java.lang.String getImagePath() {
      java.lang.Object ref = imagePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          imagePath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string imagePath = 9;</code>
     */
    public com.nibiru.protobuf.ByteString
        getImagePathBytes() {
      java.lang.Object ref = imagePath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        imagePath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_HOTSPOT_FIELD_NUMBER = 10;
    private com.nibiru.creator.data.HotPotData.HotPot mHotspot_;
    /**
     * <pre>
     *包含的热点
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
     */
    public boolean hasMHotspot() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     *包含的热点
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPot getMHotspot() {
      return mHotspot_ == null ? com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mHotspot_;
    }
    /**
     * <pre>
     *包含的热点
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMHotspotOrBuilder() {
      return mHotspot_ == null ? com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mHotspot_;
    }

    public static final int M_JUMPSCENEID_FIELD_NUMBER = 11;
    private int mJumpSceneId_;
    /**
     * <pre>
     *包含的跳转
     * </pre>
     *
     * <code>optional int32 m_jumpSceneId = 11;</code>
     */
    public boolean hasMJumpSceneId() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     *包含的跳转
     * </pre>
     *
     * <code>optional int32 m_jumpSceneId = 11;</code>
     */
    public int getMJumpSceneId() {
      return mJumpSceneId_;
    }

    public static final int M_ID_FIELD_NUMBER = 12;
    private int mId_;
    /**
     * <pre>
     *组件的ID
     * </pre>
     *
     * <code>required int32 m_Id = 12;</code>
     */
    public boolean hasMId() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     *组件的ID
     * </pre>
     *
     * <code>required int32 m_Id = 12;</code>
     */
    public int getMId() {
      return mId_;
    }

    public static final int M_SCENEID_FIELD_NUMBER = 13;
    private int mSceneId_;
    /**
     * <pre>
     *所属于的场景ID
     * </pre>
     *
     * <code>required int32 m_sceneId = 13;</code>
     */
    public boolean hasMSceneId() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     *所属于的场景ID
     * </pre>
     *
     * <code>required int32 m_sceneId = 13;</code>
     */
    public int getMSceneId() {
      return mSceneId_;
    }

    public static final int M_TYPE_FIELD_NUMBER = 14;
    private int mType_;
    /**
     * <pre>
     *类型
     * </pre>
     *
     * <code>required int32 m_type = 14;</code>
     */
    public boolean hasMType() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     *类型
     * </pre>
     *
     * <code>required int32 m_type = 14;</code>
     */
    public int getMType() {
      return mType_;
    }

    public static final int M_ZVALUE_FIELD_NUMBER = 15;
    private int mZValue_;
    /**
     * <pre>
     *层叠顺序
     * </pre>
     *
     * <code>optional int32 m_ZValue = 15;</code>
     */
    public boolean hasMZValue() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <pre>
     *层叠顺序
     * </pre>
     *
     * <code>optional int32 m_ZValue = 15;</code>
     */
    public int getMZValue() {
      return mZValue_;
    }

    public static final int M_MATERIALID_FIELD_NUMBER = 16;
    private int mMaterialId_;
    /**
     * <code>optional int32 m_materialId = 16;</code>
     */
    public boolean hasMMaterialId() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 m_materialId = 16;</code>
     */
    public int getMMaterialId() {
      return mMaterialId_;
    }

    public static final int M_FILEURL_FIELD_NUMBER = 17;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 17;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 17;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 17;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ATTRIBUTE_FIELD_NUMBER = 18;
    private int mAttribute_;
    /**
     * <pre>
     *组件属性 1 不可调整大小、不可移动
     * </pre>
     *
     * <code>optional int32 m_attribute = 18;</code>
     */
    public boolean hasMAttribute() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <pre>
     *组件属性 1 不可调整大小、不可移动
     * </pre>
     *
     * <code>optional int32 m_attribute = 18;</code>
     */
    public int getMAttribute() {
      return mAttribute_;
    }

    public static final int M_STATISTICS_FIELD_NUMBER = 19;
    private int mStatistics_;
    /**
     * <pre>
     *数据统计
     * </pre>
     *
     * <code>optional int32 m_statistics = 19;</code>
     */
    public boolean hasMStatistics() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <pre>
     *数据统计
     * </pre>
     *
     * <code>optional int32 m_statistics = 19;</code>
     */
    public int getMStatistics() {
      return mStatistics_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMOpacity()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMRotateAngle()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMSceneId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMSize().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMFont()) {
        if (!getMFont().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMFillColor()) {
        if (!getMFillColor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMHotspot()) {
        if (!getMHotspot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getMPosition());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getMSize());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, mOpacity_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, mRotateAngle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getMFont());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 6, mContent_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, mRadius_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, getMFillColor());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 9, imagePath_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, getMHotspot());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, mJumpSceneId_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, mId_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, mSceneId_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, mType_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, mZValue_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, mMaterialId_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 17, mFileUrl_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(18, mAttribute_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(19, mStatistics_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(1, getMPosition());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(2, getMSize());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(3, mOpacity_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(4, mRotateAngle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(5, getMFont());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(6, mContent_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(7, mRadius_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(8, getMFillColor());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(9, imagePath_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(10, getMHotspot());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(11, mJumpSceneId_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(12, mId_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(13, mSceneId_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(14, mType_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(15, mZValue_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(16, mMaterialId_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(17, mFileUrl_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(18, mAttribute_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(19, mStatistics_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.Component)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.Component other = (com.nibiru.creator.data.HotPotData.Component) obj;

      boolean result = true;
      result = result && (hasMPosition() == other.hasMPosition());
      if (hasMPosition()) {
        result = result && getMPosition()
            .equals(other.getMPosition());
      }
      result = result && (hasMSize() == other.hasMSize());
      if (hasMSize()) {
        result = result && getMSize()
            .equals(other.getMSize());
      }
      result = result && (hasMOpacity() == other.hasMOpacity());
      if (hasMOpacity()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMOpacity())
            == java.lang.Float.floatToIntBits(
                other.getMOpacity()));
      }
      result = result && (hasMRotateAngle() == other.hasMRotateAngle());
      if (hasMRotateAngle()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMRotateAngle())
            == java.lang.Float.floatToIntBits(
                other.getMRotateAngle()));
      }
      result = result && (hasMFont() == other.hasMFont());
      if (hasMFont()) {
        result = result && getMFont()
            .equals(other.getMFont());
      }
      result = result && (hasMContent() == other.hasMContent());
      if (hasMContent()) {
        result = result && getMContent()
            .equals(other.getMContent());
      }
      result = result && (hasMRadius() == other.hasMRadius());
      if (hasMRadius()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMRadius())
            == java.lang.Float.floatToIntBits(
                other.getMRadius()));
      }
      result = result && (hasMFillColor() == other.hasMFillColor());
      if (hasMFillColor()) {
        result = result && getMFillColor()
            .equals(other.getMFillColor());
      }
      result = result && (hasImagePath() == other.hasImagePath());
      if (hasImagePath()) {
        result = result && getImagePath()
            .equals(other.getImagePath());
      }
      result = result && (hasMHotspot() == other.hasMHotspot());
      if (hasMHotspot()) {
        result = result && getMHotspot()
            .equals(other.getMHotspot());
      }
      result = result && (hasMJumpSceneId() == other.hasMJumpSceneId());
      if (hasMJumpSceneId()) {
        result = result && (getMJumpSceneId()
            == other.getMJumpSceneId());
      }
      result = result && (hasMId() == other.hasMId());
      if (hasMId()) {
        result = result && (getMId()
            == other.getMId());
      }
      result = result && (hasMSceneId() == other.hasMSceneId());
      if (hasMSceneId()) {
        result = result && (getMSceneId()
            == other.getMSceneId());
      }
      result = result && (hasMType() == other.hasMType());
      if (hasMType()) {
        result = result && (getMType()
            == other.getMType());
      }
      result = result && (hasMZValue() == other.hasMZValue());
      if (hasMZValue()) {
        result = result && (getMZValue()
            == other.getMZValue());
      }
      result = result && (hasMMaterialId() == other.hasMMaterialId());
      if (hasMMaterialId()) {
        result = result && (getMMaterialId()
            == other.getMMaterialId());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && (hasMAttribute() == other.hasMAttribute());
      if (hasMAttribute()) {
        result = result && (getMAttribute()
            == other.getMAttribute());
      }
      result = result && (hasMStatistics() == other.hasMStatistics());
      if (hasMStatistics()) {
        result = result && (getMStatistics()
            == other.getMStatistics());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMPosition()) {
        hash = (37 * hash) + M_POSITION_FIELD_NUMBER;
        hash = (53 * hash) + getMPosition().hashCode();
      }
      if (hasMSize()) {
        hash = (37 * hash) + M_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMSize().hashCode();
      }
      if (hasMOpacity()) {
        hash = (37 * hash) + M_OPACITY_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMOpacity());
      }
      if (hasMRotateAngle()) {
        hash = (37 * hash) + M_ROTATEANGLE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMRotateAngle());
      }
      if (hasMFont()) {
        hash = (37 * hash) + M_FONT_FIELD_NUMBER;
        hash = (53 * hash) + getMFont().hashCode();
      }
      if (hasMContent()) {
        hash = (37 * hash) + M_CONTENT_FIELD_NUMBER;
        hash = (53 * hash) + getMContent().hashCode();
      }
      if (hasMRadius()) {
        hash = (37 * hash) + M_RADIUS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMRadius());
      }
      if (hasMFillColor()) {
        hash = (37 * hash) + M_FILLCOLOR_FIELD_NUMBER;
        hash = (53 * hash) + getMFillColor().hashCode();
      }
      if (hasImagePath()) {
        hash = (37 * hash) + IMAGEPATH_FIELD_NUMBER;
        hash = (53 * hash) + getImagePath().hashCode();
      }
      if (hasMHotspot()) {
        hash = (37 * hash) + M_HOTSPOT_FIELD_NUMBER;
        hash = (53 * hash) + getMHotspot().hashCode();
      }
      if (hasMJumpSceneId()) {
        hash = (37 * hash) + M_JUMPSCENEID_FIELD_NUMBER;
        hash = (53 * hash) + getMJumpSceneId();
      }
      if (hasMId()) {
        hash = (37 * hash) + M_ID_FIELD_NUMBER;
        hash = (53 * hash) + getMId();
      }
      if (hasMSceneId()) {
        hash = (37 * hash) + M_SCENEID_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneId();
      }
      if (hasMType()) {
        hash = (37 * hash) + M_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getMType();
      }
      if (hasMZValue()) {
        hash = (37 * hash) + M_ZVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getMZValue();
      }
      if (hasMMaterialId()) {
        hash = (37 * hash) + M_MATERIALID_FIELD_NUMBER;
        hash = (53 * hash) + getMMaterialId();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      if (hasMAttribute()) {
        hash = (37 * hash) + M_ATTRIBUTE_FIELD_NUMBER;
        hash = (53 * hash) + getMAttribute();
      }
      if (hasMStatistics()) {
        hash = (37 * hash) + M_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getMStatistics();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.Component parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Component parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Component parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Component parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Component parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Component parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Component parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Component parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Component parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Component parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.Component prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *选择器中的组件
     * </pre>
     *
     * Protobuf type {@code DataFactory.Component}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.Component)
        com.nibiru.creator.data.HotPotData.ComponentOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Component_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Component_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.Component.class, com.nibiru.creator.data.HotPotData.Component.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.Component.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMPositionFieldBuilder();
          getMSizeFieldBuilder();
          getMFontFieldBuilder();
          getMFillColorFieldBuilder();
          getMHotspotFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (mPositionBuilder_ == null) {
          mPosition_ = null;
        } else {
          mPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (mSizeBuilder_ == null) {
          mSize_ = null;
        } else {
          mSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        mOpacity_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        mRotateAngle_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (mFontBuilder_ == null) {
          mFont_ = null;
        } else {
          mFontBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        mContent_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        mRadius_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (mFillColorBuilder_ == null) {
          mFillColor_ = null;
        } else {
          mFillColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        imagePath_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        if (mHotspotBuilder_ == null) {
          mHotspot_ = null;
        } else {
          mHotspotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        mJumpSceneId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        mId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        mSceneId_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        mType_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        mZValue_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        mMaterialId_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00010000);
        mAttribute_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        mStatistics_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Component_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.Component getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.Component.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.Component build() {
        com.nibiru.creator.data.HotPotData.Component result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.Component buildPartial() {
        com.nibiru.creator.data.HotPotData.Component result = new com.nibiru.creator.data.HotPotData.Component(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (mPositionBuilder_ == null) {
          result.mPosition_ = mPosition_;
        } else {
          result.mPosition_ = mPositionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (mSizeBuilder_ == null) {
          result.mSize_ = mSize_;
        } else {
          result.mSize_ = mSizeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mOpacity_ = mOpacity_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mRotateAngle_ = mRotateAngle_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (mFontBuilder_ == null) {
          result.mFont_ = mFont_;
        } else {
          result.mFont_ = mFontBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mContent_ = mContent_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mRadius_ = mRadius_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (mFillColorBuilder_ == null) {
          result.mFillColor_ = mFillColor_;
        } else {
          result.mFillColor_ = mFillColorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.imagePath_ = imagePath_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (mHotspotBuilder_ == null) {
          result.mHotspot_ = mHotspot_;
        } else {
          result.mHotspot_ = mHotspotBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.mJumpSceneId_ = mJumpSceneId_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.mId_ = mId_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.mSceneId_ = mSceneId_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.mType_ = mType_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.mZValue_ = mZValue_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.mMaterialId_ = mMaterialId_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.mFileUrl_ = mFileUrl_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.mAttribute_ = mAttribute_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.mStatistics_ = mStatistics_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.Component) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.Component)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.Component other) {
        if (other == com.nibiru.creator.data.HotPotData.Component.getDefaultInstance()) return this;
        if (other.hasMPosition()) {
          mergeMPosition(other.getMPosition());
        }
        if (other.hasMSize()) {
          mergeMSize(other.getMSize());
        }
        if (other.hasMOpacity()) {
          setMOpacity(other.getMOpacity());
        }
        if (other.hasMRotateAngle()) {
          setMRotateAngle(other.getMRotateAngle());
        }
        if (other.hasMFont()) {
          mergeMFont(other.getMFont());
        }
        if (other.hasMContent()) {
          bitField0_ |= 0x00000020;
          mContent_ = other.mContent_;
          onChanged();
        }
        if (other.hasMRadius()) {
          setMRadius(other.getMRadius());
        }
        if (other.hasMFillColor()) {
          mergeMFillColor(other.getMFillColor());
        }
        if (other.hasImagePath()) {
          bitField0_ |= 0x00000100;
          imagePath_ = other.imagePath_;
          onChanged();
        }
        if (other.hasMHotspot()) {
          mergeMHotspot(other.getMHotspot());
        }
        if (other.hasMJumpSceneId()) {
          setMJumpSceneId(other.getMJumpSceneId());
        }
        if (other.hasMId()) {
          setMId(other.getMId());
        }
        if (other.hasMSceneId()) {
          setMSceneId(other.getMSceneId());
        }
        if (other.hasMType()) {
          setMType(other.getMType());
        }
        if (other.hasMZValue()) {
          setMZValue(other.getMZValue());
        }
        if (other.hasMMaterialId()) {
          setMMaterialId(other.getMMaterialId());
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00010000;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        if (other.hasMAttribute()) {
          setMAttribute(other.getMAttribute());
        }
        if (other.hasMStatistics()) {
          setMStatistics(other.getMStatistics());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMPosition()) {
          return false;
        }
        if (!hasMSize()) {
          return false;
        }
        if (!hasMOpacity()) {
          return false;
        }
        if (!hasMRotateAngle()) {
          return false;
        }
        if (!hasMId()) {
          return false;
        }
        if (!hasMSceneId()) {
          return false;
        }
        if (!hasMType()) {
          return false;
        }
        if (!getMPosition().isInitialized()) {
          return false;
        }
        if (!getMSize().isInitialized()) {
          return false;
        }
        if (hasMFont()) {
          if (!getMFont().isInitialized()) {
            return false;
          }
        }
        if (hasMFillColor()) {
          if (!getMFillColor().isInitialized()) {
            return false;
          }
        }
        if (hasMHotspot()) {
          if (!getMHotspot().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.Component parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.Component) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.nibiru.creator.data.HotPotData.Vec2 mPosition_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mPositionBuilder_;
      /**
       * <pre>
       *位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 1;</code>
       */
      public boolean hasMPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 1;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMPosition() {
        if (mPositionBuilder_ == null) {
          return mPosition_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
        } else {
          return mPositionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 1;</code>
       */
      public Builder setMPosition(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mPosition_ = value;
          onChanged();
        } else {
          mPositionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       *位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 1;</code>
       */
      public Builder setMPosition(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mPositionBuilder_ == null) {
          mPosition_ = builderForValue.build();
          onChanged();
        } else {
          mPositionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       *位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 1;</code>
       */
      public Builder mergeMPosition(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mPositionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              mPosition_ != null &&
              mPosition_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mPosition_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mPosition_).mergeFrom(value).buildPartial();
          } else {
            mPosition_ = value;
          }
          onChanged();
        } else {
          mPositionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       *位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 1;</code>
       */
      public Builder clearMPosition() {
        if (mPositionBuilder_ == null) {
          mPosition_ = null;
          onChanged();
        } else {
          mPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       *位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 1;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMPositionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMPositionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 1;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMPositionOrBuilder() {
        if (mPositionBuilder_ != null) {
          return mPositionBuilder_.getMessageOrBuilder();
        } else {
          return mPosition_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mPosition_;
        }
      }
      /**
       * <pre>
       *位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_Position = 1;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMPositionFieldBuilder() {
        if (mPositionBuilder_ == null) {
          mPositionBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMPosition(),
                  getParentForChildren(),
                  isClean());
          mPosition_ = null;
        }
        return mPositionBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mSize_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mSizeBuilder_;
      /**
       * <pre>
       *大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_size = 2;</code>
       */
      public boolean hasMSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_size = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMSize() {
        if (mSizeBuilder_ == null) {
          return mSize_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mSize_;
        } else {
          return mSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_size = 2;</code>
       */
      public Builder setMSize(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mSize_ = value;
          onChanged();
        } else {
          mSizeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_size = 2;</code>
       */
      public Builder setMSize(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mSizeBuilder_ == null) {
          mSize_ = builderForValue.build();
          onChanged();
        } else {
          mSizeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_size = 2;</code>
       */
      public Builder mergeMSize(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mSizeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              mSize_ != null &&
              mSize_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mSize_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mSize_).mergeFrom(value).buildPartial();
          } else {
            mSize_ = value;
          }
          onChanged();
        } else {
          mSizeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       *大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_size = 2;</code>
       */
      public Builder clearMSize() {
        if (mSizeBuilder_ == null) {
          mSize_ = null;
          onChanged();
        } else {
          mSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       *大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_size = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMSizeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_size = 2;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMSizeOrBuilder() {
        if (mSizeBuilder_ != null) {
          return mSizeBuilder_.getMessageOrBuilder();
        } else {
          return mSize_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mSize_;
        }
      }
      /**
       * <pre>
       *大小
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_size = 2;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMSizeFieldBuilder() {
        if (mSizeBuilder_ == null) {
          mSizeBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMSize(),
                  getParentForChildren(),
                  isClean());
          mSize_ = null;
        }
        return mSizeBuilder_;
      }

      private float mOpacity_ ;
      /**
       * <pre>
       *透明度
       * </pre>
       *
       * <code>required float m_opacity = 3;</code>
       */
      public boolean hasMOpacity() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *透明度
       * </pre>
       *
       * <code>required float m_opacity = 3;</code>
       */
      public float getMOpacity() {
        return mOpacity_;
      }
      /**
       * <pre>
       *透明度
       * </pre>
       *
       * <code>required float m_opacity = 3;</code>
       */
      public Builder setMOpacity(float value) {
        bitField0_ |= 0x00000004;
        mOpacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *透明度
       * </pre>
       *
       * <code>required float m_opacity = 3;</code>
       */
      public Builder clearMOpacity() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mOpacity_ = 0F;
        onChanged();
        return this;
      }

      private float mRotateAngle_ ;
      /**
       * <pre>
       *旋转角度
       * </pre>
       *
       * <code>required float m_rotateAngle = 4;</code>
       */
      public boolean hasMRotateAngle() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *旋转角度
       * </pre>
       *
       * <code>required float m_rotateAngle = 4;</code>
       */
      public float getMRotateAngle() {
        return mRotateAngle_;
      }
      /**
       * <pre>
       *旋转角度
       * </pre>
       *
       * <code>required float m_rotateAngle = 4;</code>
       */
      public Builder setMRotateAngle(float value) {
        bitField0_ |= 0x00000008;
        mRotateAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *旋转角度
       * </pre>
       *
       * <code>required float m_rotateAngle = 4;</code>
       */
      public Builder clearMRotateAngle() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mRotateAngle_ = 0F;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Font mFont_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Font, com.nibiru.creator.data.HotPotData.Font.Builder, com.nibiru.creator.data.HotPotData.FontOrBuilder> mFontBuilder_;
      /**
       * <pre>
       *字体
       * </pre>
       *
       * <code>optional .DataFactory.Font m_font = 5;</code>
       */
      public boolean hasMFont() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *字体
       * </pre>
       *
       * <code>optional .DataFactory.Font m_font = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Font getMFont() {
        if (mFontBuilder_ == null) {
          return mFont_ == null ? com.nibiru.creator.data.HotPotData.Font.getDefaultInstance() : mFont_;
        } else {
          return mFontBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *字体
       * </pre>
       *
       * <code>optional .DataFactory.Font m_font = 5;</code>
       */
      public Builder setMFont(com.nibiru.creator.data.HotPotData.Font value) {
        if (mFontBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mFont_ = value;
          onChanged();
        } else {
          mFontBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *字体
       * </pre>
       *
       * <code>optional .DataFactory.Font m_font = 5;</code>
       */
      public Builder setMFont(
          com.nibiru.creator.data.HotPotData.Font.Builder builderForValue) {
        if (mFontBuilder_ == null) {
          mFont_ = builderForValue.build();
          onChanged();
        } else {
          mFontBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *字体
       * </pre>
       *
       * <code>optional .DataFactory.Font m_font = 5;</code>
       */
      public Builder mergeMFont(com.nibiru.creator.data.HotPotData.Font value) {
        if (mFontBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              mFont_ != null &&
              mFont_ != com.nibiru.creator.data.HotPotData.Font.getDefaultInstance()) {
            mFont_ =
              com.nibiru.creator.data.HotPotData.Font.newBuilder(mFont_).mergeFrom(value).buildPartial();
          } else {
            mFont_ = value;
          }
          onChanged();
        } else {
          mFontBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *字体
       * </pre>
       *
       * <code>optional .DataFactory.Font m_font = 5;</code>
       */
      public Builder clearMFont() {
        if (mFontBuilder_ == null) {
          mFont_ = null;
          onChanged();
        } else {
          mFontBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       *字体
       * </pre>
       *
       * <code>optional .DataFactory.Font m_font = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Font.Builder getMFontBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMFontFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *字体
       * </pre>
       *
       * <code>optional .DataFactory.Font m_font = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.FontOrBuilder getMFontOrBuilder() {
        if (mFontBuilder_ != null) {
          return mFontBuilder_.getMessageOrBuilder();
        } else {
          return mFont_ == null ?
              com.nibiru.creator.data.HotPotData.Font.getDefaultInstance() : mFont_;
        }
      }
      /**
       * <pre>
       *字体
       * </pre>
       *
       * <code>optional .DataFactory.Font m_font = 5;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Font, com.nibiru.creator.data.HotPotData.Font.Builder, com.nibiru.creator.data.HotPotData.FontOrBuilder> 
          getMFontFieldBuilder() {
        if (mFontBuilder_ == null) {
          mFontBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Font, com.nibiru.creator.data.HotPotData.Font.Builder, com.nibiru.creator.data.HotPotData.FontOrBuilder>(
                  getMFont(),
                  getParentForChildren(),
                  isClean());
          mFont_ = null;
        }
        return mFontBuilder_;
      }

      private java.lang.Object mContent_ = "";
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>optional string m_content = 6;</code>
       */
      public boolean hasMContent() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>optional string m_content = 6;</code>
       */
      public java.lang.String getMContent() {
        java.lang.Object ref = mContent_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mContent_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>optional string m_content = 6;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMContentBytes() {
        java.lang.Object ref = mContent_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mContent_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>optional string m_content = 6;</code>
       */
      public Builder setMContent(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mContent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>optional string m_content = 6;</code>
       */
      public Builder clearMContent() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mContent_ = getDefaultInstance().getMContent();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *文本内容
       * </pre>
       *
       * <code>optional string m_content = 6;</code>
       */
      public Builder setMContentBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mContent_ = value;
        onChanged();
        return this;
      }

      private float mRadius_ ;
      /**
       * <pre>
       *圆角半径
       * </pre>
       *
       * <code>optional float m_radius = 7;</code>
       */
      public boolean hasMRadius() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *圆角半径
       * </pre>
       *
       * <code>optional float m_radius = 7;</code>
       */
      public float getMRadius() {
        return mRadius_;
      }
      /**
       * <pre>
       *圆角半径
       * </pre>
       *
       * <code>optional float m_radius = 7;</code>
       */
      public Builder setMRadius(float value) {
        bitField0_ |= 0x00000040;
        mRadius_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *圆角半径
       * </pre>
       *
       * <code>optional float m_radius = 7;</code>
       */
      public Builder clearMRadius() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mRadius_ = 0F;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec4 mFillColor_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> mFillColorBuilder_;
      /**
       * <pre>
       *填充颜色色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
       */
      public boolean hasMFillColor() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       *填充颜色色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4 getMFillColor() {
        if (mFillColorBuilder_ == null) {
          return mFillColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFillColor_;
        } else {
          return mFillColorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *填充颜色色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
       */
      public Builder setMFillColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mFillColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mFillColor_ = value;
          onChanged();
        } else {
          mFillColorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       *填充颜色色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
       */
      public Builder setMFillColor(
          com.nibiru.creator.data.HotPotData.Vec4.Builder builderForValue) {
        if (mFillColorBuilder_ == null) {
          mFillColor_ = builderForValue.build();
          onChanged();
        } else {
          mFillColorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       *填充颜色色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
       */
      public Builder mergeMFillColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mFillColorBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              mFillColor_ != null &&
              mFillColor_ != com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance()) {
            mFillColor_ =
              com.nibiru.creator.data.HotPotData.Vec4.newBuilder(mFillColor_).mergeFrom(value).buildPartial();
          } else {
            mFillColor_ = value;
          }
          onChanged();
        } else {
          mFillColorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <pre>
       *填充颜色色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
       */
      public Builder clearMFillColor() {
        if (mFillColorBuilder_ == null) {
          mFillColor_ = null;
          onChanged();
        } else {
          mFillColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <pre>
       *填充颜色色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4.Builder getMFillColorBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getMFillColorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *填充颜色色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMFillColorOrBuilder() {
        if (mFillColorBuilder_ != null) {
          return mFillColorBuilder_.getMessageOrBuilder();
        } else {
          return mFillColor_ == null ?
              com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mFillColor_;
        }
      }
      /**
       * <pre>
       *填充颜色色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_fillColor = 8;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> 
          getMFillColorFieldBuilder() {
        if (mFillColorBuilder_ == null) {
          mFillColorBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder>(
                  getMFillColor(),
                  getParentForChildren(),
                  isClean());
          mFillColor_ = null;
        }
        return mFillColorBuilder_;
      }

      private java.lang.Object imagePath_ = "";
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string imagePath = 9;</code>
       */
      public boolean hasImagePath() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string imagePath = 9;</code>
       */
      public java.lang.String getImagePath() {
        java.lang.Object ref = imagePath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            imagePath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string imagePath = 9;</code>
       */
      public com.nibiru.protobuf.ByteString
          getImagePathBytes() {
        java.lang.Object ref = imagePath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          imagePath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string imagePath = 9;</code>
       */
      public Builder setImagePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        imagePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string imagePath = 9;</code>
       */
      public Builder clearImagePath() {
        bitField0_ = (bitField0_ & ~0x00000100);
        imagePath_ = getDefaultInstance().getImagePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string imagePath = 9;</code>
       */
      public Builder setImagePathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        imagePath_ = value;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.HotPot mHotspot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder> mHotspotBuilder_;
      /**
       * <pre>
       *包含的热点
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
       */
      public boolean hasMHotspot() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       *包含的热点
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot getMHotspot() {
        if (mHotspotBuilder_ == null) {
          return mHotspot_ == null ? com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mHotspot_;
        } else {
          return mHotspotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *包含的热点
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
       */
      public Builder setMHotspot(com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mHotspotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mHotspot_ = value;
          onChanged();
        } else {
          mHotspotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       *包含的热点
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
       */
      public Builder setMHotspot(
          com.nibiru.creator.data.HotPotData.HotPot.Builder builderForValue) {
        if (mHotspotBuilder_ == null) {
          mHotspot_ = builderForValue.build();
          onChanged();
        } else {
          mHotspotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       *包含的热点
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
       */
      public Builder mergeMHotspot(com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mHotspotBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              mHotspot_ != null &&
              mHotspot_ != com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance()) {
            mHotspot_ =
              com.nibiru.creator.data.HotPotData.HotPot.newBuilder(mHotspot_).mergeFrom(value).buildPartial();
          } else {
            mHotspot_ = value;
          }
          onChanged();
        } else {
          mHotspotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       *包含的热点
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
       */
      public Builder clearMHotspot() {
        if (mHotspotBuilder_ == null) {
          mHotspot_ = null;
          onChanged();
        } else {
          mHotspotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <pre>
       *包含的热点
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot.Builder getMHotspotBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getMHotspotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *包含的热点
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMHotspotOrBuilder() {
        if (mHotspotBuilder_ != null) {
          return mHotspotBuilder_.getMessageOrBuilder();
        } else {
          return mHotspot_ == null ?
              com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mHotspot_;
        }
      }
      /**
       * <pre>
       *包含的热点
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_hotspot = 10;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
          getMHotspotFieldBuilder() {
        if (mHotspotBuilder_ == null) {
          mHotspotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder>(
                  getMHotspot(),
                  getParentForChildren(),
                  isClean());
          mHotspot_ = null;
        }
        return mHotspotBuilder_;
      }

      private int mJumpSceneId_ ;
      /**
       * <pre>
       *包含的跳转
       * </pre>
       *
       * <code>optional int32 m_jumpSceneId = 11;</code>
       */
      public boolean hasMJumpSceneId() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       *包含的跳转
       * </pre>
       *
       * <code>optional int32 m_jumpSceneId = 11;</code>
       */
      public int getMJumpSceneId() {
        return mJumpSceneId_;
      }
      /**
       * <pre>
       *包含的跳转
       * </pre>
       *
       * <code>optional int32 m_jumpSceneId = 11;</code>
       */
      public Builder setMJumpSceneId(int value) {
        bitField0_ |= 0x00000400;
        mJumpSceneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *包含的跳转
       * </pre>
       *
       * <code>optional int32 m_jumpSceneId = 11;</code>
       */
      public Builder clearMJumpSceneId() {
        bitField0_ = (bitField0_ & ~0x00000400);
        mJumpSceneId_ = 0;
        onChanged();
        return this;
      }

      private int mId_ ;
      /**
       * <pre>
       *组件的ID
       * </pre>
       *
       * <code>required int32 m_Id = 12;</code>
       */
      public boolean hasMId() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       *组件的ID
       * </pre>
       *
       * <code>required int32 m_Id = 12;</code>
       */
      public int getMId() {
        return mId_;
      }
      /**
       * <pre>
       *组件的ID
       * </pre>
       *
       * <code>required int32 m_Id = 12;</code>
       */
      public Builder setMId(int value) {
        bitField0_ |= 0x00000800;
        mId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *组件的ID
       * </pre>
       *
       * <code>required int32 m_Id = 12;</code>
       */
      public Builder clearMId() {
        bitField0_ = (bitField0_ & ~0x00000800);
        mId_ = 0;
        onChanged();
        return this;
      }

      private int mSceneId_ ;
      /**
       * <pre>
       *所属于的场景ID
       * </pre>
       *
       * <code>required int32 m_sceneId = 13;</code>
       */
      public boolean hasMSceneId() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       *所属于的场景ID
       * </pre>
       *
       * <code>required int32 m_sceneId = 13;</code>
       */
      public int getMSceneId() {
        return mSceneId_;
      }
      /**
       * <pre>
       *所属于的场景ID
       * </pre>
       *
       * <code>required int32 m_sceneId = 13;</code>
       */
      public Builder setMSceneId(int value) {
        bitField0_ |= 0x00001000;
        mSceneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *所属于的场景ID
       * </pre>
       *
       * <code>required int32 m_sceneId = 13;</code>
       */
      public Builder clearMSceneId() {
        bitField0_ = (bitField0_ & ~0x00001000);
        mSceneId_ = 0;
        onChanged();
        return this;
      }

      private int mType_ ;
      /**
       * <pre>
       *类型
       * </pre>
       *
       * <code>required int32 m_type = 14;</code>
       */
      public boolean hasMType() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       *类型
       * </pre>
       *
       * <code>required int32 m_type = 14;</code>
       */
      public int getMType() {
        return mType_;
      }
      /**
       * <pre>
       *类型
       * </pre>
       *
       * <code>required int32 m_type = 14;</code>
       */
      public Builder setMType(int value) {
        bitField0_ |= 0x00002000;
        mType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *类型
       * </pre>
       *
       * <code>required int32 m_type = 14;</code>
       */
      public Builder clearMType() {
        bitField0_ = (bitField0_ & ~0x00002000);
        mType_ = 0;
        onChanged();
        return this;
      }

      private int mZValue_ ;
      /**
       * <pre>
       *层叠顺序
       * </pre>
       *
       * <code>optional int32 m_ZValue = 15;</code>
       */
      public boolean hasMZValue() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <pre>
       *层叠顺序
       * </pre>
       *
       * <code>optional int32 m_ZValue = 15;</code>
       */
      public int getMZValue() {
        return mZValue_;
      }
      /**
       * <pre>
       *层叠顺序
       * </pre>
       *
       * <code>optional int32 m_ZValue = 15;</code>
       */
      public Builder setMZValue(int value) {
        bitField0_ |= 0x00004000;
        mZValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *层叠顺序
       * </pre>
       *
       * <code>optional int32 m_ZValue = 15;</code>
       */
      public Builder clearMZValue() {
        bitField0_ = (bitField0_ & ~0x00004000);
        mZValue_ = 0;
        onChanged();
        return this;
      }

      private int mMaterialId_ ;
      /**
       * <code>optional int32 m_materialId = 16;</code>
       */
      public boolean hasMMaterialId() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 m_materialId = 16;</code>
       */
      public int getMMaterialId() {
        return mMaterialId_;
      }
      /**
       * <code>optional int32 m_materialId = 16;</code>
       */
      public Builder setMMaterialId(int value) {
        bitField0_ |= 0x00008000;
        mMaterialId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 m_materialId = 16;</code>
       */
      public Builder clearMMaterialId() {
        bitField0_ = (bitField0_ & ~0x00008000);
        mMaterialId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 17;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 17;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 17;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 17;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00010000;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 17;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00010000);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 17;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00010000;
        mFileUrl_ = value;
        onChanged();
        return this;
      }

      private int mAttribute_ ;
      /**
       * <pre>
       *组件属性 1 不可调整大小、不可移动
       * </pre>
       *
       * <code>optional int32 m_attribute = 18;</code>
       */
      public boolean hasMAttribute() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <pre>
       *组件属性 1 不可调整大小、不可移动
       * </pre>
       *
       * <code>optional int32 m_attribute = 18;</code>
       */
      public int getMAttribute() {
        return mAttribute_;
      }
      /**
       * <pre>
       *组件属性 1 不可调整大小、不可移动
       * </pre>
       *
       * <code>optional int32 m_attribute = 18;</code>
       */
      public Builder setMAttribute(int value) {
        bitField0_ |= 0x00020000;
        mAttribute_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *组件属性 1 不可调整大小、不可移动
       * </pre>
       *
       * <code>optional int32 m_attribute = 18;</code>
       */
      public Builder clearMAttribute() {
        bitField0_ = (bitField0_ & ~0x00020000);
        mAttribute_ = 0;
        onChanged();
        return this;
      }

      private int mStatistics_ ;
      /**
       * <pre>
       *数据统计
       * </pre>
       *
       * <code>optional int32 m_statistics = 19;</code>
       */
      public boolean hasMStatistics() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <pre>
       *数据统计
       * </pre>
       *
       * <code>optional int32 m_statistics = 19;</code>
       */
      public int getMStatistics() {
        return mStatistics_;
      }
      /**
       * <pre>
       *数据统计
       * </pre>
       *
       * <code>optional int32 m_statistics = 19;</code>
       */
      public Builder setMStatistics(int value) {
        bitField0_ |= 0x00040000;
        mStatistics_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *数据统计
       * </pre>
       *
       * <code>optional int32 m_statistics = 19;</code>
       */
      public Builder clearMStatistics() {
        bitField0_ = (bitField0_ & ~0x00040000);
        mStatistics_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.Component)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.Component)
    private static final com.nibiru.creator.data.HotPotData.Component DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.Component();
    }

    public static com.nibiru.creator.data.HotPotData.Component getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<Component>
        PARSER = new com.nibiru.protobuf.AbstractParser<Component>() {
      public Component parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new Component(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<Component> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<Component> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.Component getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SkinSetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.SkinSet)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>required int32 m_Id = 1;</code>
     */
    boolean hasMId();
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>required int32 m_Id = 1;</code>
     */
    int getMId();

    /**
     * <pre>
     *所属场景的ID
     * </pre>
     *
     * <code>required int32 m_sceneId = 2;</code>
     */
    boolean hasMSceneId();
    /**
     * <pre>
     *所属场景的ID
     * </pre>
     *
     * <code>required int32 m_sceneId = 2;</code>
     */
    int getMSceneId();

    /**
     * <pre>
     *宽
     * </pre>
     *
     * <code>required int32 m_width = 3;</code>
     */
    boolean hasMWidth();
    /**
     * <pre>
     *宽
     * </pre>
     *
     * <code>required int32 m_width = 3;</code>
     */
    int getMWidth();

    /**
     * <pre>
     *高
     * </pre>
     *
     * <code>required int32 m_height = 4;</code>
     */
    boolean hasMHeight();
    /**
     * <pre>
     *高
     * </pre>
     *
     * <code>required int32 m_height = 4;</code>
     */
    int getMHeight();

    /**
     * <pre>
     *透明度
     * </pre>
     *
     * <code>required float m_opacity = 5;</code>
     */
    boolean hasMOpacity();
    /**
     * <pre>
     *透明度
     * </pre>
     *
     * <code>required float m_opacity = 5;</code>
     */
    float getMOpacity();

    /**
     * <pre>
     *背景色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
     */
    boolean hasMColor();
    /**
     * <pre>
     *背景色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4 getMColor();
    /**
     * <pre>
     *背景色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMColorOrBuilder();

    /**
     * <pre>
     *自定义背景
     * </pre>
     *
     * <code>optional string m_userDefineFilePath = 7;</code>
     */
    boolean hasMUserDefineFilePath();
    /**
     * <pre>
     *自定义背景
     * </pre>
     *
     * <code>optional string m_userDefineFilePath = 7;</code>
     */
    java.lang.String getMUserDefineFilePath();
    /**
     * <pre>
     *自定义背景
     * </pre>
     *
     * <code>optional string m_userDefineFilePath = 7;</code>
     */
    com.nibiru.protobuf.ByteString
        getMUserDefineFilePathBytes();

    /**
     * <code>optional int32 m_materialId = 8;</code>
     */
    boolean hasMMaterialId();
    /**
     * <code>optional int32 m_materialId = 8;</code>
     */
    int getMMaterialId();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 9;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 9;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 9;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();

    /**
     * <pre>
     *组件属性 1 不可调整大小、不可移动
     * </pre>
     *
     * <code>optional int32 m_attribute = 10;</code>
     */
    boolean hasMAttribute();
    /**
     * <pre>
     *组件属性 1 不可调整大小、不可移动
     * </pre>
     *
     * <code>optional int32 m_attribute = 10;</code>
     */
    int getMAttribute();
  }
  /**
   * <pre>
   * 皮肤设置
   * </pre>
   *
   * Protobuf type {@code DataFactory.SkinSet}
   */
  public  static final class SkinSet extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.SkinSet)
      SkinSetOrBuilder {
    // Use SkinSet.newBuilder() to construct.
    private SkinSet(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SkinSet() {
      mId_ = 0;
      mSceneId_ = 0;
      mWidth_ = 0;
      mHeight_ = 0;
      mOpacity_ = 0F;
      mUserDefineFilePath_ = "";
      mMaterialId_ = 0;
      mFileUrl_ = "";
      mAttribute_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SkinSet(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mSceneId_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              mWidth_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              mHeight_ = input.readInt32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              mOpacity_ = input.readFloat();
              break;
            }
            case 50: {
              com.nibiru.creator.data.HotPotData.Vec4.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = mColor_.toBuilder();
              }
              mColor_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec4.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mColor_);
                mColor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              mUserDefineFilePath_ = bs;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              mMaterialId_ = input.readInt32();
              break;
            }
            case 74: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000100;
              mFileUrl_ = bs;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              mAttribute_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkinSet_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkinSet_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.SkinSet.class, com.nibiru.creator.data.HotPotData.SkinSet.Builder.class);
    }

    private int bitField0_;
    public static final int M_ID_FIELD_NUMBER = 1;
    private int mId_;
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>required int32 m_Id = 1;</code>
     */
    public boolean hasMId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>required int32 m_Id = 1;</code>
     */
    public int getMId() {
      return mId_;
    }

    public static final int M_SCENEID_FIELD_NUMBER = 2;
    private int mSceneId_;
    /**
     * <pre>
     *所属场景的ID
     * </pre>
     *
     * <code>required int32 m_sceneId = 2;</code>
     */
    public boolean hasMSceneId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *所属场景的ID
     * </pre>
     *
     * <code>required int32 m_sceneId = 2;</code>
     */
    public int getMSceneId() {
      return mSceneId_;
    }

    public static final int M_WIDTH_FIELD_NUMBER = 3;
    private int mWidth_;
    /**
     * <pre>
     *宽
     * </pre>
     *
     * <code>required int32 m_width = 3;</code>
     */
    public boolean hasMWidth() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *宽
     * </pre>
     *
     * <code>required int32 m_width = 3;</code>
     */
    public int getMWidth() {
      return mWidth_;
    }

    public static final int M_HEIGHT_FIELD_NUMBER = 4;
    private int mHeight_;
    /**
     * <pre>
     *高
     * </pre>
     *
     * <code>required int32 m_height = 4;</code>
     */
    public boolean hasMHeight() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *高
     * </pre>
     *
     * <code>required int32 m_height = 4;</code>
     */
    public int getMHeight() {
      return mHeight_;
    }

    public static final int M_OPACITY_FIELD_NUMBER = 5;
    private float mOpacity_;
    /**
     * <pre>
     *透明度
     * </pre>
     *
     * <code>required float m_opacity = 5;</code>
     */
    public boolean hasMOpacity() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *透明度
     * </pre>
     *
     * <code>required float m_opacity = 5;</code>
     */
    public float getMOpacity() {
      return mOpacity_;
    }

    public static final int M_COLOR_FIELD_NUMBER = 6;
    private com.nibiru.creator.data.HotPotData.Vec4 mColor_;
    /**
     * <pre>
     *背景色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
     */
    public boolean hasMColor() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *背景色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4 getMColor() {
      return mColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mColor_;
    }
    /**
     * <pre>
     *背景色
     * </pre>
     *
     * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMColorOrBuilder() {
      return mColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mColor_;
    }

    public static final int M_USERDEFINEFILEPATH_FIELD_NUMBER = 7;
    private volatile java.lang.Object mUserDefineFilePath_;
    /**
     * <pre>
     *自定义背景
     * </pre>
     *
     * <code>optional string m_userDefineFilePath = 7;</code>
     */
    public boolean hasMUserDefineFilePath() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *自定义背景
     * </pre>
     *
     * <code>optional string m_userDefineFilePath = 7;</code>
     */
    public java.lang.String getMUserDefineFilePath() {
      java.lang.Object ref = mUserDefineFilePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mUserDefineFilePath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *自定义背景
     * </pre>
     *
     * <code>optional string m_userDefineFilePath = 7;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMUserDefineFilePathBytes() {
      java.lang.Object ref = mUserDefineFilePath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mUserDefineFilePath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_MATERIALID_FIELD_NUMBER = 8;
    private int mMaterialId_;
    /**
     * <code>optional int32 m_materialId = 8;</code>
     */
    public boolean hasMMaterialId() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 m_materialId = 8;</code>
     */
    public int getMMaterialId() {
      return mMaterialId_;
    }

    public static final int M_FILEURL_FIELD_NUMBER = 9;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 9;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 9;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 9;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ATTRIBUTE_FIELD_NUMBER = 10;
    private int mAttribute_;
    /**
     * <pre>
     *组件属性 1 不可调整大小、不可移动
     * </pre>
     *
     * <code>optional int32 m_attribute = 10;</code>
     */
    public boolean hasMAttribute() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     *组件属性 1 不可调整大小、不可移动
     * </pre>
     *
     * <code>optional int32 m_attribute = 10;</code>
     */
    public int getMAttribute() {
      return mAttribute_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMSceneId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMHeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMOpacity()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMColor()) {
        if (!getMColor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mSceneId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, mWidth_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, mHeight_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, mOpacity_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, getMColor());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 7, mUserDefineFilePath_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, mMaterialId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 9, mFileUrl_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, mAttribute_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(1, mId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(2, mSceneId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(3, mWidth_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(4, mHeight_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(5, mOpacity_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(6, getMColor());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(7, mUserDefineFilePath_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(8, mMaterialId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(9, mFileUrl_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(10, mAttribute_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.SkinSet)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.SkinSet other = (com.nibiru.creator.data.HotPotData.SkinSet) obj;

      boolean result = true;
      result = result && (hasMId() == other.hasMId());
      if (hasMId()) {
        result = result && (getMId()
            == other.getMId());
      }
      result = result && (hasMSceneId() == other.hasMSceneId());
      if (hasMSceneId()) {
        result = result && (getMSceneId()
            == other.getMSceneId());
      }
      result = result && (hasMWidth() == other.hasMWidth());
      if (hasMWidth()) {
        result = result && (getMWidth()
            == other.getMWidth());
      }
      result = result && (hasMHeight() == other.hasMHeight());
      if (hasMHeight()) {
        result = result && (getMHeight()
            == other.getMHeight());
      }
      result = result && (hasMOpacity() == other.hasMOpacity());
      if (hasMOpacity()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMOpacity())
            == java.lang.Float.floatToIntBits(
                other.getMOpacity()));
      }
      result = result && (hasMColor() == other.hasMColor());
      if (hasMColor()) {
        result = result && getMColor()
            .equals(other.getMColor());
      }
      result = result && (hasMUserDefineFilePath() == other.hasMUserDefineFilePath());
      if (hasMUserDefineFilePath()) {
        result = result && getMUserDefineFilePath()
            .equals(other.getMUserDefineFilePath());
      }
      result = result && (hasMMaterialId() == other.hasMMaterialId());
      if (hasMMaterialId()) {
        result = result && (getMMaterialId()
            == other.getMMaterialId());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && (hasMAttribute() == other.hasMAttribute());
      if (hasMAttribute()) {
        result = result && (getMAttribute()
            == other.getMAttribute());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMId()) {
        hash = (37 * hash) + M_ID_FIELD_NUMBER;
        hash = (53 * hash) + getMId();
      }
      if (hasMSceneId()) {
        hash = (37 * hash) + M_SCENEID_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneId();
      }
      if (hasMWidth()) {
        hash = (37 * hash) + M_WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + getMWidth();
      }
      if (hasMHeight()) {
        hash = (37 * hash) + M_HEIGHT_FIELD_NUMBER;
        hash = (53 * hash) + getMHeight();
      }
      if (hasMOpacity()) {
        hash = (37 * hash) + M_OPACITY_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMOpacity());
      }
      if (hasMColor()) {
        hash = (37 * hash) + M_COLOR_FIELD_NUMBER;
        hash = (53 * hash) + getMColor().hashCode();
      }
      if (hasMUserDefineFilePath()) {
        hash = (37 * hash) + M_USERDEFINEFILEPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMUserDefineFilePath().hashCode();
      }
      if (hasMMaterialId()) {
        hash = (37 * hash) + M_MATERIALID_FIELD_NUMBER;
        hash = (53 * hash) + getMMaterialId();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      if (hasMAttribute()) {
        hash = (37 * hash) + M_ATTRIBUTE_FIELD_NUMBER;
        hash = (53 * hash) + getMAttribute();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.SkinSet parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.SkinSet parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkinSet parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.SkinSet parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkinSet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SkinSet parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkinSet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SkinSet parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkinSet parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SkinSet parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.SkinSet prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 皮肤设置
     * </pre>
     *
     * Protobuf type {@code DataFactory.SkinSet}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.SkinSet)
        com.nibiru.creator.data.HotPotData.SkinSetOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkinSet_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkinSet_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.SkinSet.class, com.nibiru.creator.data.HotPotData.SkinSet.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.SkinSet.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMColorFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        mSceneId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mWidth_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        mHeight_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        mOpacity_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (mColorBuilder_ == null) {
          mColor_ = null;
        } else {
          mColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        mUserDefineFilePath_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        mMaterialId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        mAttribute_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkinSet_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.SkinSet getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.SkinSet.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.SkinSet build() {
        com.nibiru.creator.data.HotPotData.SkinSet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.SkinSet buildPartial() {
        com.nibiru.creator.data.HotPotData.SkinSet result = new com.nibiru.creator.data.HotPotData.SkinSet(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mId_ = mId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mSceneId_ = mSceneId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mWidth_ = mWidth_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mHeight_ = mHeight_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mOpacity_ = mOpacity_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (mColorBuilder_ == null) {
          result.mColor_ = mColor_;
        } else {
          result.mColor_ = mColorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mUserDefineFilePath_ = mUserDefineFilePath_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mMaterialId_ = mMaterialId_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.mFileUrl_ = mFileUrl_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.mAttribute_ = mAttribute_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.SkinSet) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.SkinSet)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.SkinSet other) {
        if (other == com.nibiru.creator.data.HotPotData.SkinSet.getDefaultInstance()) return this;
        if (other.hasMId()) {
          setMId(other.getMId());
        }
        if (other.hasMSceneId()) {
          setMSceneId(other.getMSceneId());
        }
        if (other.hasMWidth()) {
          setMWidth(other.getMWidth());
        }
        if (other.hasMHeight()) {
          setMHeight(other.getMHeight());
        }
        if (other.hasMOpacity()) {
          setMOpacity(other.getMOpacity());
        }
        if (other.hasMColor()) {
          mergeMColor(other.getMColor());
        }
        if (other.hasMUserDefineFilePath()) {
          bitField0_ |= 0x00000040;
          mUserDefineFilePath_ = other.mUserDefineFilePath_;
          onChanged();
        }
        if (other.hasMMaterialId()) {
          setMMaterialId(other.getMMaterialId());
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00000100;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        if (other.hasMAttribute()) {
          setMAttribute(other.getMAttribute());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMId()) {
          return false;
        }
        if (!hasMSceneId()) {
          return false;
        }
        if (!hasMWidth()) {
          return false;
        }
        if (!hasMHeight()) {
          return false;
        }
        if (!hasMOpacity()) {
          return false;
        }
        if (hasMColor()) {
          if (!getMColor().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.SkinSet parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.SkinSet) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int mId_ ;
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>required int32 m_Id = 1;</code>
       */
      public boolean hasMId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>required int32 m_Id = 1;</code>
       */
      public int getMId() {
        return mId_;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>required int32 m_Id = 1;</code>
       */
      public Builder setMId(int value) {
        bitField0_ |= 0x00000001;
        mId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>required int32 m_Id = 1;</code>
       */
      public Builder clearMId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mId_ = 0;
        onChanged();
        return this;
      }

      private int mSceneId_ ;
      /**
       * <pre>
       *所属场景的ID
       * </pre>
       *
       * <code>required int32 m_sceneId = 2;</code>
       */
      public boolean hasMSceneId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *所属场景的ID
       * </pre>
       *
       * <code>required int32 m_sceneId = 2;</code>
       */
      public int getMSceneId() {
        return mSceneId_;
      }
      /**
       * <pre>
       *所属场景的ID
       * </pre>
       *
       * <code>required int32 m_sceneId = 2;</code>
       */
      public Builder setMSceneId(int value) {
        bitField0_ |= 0x00000002;
        mSceneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *所属场景的ID
       * </pre>
       *
       * <code>required int32 m_sceneId = 2;</code>
       */
      public Builder clearMSceneId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mSceneId_ = 0;
        onChanged();
        return this;
      }

      private int mWidth_ ;
      /**
       * <pre>
       *宽
       * </pre>
       *
       * <code>required int32 m_width = 3;</code>
       */
      public boolean hasMWidth() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *宽
       * </pre>
       *
       * <code>required int32 m_width = 3;</code>
       */
      public int getMWidth() {
        return mWidth_;
      }
      /**
       * <pre>
       *宽
       * </pre>
       *
       * <code>required int32 m_width = 3;</code>
       */
      public Builder setMWidth(int value) {
        bitField0_ |= 0x00000004;
        mWidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *宽
       * </pre>
       *
       * <code>required int32 m_width = 3;</code>
       */
      public Builder clearMWidth() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mWidth_ = 0;
        onChanged();
        return this;
      }

      private int mHeight_ ;
      /**
       * <pre>
       *高
       * </pre>
       *
       * <code>required int32 m_height = 4;</code>
       */
      public boolean hasMHeight() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *高
       * </pre>
       *
       * <code>required int32 m_height = 4;</code>
       */
      public int getMHeight() {
        return mHeight_;
      }
      /**
       * <pre>
       *高
       * </pre>
       *
       * <code>required int32 m_height = 4;</code>
       */
      public Builder setMHeight(int value) {
        bitField0_ |= 0x00000008;
        mHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *高
       * </pre>
       *
       * <code>required int32 m_height = 4;</code>
       */
      public Builder clearMHeight() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mHeight_ = 0;
        onChanged();
        return this;
      }

      private float mOpacity_ ;
      /**
       * <pre>
       *透明度
       * </pre>
       *
       * <code>required float m_opacity = 5;</code>
       */
      public boolean hasMOpacity() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *透明度
       * </pre>
       *
       * <code>required float m_opacity = 5;</code>
       */
      public float getMOpacity() {
        return mOpacity_;
      }
      /**
       * <pre>
       *透明度
       * </pre>
       *
       * <code>required float m_opacity = 5;</code>
       */
      public Builder setMOpacity(float value) {
        bitField0_ |= 0x00000010;
        mOpacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *透明度
       * </pre>
       *
       * <code>required float m_opacity = 5;</code>
       */
      public Builder clearMOpacity() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mOpacity_ = 0F;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec4 mColor_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> mColorBuilder_;
      /**
       * <pre>
       *背景色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
       */
      public boolean hasMColor() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *背景色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4 getMColor() {
        if (mColorBuilder_ == null) {
          return mColor_ == null ? com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mColor_;
        } else {
          return mColorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *背景色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
       */
      public Builder setMColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mColor_ = value;
          onChanged();
        } else {
          mColorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       *背景色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
       */
      public Builder setMColor(
          com.nibiru.creator.data.HotPotData.Vec4.Builder builderForValue) {
        if (mColorBuilder_ == null) {
          mColor_ = builderForValue.build();
          onChanged();
        } else {
          mColorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       *背景色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
       */
      public Builder mergeMColor(com.nibiru.creator.data.HotPotData.Vec4 value) {
        if (mColorBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              mColor_ != null &&
              mColor_ != com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance()) {
            mColor_ =
              com.nibiru.creator.data.HotPotData.Vec4.newBuilder(mColor_).mergeFrom(value).buildPartial();
          } else {
            mColor_ = value;
          }
          onChanged();
        } else {
          mColorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       *背景色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
       */
      public Builder clearMColor() {
        if (mColorBuilder_ == null) {
          mColor_ = null;
          onChanged();
        } else {
          mColorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <pre>
       *背景色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4.Builder getMColorBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getMColorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *背景色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec4OrBuilder getMColorOrBuilder() {
        if (mColorBuilder_ != null) {
          return mColorBuilder_.getMessageOrBuilder();
        } else {
          return mColor_ == null ?
              com.nibiru.creator.data.HotPotData.Vec4.getDefaultInstance() : mColor_;
        }
      }
      /**
       * <pre>
       *背景色
       * </pre>
       *
       * <code>optional .DataFactory.Vec4 m_Color = 6;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder> 
          getMColorFieldBuilder() {
        if (mColorBuilder_ == null) {
          mColorBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec4, com.nibiru.creator.data.HotPotData.Vec4.Builder, com.nibiru.creator.data.HotPotData.Vec4OrBuilder>(
                  getMColor(),
                  getParentForChildren(),
                  isClean());
          mColor_ = null;
        }
        return mColorBuilder_;
      }

      private java.lang.Object mUserDefineFilePath_ = "";
      /**
       * <pre>
       *自定义背景
       * </pre>
       *
       * <code>optional string m_userDefineFilePath = 7;</code>
       */
      public boolean hasMUserDefineFilePath() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *自定义背景
       * </pre>
       *
       * <code>optional string m_userDefineFilePath = 7;</code>
       */
      public java.lang.String getMUserDefineFilePath() {
        java.lang.Object ref = mUserDefineFilePath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mUserDefineFilePath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *自定义背景
       * </pre>
       *
       * <code>optional string m_userDefineFilePath = 7;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMUserDefineFilePathBytes() {
        java.lang.Object ref = mUserDefineFilePath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mUserDefineFilePath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *自定义背景
       * </pre>
       *
       * <code>optional string m_userDefineFilePath = 7;</code>
       */
      public Builder setMUserDefineFilePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mUserDefineFilePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *自定义背景
       * </pre>
       *
       * <code>optional string m_userDefineFilePath = 7;</code>
       */
      public Builder clearMUserDefineFilePath() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mUserDefineFilePath_ = getDefaultInstance().getMUserDefineFilePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *自定义背景
       * </pre>
       *
       * <code>optional string m_userDefineFilePath = 7;</code>
       */
      public Builder setMUserDefineFilePathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mUserDefineFilePath_ = value;
        onChanged();
        return this;
      }

      private int mMaterialId_ ;
      /**
       * <code>optional int32 m_materialId = 8;</code>
       */
      public boolean hasMMaterialId() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 m_materialId = 8;</code>
       */
      public int getMMaterialId() {
        return mMaterialId_;
      }
      /**
       * <code>optional int32 m_materialId = 8;</code>
       */
      public Builder setMMaterialId(int value) {
        bitField0_ |= 0x00000080;
        mMaterialId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 m_materialId = 8;</code>
       */
      public Builder clearMMaterialId() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mMaterialId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 9;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 9;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 9;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 9;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 9;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00000100);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 9;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        mFileUrl_ = value;
        onChanged();
        return this;
      }

      private int mAttribute_ ;
      /**
       * <pre>
       *组件属性 1 不可调整大小、不可移动
       * </pre>
       *
       * <code>optional int32 m_attribute = 10;</code>
       */
      public boolean hasMAttribute() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       *组件属性 1 不可调整大小、不可移动
       * </pre>
       *
       * <code>optional int32 m_attribute = 10;</code>
       */
      public int getMAttribute() {
        return mAttribute_;
      }
      /**
       * <pre>
       *组件属性 1 不可调整大小、不可移动
       * </pre>
       *
       * <code>optional int32 m_attribute = 10;</code>
       */
      public Builder setMAttribute(int value) {
        bitField0_ |= 0x00000200;
        mAttribute_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *组件属性 1 不可调整大小、不可移动
       * </pre>
       *
       * <code>optional int32 m_attribute = 10;</code>
       */
      public Builder clearMAttribute() {
        bitField0_ = (bitField0_ & ~0x00000200);
        mAttribute_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.SkinSet)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.SkinSet)
    private static final com.nibiru.creator.data.HotPotData.SkinSet DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.SkinSet();
    }

    public static com.nibiru.creator.data.HotPotData.SkinSet getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<SkinSet>
        PARSER = new com.nibiru.protobuf.AbstractParser<SkinSet>() {
      public SkinSet parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new SkinSet(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<SkinSet> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<SkinSet> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.SkinSet getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SkyBoxSceneAttributeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.SkyBoxSceneAttribute)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *场景ID
     * </pre>
     *
     * <code>required int32 m_ID = 1;</code>
     */
    boolean hasMID();
    /**
     * <pre>
     *场景ID
     * </pre>
     *
     * <code>required int32 m_ID = 1;</code>
     */
    int getMID();

    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>required string m_SceneName = 2;</code>
     */
    boolean hasMSceneName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>required string m_SceneName = 2;</code>
     */
    java.lang.String getMSceneName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>required string m_SceneName = 2;</code>
     */
    com.nibiru.protobuf.ByteString
        getMSceneNameBytes();

    /**
     * <pre>
     *场景对应资源的路径（图片/视频）
     * </pre>
     *
     * <code>required string m_FileName = 3;</code>
     */
    boolean hasMFileName();
    /**
     * <pre>
     *场景对应资源的路径（图片/视频）
     * </pre>
     *
     * <code>required string m_FileName = 3;</code>
     */
    java.lang.String getMFileName();
    /**
     * <pre>
     *场景对应资源的路径（图片/视频）
     * </pre>
     *
     * <code>required string m_FileName = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileNameBytes();

    /**
     * <pre>
     *主视角X轴转动角度
     * </pre>
     *
     * <code>required float m_MajorViewAngle = 4;</code>
     */
    boolean hasMMajorViewAngle();
    /**
     * <pre>
     *主视角X轴转动角度
     * </pre>
     *
     * <code>required float m_MajorViewAngle = 4;</code>
     */
    float getMMajorViewAngle();

    /**
     * <pre>
     *流程图中场景位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
     */
    boolean hasMScenePos();
    /**
     * <pre>
     *流程图中场景位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2 getMScenePos();
    /**
     * <pre>
     *流程图中场景位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMScenePosOrBuilder();

    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
     */
    boolean hasMBackGroundAudio();
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
     */
    com.nibiru.creator.data.HotPotData.BackGroundAudio getMBackGroundAudio();
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
     */
    com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder getMBackGroundAudioOrBuilder();

    /**
     * <pre>
     *场景中所有热点
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.HotPot> 
        getMHotPotsList();
    /**
     * <pre>
     *场景中所有热点
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPot getMHotPots(int index);
    /**
     * <pre>
     *场景中所有热点
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
     */
    int getMHotPotsCount();
    /**
     * <pre>
     *场景中所有热点
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
        getMHotPotsOrBuilderList();
    /**
     * <pre>
     *场景中所有热点
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMHotPotsOrBuilder(
        int index);

    /**
     * <pre>
     *场景中所有事件
     * </pre>
     *
     * <code>repeated .DataFactory.Event m_events = 8;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.Event> 
        getMEventsList();
    /**
     * <pre>
     *场景中所有事件
     * </pre>
     *
     * <code>repeated .DataFactory.Event m_events = 8;</code>
     */
    com.nibiru.creator.data.HotPotData.Event getMEvents(int index);
    /**
     * <pre>
     *场景中所有事件
     * </pre>
     *
     * <code>repeated .DataFactory.Event m_events = 8;</code>
     */
    int getMEventsCount();
    /**
     * <pre>
     *场景中所有事件
     * </pre>
     *
     * <code>repeated .DataFactory.Event m_events = 8;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.EventOrBuilder> 
        getMEventsOrBuilderList();
    /**
     * <pre>
     *场景中所有事件
     * </pre>
     *
     * <code>repeated .DataFactory.Event m_events = 8;</code>
     */
    com.nibiru.creator.data.HotPotData.EventOrBuilder getMEventsOrBuilder(
        int index);

    /**
     * <pre>
     *场景中所有组件
     * </pre>
     *
     * <code>repeated .DataFactory.Component m_Components = 9;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.Component> 
        getMComponentsList();
    /**
     * <pre>
     *场景中所有组件
     * </pre>
     *
     * <code>repeated .DataFactory.Component m_Components = 9;</code>
     */
    com.nibiru.creator.data.HotPotData.Component getMComponents(int index);
    /**
     * <pre>
     *场景中所有组件
     * </pre>
     *
     * <code>repeated .DataFactory.Component m_Components = 9;</code>
     */
    int getMComponentsCount();
    /**
     * <pre>
     *场景中所有组件
     * </pre>
     *
     * <code>repeated .DataFactory.Component m_Components = 9;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.ComponentOrBuilder> 
        getMComponentsOrBuilderList();
    /**
     * <pre>
     *场景中所有组件
     * </pre>
     *
     * <code>repeated .DataFactory.Component m_Components = 9;</code>
     */
    com.nibiru.creator.data.HotPotData.ComponentOrBuilder getMComponentsOrBuilder(
        int index);

    /**
     * <pre>
     * </pre>
     *
     * <code>optional float m_adjust = 10;</code>
     */
    boolean hasMAdjust();
    /**
     * <pre>
     * </pre>
     *
     * <code>optional float m_adjust = 10;</code>
     */
    float getMAdjust();

    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.SkinSet> 
        getMSkinSetList();
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
     */
    com.nibiru.creator.data.HotPotData.SkinSet getMSkinSet(int index);
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
     */
    int getMSkinSetCount();
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.SkinSetOrBuilder> 
        getMSkinSetOrBuilderList();
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
     */
    com.nibiru.creator.data.HotPotData.SkinSetOrBuilder getMSkinSetOrBuilder(
        int index);

    /**
     * <pre>
     * </pre>
     *
     * <code>optional string m_FileNameExt = 12;</code>
     */
    boolean hasMFileNameExt();
    /**
     * <pre>
     * </pre>
     *
     * <code>optional string m_FileNameExt = 12;</code>
     */
    java.lang.String getMFileNameExt();
    /**
     * <pre>
     * </pre>
     *
     * <code>optional string m_FileNameExt = 12;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileNameExtBytes();

    /**
     * <pre>
     *场景类型
     * </pre>
     *
     * <code>optional int32 m_Scenetype = 13;</code>
     */
    boolean hasMScenetype();
    /**
     * <pre>
     *场景类型
     * </pre>
     *
     * <code>optional int32 m_Scenetype = 13;</code>
     */
    int getMScenetype();

    /**
     * <pre>
     *视频场景总时长 图片场景默认为0
     * </pre>
     *
     * <code>optional int64 m_totalTime = 14;</code>
     */
    boolean hasMTotalTime();
    /**
     * <pre>
     *视频场景总时长 图片场景默认为0
     * </pre>
     *
     * <code>optional int64 m_totalTime = 14;</code>
     */
    long getMTotalTime();

    /**
     * <pre>
     *场景截取开始时间，图片场景默认为0
     * </pre>
     *
     * <code>optional int64 cutStartTime = 15;</code>
     */
    boolean hasCutStartTime();
    /**
     * <pre>
     *场景截取开始时间，图片场景默认为0
     * </pre>
     *
     * <code>optional int64 cutStartTime = 15;</code>
     */
    long getCutStartTime();

    /**
     * <pre>
     *场景截取结束时间，图片场景默认为0
     * </pre>
     *
     * <code>optional int64 cutEndTime = 16;</code>
     */
    boolean hasCutEndTime();
    /**
     * <pre>
     *场景截取结束时间，图片场景默认为0
     * </pre>
     *
     * <code>optional int64 cutEndTime = 16;</code>
     */
    long getCutEndTime();

    /**
     * <pre>
     *渲染模式
     * </pre>
     *
     * <code>optional .DataFactory.SceneRenderMode m_renderMode = 17 [default = SceneType_VR];</code>
     */
    boolean hasMRenderMode();
    /**
     * <pre>
     *渲染模式
     * </pre>
     *
     * <code>optional .DataFactory.SceneRenderMode m_renderMode = 17 [default = SceneType_VR];</code>
     */
    com.nibiru.creator.data.HotPotData.SceneRenderMode getMRenderMode();

    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 18;</code>
     */
    boolean hasMIconPath();
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 18;</code>
     */
    java.lang.String getMIconPath();
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 18;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIconPathBytes();

    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 19;</code>
     */
    boolean hasMMaterialId();
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 19;</code>
     */
    int getMMaterialId();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 20;</code>
     */
    boolean hasMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 20;</code>
     */
    java.lang.String getMFileUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 20;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFileUrlBytes();

    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 21;</code>
     */
    boolean hasMIconUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 21;</code>
     */
    java.lang.String getMIconUrl();
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 21;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIconUrlBytes();

    /**
     * <pre>
     *对应的分组id
     * </pre>
     *
     * <code>optional int32 m_groupId = 22;</code>
     */
    boolean hasMGroupId();
    /**
     * <pre>
     *对应的分组id
     * </pre>
     *
     * <code>optional int32 m_groupId = 22;</code>
     */
    int getMGroupId();

    /**
     * <pre>
     *是否自动重播， 0不重播，1重播
     * </pre>
     *
     * <code>optional int32 m_ReplayVedio = 23;</code>
     */
    boolean hasMReplayVedio();
    /**
     * <pre>
     *是否自动重播， 0不重播，1重播
     * </pre>
     *
     * <code>optional int32 m_ReplayVedio = 23;</code>
     */
    int getMReplayVedio();

    /**
     * <pre>
     *店铺设置选中器标志  详情查看m_selectorFlag
     * </pre>
     *
     * <code>optional int32 m_selectorFlag = 24;</code>
     */
    boolean hasMSelectorFlag();
    /**
     * <pre>
     *店铺设置选中器标志  详情查看m_selectorFlag
     * </pre>
     *
     * <code>optional int32 m_selectorFlag = 24;</code>
     */
    int getMSelectorFlag();

    /**
     * <pre>
     *主视角Y轴转动角度
     * </pre>
     *
     * <code>optional float m_MajorViewAngleY = 25 [default = 0];</code>
     */
    boolean hasMMajorViewAngleY();
    /**
     * <pre>
     *主视角Y轴转动角度
     * </pre>
     *
     * <code>optional float m_MajorViewAngleY = 25 [default = 0];</code>
     */
    float getMMajorViewAngleY();

    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_SkyImagePath = 26;</code>
     */
    boolean hasMSkyImagePath();
    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_SkyImagePath = 26;</code>
     */
    java.lang.String getMSkyImagePath();
    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_SkyImagePath = 26;</code>
     */
    com.nibiru.protobuf.ByteString
        getMSkyImagePathBytes();

    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_GroundImagePath = 27;</code>
     */
    boolean hasMGroundImagePath();
    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_GroundImagePath = 27;</code>
     */
    java.lang.String getMGroundImagePath();
    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_GroundImagePath = 27;</code>
     */
    com.nibiru.protobuf.ByteString
        getMGroundImagePathBytes();

    /**
     * <pre>
     *场景天空遮罩图片路径
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
     */
    boolean hasMSkyImagehot();
    /**
     * <pre>
     *场景天空遮罩图片路径
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPot getMSkyImagehot();
    /**
     * <pre>
     *场景天空遮罩图片路径
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMSkyImagehotOrBuilder();

    /**
     * <pre>
     *场景地面遮罩图片路径	
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
     */
    boolean hasMGroundImagehot();
    /**
     * <pre>
     *场景地面遮罩图片路径	
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPot getMGroundImagehot();
    /**
     * <pre>
     *场景地面遮罩图片路径	
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMGroundImagehotOrBuilder();

    /**
     * <pre>
     *fov默认75
     * </pre>
     *
     * <code>optional int32 m_Fov = 30 [default = 75];</code>
     */
    boolean hasMFov();
    /**
     * <pre>
     *fov默认75
     * </pre>
     *
     * <code>optional int32 m_Fov = 30 [default = 75];</code>
     */
    int getMFov();

    /**
     * <pre>
     *陀螺仪设置， 0关闭，1 开启
     * </pre>
     *
     * <code>optional int32 m_gyroScope = 31;</code>
     */
    boolean hasMGyroScope();
    /**
     * <pre>
     *陀螺仪设置， 0关闭，1 开启
     * </pre>
     *
     * <code>optional int32 m_gyroScope = 31;</code>
     */
    int getMGyroScope();

    /**
     * <pre>
     *全局选择器 是否默认展开
     * </pre>
     *
     * <code>optional int32 m_expand = 32;</code>
     */
    boolean hasMExpand();
    /**
     * <pre>
     *全局选择器 是否默认展开
     * </pre>
     *
     * <code>optional int32 m_expand = 32;</code>
     */
    int getMExpand();

    /**
     * <pre>
     *全局选择器对应全局热点id
     * </pre>
     *
     * <code>optional int32 m_hotpotId = 33;</code>
     */
    boolean hasMHotpotId();
    /**
     * <pre>
     *全局选择器对应全局热点id
     * </pre>
     *
     * <code>optional int32 m_hotpotId = 33;</code>
     */
    int getMHotpotId();

    /**
     * <pre>
     *全局选择器 是否沙盘模式
     * </pre>
     *
     * <code>optional int32 m_standTable = 34;</code>
     */
    boolean hasMStandTable();
    /**
     * <pre>
     *全局选择器 是否沙盘模式
     * </pre>
     *
     * <code>optional int32 m_standTable = 34;</code>
     */
    int getMStandTable();

    /**
     * <pre>
     *数据统计
     * </pre>
     *
     * <code>optional int32 m_statistics = 35;</code>
     */
    boolean hasMStatistics();
    /**
     * <pre>
     *数据统计
     * </pre>
     *
     * <code>optional int32 m_statistics = 35;</code>
     */
    int getMStatistics();

    /**
     * <pre>
     *沙盘指向角
     * </pre>
     *
     * <code>optional float m_NorthViewAngle = 36;</code>
     */
    boolean hasMNorthViewAngle();
    /**
     * <pre>
     *沙盘指向角
     * </pre>
     *
     * <code>optional float m_NorthViewAngle = 36;</code>
     */
    float getMNorthViewAngle();
  }
  /**
   * <pre>
   *场景属性（图片场景/视频场景/选择器）
   * </pre>
   *
   * Protobuf type {@code DataFactory.SkyBoxSceneAttribute}
   */
  public  static final class SkyBoxSceneAttribute extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.SkyBoxSceneAttribute)
      SkyBoxSceneAttributeOrBuilder {
    // Use SkyBoxSceneAttribute.newBuilder() to construct.
    private SkyBoxSceneAttribute(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SkyBoxSceneAttribute() {
      mID_ = 0;
      mSceneName_ = "";
      mFileName_ = "";
      mMajorViewAngle_ = 0F;
      mHotPots_ = java.util.Collections.emptyList();
      mEvents_ = java.util.Collections.emptyList();
      mComponents_ = java.util.Collections.emptyList();
      mAdjust_ = 0F;
      mSkinSet_ = java.util.Collections.emptyList();
      mFileNameExt_ = "";
      mScenetype_ = 0;
      mTotalTime_ = 0L;
      cutStartTime_ = 0L;
      cutEndTime_ = 0L;
      mRenderMode_ = 2;
      mIconPath_ = "";
      mMaterialId_ = 0;
      mFileUrl_ = "";
      mIconUrl_ = "";
      mGroupId_ = 0;
      mReplayVedio_ = 0;
      mSelectorFlag_ = 0;
      mMajorViewAngleY_ = 0F;
      mSkyImagePath_ = "";
      mGroundImagePath_ = "";
      mFov_ = 75;
      mGyroScope_ = 0;
      mExpand_ = 0;
      mHotpotId_ = 0;
      mStandTable_ = 0;
      mStatistics_ = 0;
      mNorthViewAngle_ = 0F;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SkyBoxSceneAttribute(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mID_ = input.readInt32();
              break;
            }
            case 18: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              mSceneName_ = bs;
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mFileName_ = bs;
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              mMajorViewAngle_ = input.readFloat();
              break;
            }
            case 42: {
              com.nibiru.creator.data.HotPotData.Vec2.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = mScenePos_.toBuilder();
              }
              mScenePos_ = input.readMessage(com.nibiru.creator.data.HotPotData.Vec2.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mScenePos_);
                mScenePos_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = mBackGroundAudio_.toBuilder();
              }
              mBackGroundAudio_ = input.readMessage(com.nibiru.creator.data.HotPotData.BackGroundAudio.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mBackGroundAudio_);
                mBackGroundAudio_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                mHotPots_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.HotPot>();
                mutable_bitField0_ |= 0x00000040;
              }
              mHotPots_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.HotPot.PARSER, extensionRegistry));
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                mEvents_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.Event>();
                mutable_bitField0_ |= 0x00000080;
              }
              mEvents_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.Event.PARSER, extensionRegistry));
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                mComponents_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.Component>();
                mutable_bitField0_ |= 0x00000100;
              }
              mComponents_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.Component.PARSER, extensionRegistry));
              break;
            }
            case 85: {
              bitField0_ |= 0x00000040;
              mAdjust_ = input.readFloat();
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                mSkinSet_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.SkinSet>();
                mutable_bitField0_ |= 0x00000400;
              }
              mSkinSet_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.SkinSet.PARSER, extensionRegistry));
              break;
            }
            case 98: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              mFileNameExt_ = bs;
              break;
            }
            case 104: {
              bitField0_ |= 0x00000100;
              mScenetype_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000200;
              mTotalTime_ = input.readInt64();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000400;
              cutStartTime_ = input.readInt64();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000800;
              cutEndTime_ = input.readInt64();
              break;
            }
            case 136: {
              int rawValue = input.readEnum();
              com.nibiru.creator.data.HotPotData.SceneRenderMode value = com.nibiru.creator.data.HotPotData.SceneRenderMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(17, rawValue);
              } else {
                bitField0_ |= 0x00001000;
                mRenderMode_ = rawValue;
              }
              break;
            }
            case 146: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00002000;
              mIconPath_ = bs;
              break;
            }
            case 152: {
              bitField0_ |= 0x00004000;
              mMaterialId_ = input.readInt32();
              break;
            }
            case 162: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00008000;
              mFileUrl_ = bs;
              break;
            }
            case 170: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00010000;
              mIconUrl_ = bs;
              break;
            }
            case 176: {
              bitField0_ |= 0x00020000;
              mGroupId_ = input.readInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00040000;
              mReplayVedio_ = input.readInt32();
              break;
            }
            case 192: {
              bitField0_ |= 0x00080000;
              mSelectorFlag_ = input.readInt32();
              break;
            }
            case 205: {
              bitField0_ |= 0x00100000;
              mMajorViewAngleY_ = input.readFloat();
              break;
            }
            case 210: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00200000;
              mSkyImagePath_ = bs;
              break;
            }
            case 218: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00400000;
              mGroundImagePath_ = bs;
              break;
            }
            case 226: {
              com.nibiru.creator.data.HotPotData.HotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x00800000) == 0x00800000)) {
                subBuilder = mSkyImagehot_.toBuilder();
              }
              mSkyImagehot_ = input.readMessage(com.nibiru.creator.data.HotPotData.HotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mSkyImagehot_);
                mSkyImagehot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00800000;
              break;
            }
            case 234: {
              com.nibiru.creator.data.HotPotData.HotPot.Builder subBuilder = null;
              if (((bitField0_ & 0x01000000) == 0x01000000)) {
                subBuilder = mGroundImagehot_.toBuilder();
              }
              mGroundImagehot_ = input.readMessage(com.nibiru.creator.data.HotPotData.HotPot.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mGroundImagehot_);
                mGroundImagehot_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x01000000;
              break;
            }
            case 240: {
              bitField0_ |= 0x02000000;
              mFov_ = input.readInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x04000000;
              mGyroScope_ = input.readInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x08000000;
              mExpand_ = input.readInt32();
              break;
            }
            case 264: {
              bitField0_ |= 0x10000000;
              mHotpotId_ = input.readInt32();
              break;
            }
            case 272: {
              bitField0_ |= 0x20000000;
              mStandTable_ = input.readInt32();
              break;
            }
            case 280: {
              bitField0_ |= 0x40000000;
              mStatistics_ = input.readInt32();
              break;
            }
            case 293: {
              bitField0_ |= 0x80000000;
              mNorthViewAngle_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          mHotPots_ = java.util.Collections.unmodifiableList(mHotPots_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          mEvents_ = java.util.Collections.unmodifiableList(mEvents_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          mComponents_ = java.util.Collections.unmodifiableList(mComponents_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          mSkinSet_ = java.util.Collections.unmodifiableList(mSkinSet_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkyBoxSceneAttribute_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkyBoxSceneAttribute_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.class, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder.class);
    }

    private int bitField0_;
    public static final int M_ID_FIELD_NUMBER = 1;
    private int mID_;
    /**
     * <pre>
     *场景ID
     * </pre>
     *
     * <code>required int32 m_ID = 1;</code>
     */
    public boolean hasMID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *场景ID
     * </pre>
     *
     * <code>required int32 m_ID = 1;</code>
     */
    public int getMID() {
      return mID_;
    }

    public static final int M_SCENENAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object mSceneName_;
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>required string m_SceneName = 2;</code>
     */
    public boolean hasMSceneName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>required string m_SceneName = 2;</code>
     */
    public java.lang.String getMSceneName() {
      java.lang.Object ref = mSceneName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mSceneName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>required string m_SceneName = 2;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMSceneNameBytes() {
      java.lang.Object ref = mSceneName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mSceneName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_FILENAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object mFileName_;
    /**
     * <pre>
     *场景对应资源的路径（图片/视频）
     * </pre>
     *
     * <code>required string m_FileName = 3;</code>
     */
    public boolean hasMFileName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *场景对应资源的路径（图片/视频）
     * </pre>
     *
     * <code>required string m_FileName = 3;</code>
     */
    public java.lang.String getMFileName() {
      java.lang.Object ref = mFileName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *场景对应资源的路径（图片/视频）
     * </pre>
     *
     * <code>required string m_FileName = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileNameBytes() {
      java.lang.Object ref = mFileName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_MAJORVIEWANGLE_FIELD_NUMBER = 4;
    private float mMajorViewAngle_;
    /**
     * <pre>
     *主视角X轴转动角度
     * </pre>
     *
     * <code>required float m_MajorViewAngle = 4;</code>
     */
    public boolean hasMMajorViewAngle() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *主视角X轴转动角度
     * </pre>
     *
     * <code>required float m_MajorViewAngle = 4;</code>
     */
    public float getMMajorViewAngle() {
      return mMajorViewAngle_;
    }

    public static final int M_SCENEPOS_FIELD_NUMBER = 5;
    private com.nibiru.creator.data.HotPotData.Vec2 mScenePos_;
    /**
     * <pre>
     *流程图中场景位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
     */
    public boolean hasMScenePos() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *流程图中场景位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2 getMScenePos() {
      return mScenePos_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mScenePos_;
    }
    /**
     * <pre>
     *流程图中场景位置
     * </pre>
     *
     * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMScenePosOrBuilder() {
      return mScenePos_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mScenePos_;
    }

    public static final int M_BACKGROUNDAUDIO_FIELD_NUMBER = 6;
    private com.nibiru.creator.data.HotPotData.BackGroundAudio mBackGroundAudio_;
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
     */
    public boolean hasMBackGroundAudio() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
     */
    public com.nibiru.creator.data.HotPotData.BackGroundAudio getMBackGroundAudio() {
      return mBackGroundAudio_ == null ? com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance() : mBackGroundAudio_;
    }
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
     */
    public com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder getMBackGroundAudioOrBuilder() {
      return mBackGroundAudio_ == null ? com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance() : mBackGroundAudio_;
    }

    public static final int M_HOTPOTS_FIELD_NUMBER = 7;
    private java.util.List<com.nibiru.creator.data.HotPotData.HotPot> mHotPots_;
    /**
     * <pre>
     *场景中所有热点
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.HotPot> getMHotPotsList() {
      return mHotPots_;
    }
    /**
     * <pre>
     *场景中所有热点
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
        getMHotPotsOrBuilderList() {
      return mHotPots_;
    }
    /**
     * <pre>
     *场景中所有热点
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
     */
    public int getMHotPotsCount() {
      return mHotPots_.size();
    }
    /**
     * <pre>
     *场景中所有热点
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPot getMHotPots(int index) {
      return mHotPots_.get(index);
    }
    /**
     * <pre>
     *场景中所有热点
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMHotPotsOrBuilder(
        int index) {
      return mHotPots_.get(index);
    }

    public static final int M_EVENTS_FIELD_NUMBER = 8;
    private java.util.List<com.nibiru.creator.data.HotPotData.Event> mEvents_;
    /**
     * <pre>
     *场景中所有事件
     * </pre>
     *
     * <code>repeated .DataFactory.Event m_events = 8;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.Event> getMEventsList() {
      return mEvents_;
    }
    /**
     * <pre>
     *场景中所有事件
     * </pre>
     *
     * <code>repeated .DataFactory.Event m_events = 8;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.EventOrBuilder> 
        getMEventsOrBuilderList() {
      return mEvents_;
    }
    /**
     * <pre>
     *场景中所有事件
     * </pre>
     *
     * <code>repeated .DataFactory.Event m_events = 8;</code>
     */
    public int getMEventsCount() {
      return mEvents_.size();
    }
    /**
     * <pre>
     *场景中所有事件
     * </pre>
     *
     * <code>repeated .DataFactory.Event m_events = 8;</code>
     */
    public com.nibiru.creator.data.HotPotData.Event getMEvents(int index) {
      return mEvents_.get(index);
    }
    /**
     * <pre>
     *场景中所有事件
     * </pre>
     *
     * <code>repeated .DataFactory.Event m_events = 8;</code>
     */
    public com.nibiru.creator.data.HotPotData.EventOrBuilder getMEventsOrBuilder(
        int index) {
      return mEvents_.get(index);
    }

    public static final int M_COMPONENTS_FIELD_NUMBER = 9;
    private java.util.List<com.nibiru.creator.data.HotPotData.Component> mComponents_;
    /**
     * <pre>
     *场景中所有组件
     * </pre>
     *
     * <code>repeated .DataFactory.Component m_Components = 9;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.Component> getMComponentsList() {
      return mComponents_;
    }
    /**
     * <pre>
     *场景中所有组件
     * </pre>
     *
     * <code>repeated .DataFactory.Component m_Components = 9;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.ComponentOrBuilder> 
        getMComponentsOrBuilderList() {
      return mComponents_;
    }
    /**
     * <pre>
     *场景中所有组件
     * </pre>
     *
     * <code>repeated .DataFactory.Component m_Components = 9;</code>
     */
    public int getMComponentsCount() {
      return mComponents_.size();
    }
    /**
     * <pre>
     *场景中所有组件
     * </pre>
     *
     * <code>repeated .DataFactory.Component m_Components = 9;</code>
     */
    public com.nibiru.creator.data.HotPotData.Component getMComponents(int index) {
      return mComponents_.get(index);
    }
    /**
     * <pre>
     *场景中所有组件
     * </pre>
     *
     * <code>repeated .DataFactory.Component m_Components = 9;</code>
     */
    public com.nibiru.creator.data.HotPotData.ComponentOrBuilder getMComponentsOrBuilder(
        int index) {
      return mComponents_.get(index);
    }

    public static final int M_ADJUST_FIELD_NUMBER = 10;
    private float mAdjust_;
    /**
     * <pre>
     * </pre>
     *
     * <code>optional float m_adjust = 10;</code>
     */
    public boolean hasMAdjust() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>optional float m_adjust = 10;</code>
     */
    public float getMAdjust() {
      return mAdjust_;
    }

    public static final int M_SKINSET_FIELD_NUMBER = 11;
    private java.util.List<com.nibiru.creator.data.HotPotData.SkinSet> mSkinSet_;
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.SkinSet> getMSkinSetList() {
      return mSkinSet_;
    }
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.SkinSetOrBuilder> 
        getMSkinSetOrBuilderList() {
      return mSkinSet_;
    }
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
     */
    public int getMSkinSetCount() {
      return mSkinSet_.size();
    }
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
     */
    public com.nibiru.creator.data.HotPotData.SkinSet getMSkinSet(int index) {
      return mSkinSet_.get(index);
    }
    /**
     * <pre>
     *选择器皮肤
     * </pre>
     *
     * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
     */
    public com.nibiru.creator.data.HotPotData.SkinSetOrBuilder getMSkinSetOrBuilder(
        int index) {
      return mSkinSet_.get(index);
    }

    public static final int M_FILENAMEEXT_FIELD_NUMBER = 12;
    private volatile java.lang.Object mFileNameExt_;
    /**
     * <pre>
     * </pre>
     *
     * <code>optional string m_FileNameExt = 12;</code>
     */
    public boolean hasMFileNameExt() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>optional string m_FileNameExt = 12;</code>
     */
    public java.lang.String getMFileNameExt() {
      java.lang.Object ref = mFileNameExt_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileNameExt_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>optional string m_FileNameExt = 12;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileNameExtBytes() {
      java.lang.Object ref = mFileNameExt_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileNameExt_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_SCENETYPE_FIELD_NUMBER = 13;
    private int mScenetype_;
    /**
     * <pre>
     *场景类型
     * </pre>
     *
     * <code>optional int32 m_Scenetype = 13;</code>
     */
    public boolean hasMScenetype() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     *场景类型
     * </pre>
     *
     * <code>optional int32 m_Scenetype = 13;</code>
     */
    public int getMScenetype() {
      return mScenetype_;
    }

    public static final int M_TOTALTIME_FIELD_NUMBER = 14;
    private long mTotalTime_;
    /**
     * <pre>
     *视频场景总时长 图片场景默认为0
     * </pre>
     *
     * <code>optional int64 m_totalTime = 14;</code>
     */
    public boolean hasMTotalTime() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     *视频场景总时长 图片场景默认为0
     * </pre>
     *
     * <code>optional int64 m_totalTime = 14;</code>
     */
    public long getMTotalTime() {
      return mTotalTime_;
    }

    public static final int CUTSTARTTIME_FIELD_NUMBER = 15;
    private long cutStartTime_;
    /**
     * <pre>
     *场景截取开始时间，图片场景默认为0
     * </pre>
     *
     * <code>optional int64 cutStartTime = 15;</code>
     */
    public boolean hasCutStartTime() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     *场景截取开始时间，图片场景默认为0
     * </pre>
     *
     * <code>optional int64 cutStartTime = 15;</code>
     */
    public long getCutStartTime() {
      return cutStartTime_;
    }

    public static final int CUTENDTIME_FIELD_NUMBER = 16;
    private long cutEndTime_;
    /**
     * <pre>
     *场景截取结束时间，图片场景默认为0
     * </pre>
     *
     * <code>optional int64 cutEndTime = 16;</code>
     */
    public boolean hasCutEndTime() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     *场景截取结束时间，图片场景默认为0
     * </pre>
     *
     * <code>optional int64 cutEndTime = 16;</code>
     */
    public long getCutEndTime() {
      return cutEndTime_;
    }

    public static final int M_RENDERMODE_FIELD_NUMBER = 17;
    private int mRenderMode_;
    /**
     * <pre>
     *渲染模式
     * </pre>
     *
     * <code>optional .DataFactory.SceneRenderMode m_renderMode = 17 [default = SceneType_VR];</code>
     */
    public boolean hasMRenderMode() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     *渲染模式
     * </pre>
     *
     * <code>optional .DataFactory.SceneRenderMode m_renderMode = 17 [default = SceneType_VR];</code>
     */
    public com.nibiru.creator.data.HotPotData.SceneRenderMode getMRenderMode() {
      com.nibiru.creator.data.HotPotData.SceneRenderMode result = com.nibiru.creator.data.HotPotData.SceneRenderMode.valueOf(mRenderMode_);
      return result == null ? com.nibiru.creator.data.HotPotData.SceneRenderMode.SceneType_VR : result;
    }

    public static final int M_ICONPATH_FIELD_NUMBER = 18;
    private volatile java.lang.Object mIconPath_;
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 18;</code>
     */
    public boolean hasMIconPath() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 18;</code>
     */
    public java.lang.String getMIconPath() {
      java.lang.Object ref = mIconPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mIconPath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *场景对应资源的路径缩略图（图片/视频）
     * </pre>
     *
     * <code>optional string m_iconPath = 18;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIconPathBytes() {
      java.lang.Object ref = mIconPath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mIconPath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_MATERIALID_FIELD_NUMBER = 19;
    private int mMaterialId_;
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 19;</code>
     */
    public boolean hasMMaterialId() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <pre>
     *素材ID
     * </pre>
     *
     * <code>optional int32 m_materialId = 19;</code>
     */
    public int getMMaterialId() {
      return mMaterialId_;
    }

    public static final int M_FILEURL_FIELD_NUMBER = 20;
    private volatile java.lang.Object mFileUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 20;</code>
     */
    public boolean hasMFileUrl() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 20;</code>
     */
    public java.lang.String getMFileUrl() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFileUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_fileUrl = 20;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFileUrlBytes() {
      java.lang.Object ref = mFileUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFileUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ICONURL_FIELD_NUMBER = 21;
    private volatile java.lang.Object mIconUrl_;
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 21;</code>
     */
    public boolean hasMIconUrl() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 21;</code>
     */
    public java.lang.String getMIconUrl() {
      java.lang.Object ref = mIconUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mIconUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *Android用
     * </pre>
     *
     * <code>optional string m_iconUrl = 21;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIconUrlBytes() {
      java.lang.Object ref = mIconUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mIconUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_GROUPID_FIELD_NUMBER = 22;
    private int mGroupId_;
    /**
     * <pre>
     *对应的分组id
     * </pre>
     *
     * <code>optional int32 m_groupId = 22;</code>
     */
    public boolean hasMGroupId() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <pre>
     *对应的分组id
     * </pre>
     *
     * <code>optional int32 m_groupId = 22;</code>
     */
    public int getMGroupId() {
      return mGroupId_;
    }

    public static final int M_REPLAYVEDIO_FIELD_NUMBER = 23;
    private int mReplayVedio_;
    /**
     * <pre>
     *是否自动重播， 0不重播，1重播
     * </pre>
     *
     * <code>optional int32 m_ReplayVedio = 23;</code>
     */
    public boolean hasMReplayVedio() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <pre>
     *是否自动重播， 0不重播，1重播
     * </pre>
     *
     * <code>optional int32 m_ReplayVedio = 23;</code>
     */
    public int getMReplayVedio() {
      return mReplayVedio_;
    }

    public static final int M_SELECTORFLAG_FIELD_NUMBER = 24;
    private int mSelectorFlag_;
    /**
     * <pre>
     *店铺设置选中器标志  详情查看m_selectorFlag
     * </pre>
     *
     * <code>optional int32 m_selectorFlag = 24;</code>
     */
    public boolean hasMSelectorFlag() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <pre>
     *店铺设置选中器标志  详情查看m_selectorFlag
     * </pre>
     *
     * <code>optional int32 m_selectorFlag = 24;</code>
     */
    public int getMSelectorFlag() {
      return mSelectorFlag_;
    }

    public static final int M_MAJORVIEWANGLEY_FIELD_NUMBER = 25;
    private float mMajorViewAngleY_;
    /**
     * <pre>
     *主视角Y轴转动角度
     * </pre>
     *
     * <code>optional float m_MajorViewAngleY = 25 [default = 0];</code>
     */
    public boolean hasMMajorViewAngleY() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <pre>
     *主视角Y轴转动角度
     * </pre>
     *
     * <code>optional float m_MajorViewAngleY = 25 [default = 0];</code>
     */
    public float getMMajorViewAngleY() {
      return mMajorViewAngleY_;
    }

    public static final int M_SKYIMAGEPATH_FIELD_NUMBER = 26;
    private volatile java.lang.Object mSkyImagePath_;
    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_SkyImagePath = 26;</code>
     */
    public boolean hasMSkyImagePath() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_SkyImagePath = 26;</code>
     */
    public java.lang.String getMSkyImagePath() {
      java.lang.Object ref = mSkyImagePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mSkyImagePath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_SkyImagePath = 26;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMSkyImagePathBytes() {
      java.lang.Object ref = mSkyImagePath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mSkyImagePath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_GROUNDIMAGEPATH_FIELD_NUMBER = 27;
    private volatile java.lang.Object mGroundImagePath_;
    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_GroundImagePath = 27;</code>
     */
    public boolean hasMGroundImagePath() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_GroundImagePath = 27;</code>
     */
    public java.lang.String getMGroundImagePath() {
      java.lang.Object ref = mGroundImagePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mGroundImagePath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *弃用
     * </pre>
     *
     * <code>optional string m_GroundImagePath = 27;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMGroundImagePathBytes() {
      java.lang.Object ref = mGroundImagePath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mGroundImagePath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_SKYIMAGEHOT_FIELD_NUMBER = 28;
    private com.nibiru.creator.data.HotPotData.HotPot mSkyImagehot_;
    /**
     * <pre>
     *场景天空遮罩图片路径
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
     */
    public boolean hasMSkyImagehot() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <pre>
     *场景天空遮罩图片路径
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPot getMSkyImagehot() {
      return mSkyImagehot_ == null ? com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mSkyImagehot_;
    }
    /**
     * <pre>
     *场景天空遮罩图片路径
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMSkyImagehotOrBuilder() {
      return mSkyImagehot_ == null ? com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mSkyImagehot_;
    }

    public static final int M_GROUNDIMAGEHOT_FIELD_NUMBER = 29;
    private com.nibiru.creator.data.HotPotData.HotPot mGroundImagehot_;
    /**
     * <pre>
     *场景地面遮罩图片路径	
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
     */
    public boolean hasMGroundImagehot() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <pre>
     *场景地面遮罩图片路径	
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPot getMGroundImagehot() {
      return mGroundImagehot_ == null ? com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mGroundImagehot_;
    }
    /**
     * <pre>
     *场景地面遮罩图片路径	
     * </pre>
     *
     * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMGroundImagehotOrBuilder() {
      return mGroundImagehot_ == null ? com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mGroundImagehot_;
    }

    public static final int M_FOV_FIELD_NUMBER = 30;
    private int mFov_;
    /**
     * <pre>
     *fov默认75
     * </pre>
     *
     * <code>optional int32 m_Fov = 30 [default = 75];</code>
     */
    public boolean hasMFov() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <pre>
     *fov默认75
     * </pre>
     *
     * <code>optional int32 m_Fov = 30 [default = 75];</code>
     */
    public int getMFov() {
      return mFov_;
    }

    public static final int M_GYROSCOPE_FIELD_NUMBER = 31;
    private int mGyroScope_;
    /**
     * <pre>
     *陀螺仪设置， 0关闭，1 开启
     * </pre>
     *
     * <code>optional int32 m_gyroScope = 31;</code>
     */
    public boolean hasMGyroScope() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <pre>
     *陀螺仪设置， 0关闭，1 开启
     * </pre>
     *
     * <code>optional int32 m_gyroScope = 31;</code>
     */
    public int getMGyroScope() {
      return mGyroScope_;
    }

    public static final int M_EXPAND_FIELD_NUMBER = 32;
    private int mExpand_;
    /**
     * <pre>
     *全局选择器 是否默认展开
     * </pre>
     *
     * <code>optional int32 m_expand = 32;</code>
     */
    public boolean hasMExpand() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <pre>
     *全局选择器 是否默认展开
     * </pre>
     *
     * <code>optional int32 m_expand = 32;</code>
     */
    public int getMExpand() {
      return mExpand_;
    }

    public static final int M_HOTPOTID_FIELD_NUMBER = 33;
    private int mHotpotId_;
    /**
     * <pre>
     *全局选择器对应全局热点id
     * </pre>
     *
     * <code>optional int32 m_hotpotId = 33;</code>
     */
    public boolean hasMHotpotId() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <pre>
     *全局选择器对应全局热点id
     * </pre>
     *
     * <code>optional int32 m_hotpotId = 33;</code>
     */
    public int getMHotpotId() {
      return mHotpotId_;
    }

    public static final int M_STANDTABLE_FIELD_NUMBER = 34;
    private int mStandTable_;
    /**
     * <pre>
     *全局选择器 是否沙盘模式
     * </pre>
     *
     * <code>optional int32 m_standTable = 34;</code>
     */
    public boolean hasMStandTable() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <pre>
     *全局选择器 是否沙盘模式
     * </pre>
     *
     * <code>optional int32 m_standTable = 34;</code>
     */
    public int getMStandTable() {
      return mStandTable_;
    }

    public static final int M_STATISTICS_FIELD_NUMBER = 35;
    private int mStatistics_;
    /**
     * <pre>
     *数据统计
     * </pre>
     *
     * <code>optional int32 m_statistics = 35;</code>
     */
    public boolean hasMStatistics() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <pre>
     *数据统计
     * </pre>
     *
     * <code>optional int32 m_statistics = 35;</code>
     */
    public int getMStatistics() {
      return mStatistics_;
    }

    public static final int M_NORTHVIEWANGLE_FIELD_NUMBER = 36;
    private float mNorthViewAngle_;
    /**
     * <pre>
     *沙盘指向角
     * </pre>
     *
     * <code>optional float m_NorthViewAngle = 36;</code>
     */
    public boolean hasMNorthViewAngle() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <pre>
     *沙盘指向角
     * </pre>
     *
     * <code>optional float m_NorthViewAngle = 36;</code>
     */
    public float getMNorthViewAngle() {
      return mNorthViewAngle_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMSceneName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMFileName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMMajorViewAngle()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMScenePos()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMBackGroundAudio()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMScenePos().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMBackGroundAudio().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getMHotPotsCount(); i++) {
        if (!getMHotPots(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMEventsCount(); i++) {
        if (!getMEvents(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMComponentsCount(); i++) {
        if (!getMComponents(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMSkinSetCount(); i++) {
        if (!getMSkinSet(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMSkyImagehot()) {
        if (!getMSkyImagehot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMGroundImagehot()) {
        if (!getMGroundImagehot().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 2, mSceneName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mFileName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, mMajorViewAngle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getMScenePos());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, getMBackGroundAudio());
      }
      for (int i = 0; i < mHotPots_.size(); i++) {
        output.writeMessage(7, mHotPots_.get(i));
      }
      for (int i = 0; i < mEvents_.size(); i++) {
        output.writeMessage(8, mEvents_.get(i));
      }
      for (int i = 0; i < mComponents_.size(); i++) {
        output.writeMessage(9, mComponents_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(10, mAdjust_);
      }
      for (int i = 0; i < mSkinSet_.size(); i++) {
        output.writeMessage(11, mSkinSet_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 12, mFileNameExt_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(13, mScenetype_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt64(14, mTotalTime_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt64(15, cutStartTime_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt64(16, cutEndTime_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeEnum(17, mRenderMode_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 18, mIconPath_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(19, mMaterialId_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 20, mFileUrl_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 21, mIconUrl_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(22, mGroupId_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(23, mReplayVedio_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(24, mSelectorFlag_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(25, mMajorViewAngleY_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 26, mSkyImagePath_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 27, mGroundImagePath_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeMessage(28, getMSkyImagehot());
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeMessage(29, getMGroundImagehot());
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(30, mFov_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(31, mGyroScope_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(32, mExpand_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(33, mHotpotId_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(34, mStandTable_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(35, mStatistics_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeFloat(36, mNorthViewAngle_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(1, mID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(2, mSceneName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mFileName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(4, mMajorViewAngle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(5, getMScenePos());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(6, getMBackGroundAudio());
      }
      for (int i = 0; i < mHotPots_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(7, mHotPots_.get(i));
      }
      for (int i = 0; i < mEvents_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(8, mEvents_.get(i));
      }
      for (int i = 0; i < mComponents_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(9, mComponents_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(10, mAdjust_);
      }
      for (int i = 0; i < mSkinSet_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(11, mSkinSet_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(12, mFileNameExt_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(13, mScenetype_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(14, mTotalTime_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(15, cutStartTime_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(16, cutEndTime_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeEnumSize(17, mRenderMode_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(18, mIconPath_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(19, mMaterialId_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(20, mFileUrl_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(21, mIconUrl_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(22, mGroupId_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(23, mReplayVedio_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(24, mSelectorFlag_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(25, mMajorViewAngleY_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(26, mSkyImagePath_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(27, mGroundImagePath_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(28, getMSkyImagehot());
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(29, getMGroundImagehot());
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(30, mFov_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(31, mGyroScope_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(32, mExpand_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(33, mHotpotId_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(34, mStandTable_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(35, mStatistics_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeFloatSize(36, mNorthViewAngle_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute other = (com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute) obj;

      boolean result = true;
      result = result && (hasMID() == other.hasMID());
      if (hasMID()) {
        result = result && (getMID()
            == other.getMID());
      }
      result = result && (hasMSceneName() == other.hasMSceneName());
      if (hasMSceneName()) {
        result = result && getMSceneName()
            .equals(other.getMSceneName());
      }
      result = result && (hasMFileName() == other.hasMFileName());
      if (hasMFileName()) {
        result = result && getMFileName()
            .equals(other.getMFileName());
      }
      result = result && (hasMMajorViewAngle() == other.hasMMajorViewAngle());
      if (hasMMajorViewAngle()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMMajorViewAngle())
            == java.lang.Float.floatToIntBits(
                other.getMMajorViewAngle()));
      }
      result = result && (hasMScenePos() == other.hasMScenePos());
      if (hasMScenePos()) {
        result = result && getMScenePos()
            .equals(other.getMScenePos());
      }
      result = result && (hasMBackGroundAudio() == other.hasMBackGroundAudio());
      if (hasMBackGroundAudio()) {
        result = result && getMBackGroundAudio()
            .equals(other.getMBackGroundAudio());
      }
      result = result && getMHotPotsList()
          .equals(other.getMHotPotsList());
      result = result && getMEventsList()
          .equals(other.getMEventsList());
      result = result && getMComponentsList()
          .equals(other.getMComponentsList());
      result = result && (hasMAdjust() == other.hasMAdjust());
      if (hasMAdjust()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMAdjust())
            == java.lang.Float.floatToIntBits(
                other.getMAdjust()));
      }
      result = result && getMSkinSetList()
          .equals(other.getMSkinSetList());
      result = result && (hasMFileNameExt() == other.hasMFileNameExt());
      if (hasMFileNameExt()) {
        result = result && getMFileNameExt()
            .equals(other.getMFileNameExt());
      }
      result = result && (hasMScenetype() == other.hasMScenetype());
      if (hasMScenetype()) {
        result = result && (getMScenetype()
            == other.getMScenetype());
      }
      result = result && (hasMTotalTime() == other.hasMTotalTime());
      if (hasMTotalTime()) {
        result = result && (getMTotalTime()
            == other.getMTotalTime());
      }
      result = result && (hasCutStartTime() == other.hasCutStartTime());
      if (hasCutStartTime()) {
        result = result && (getCutStartTime()
            == other.getCutStartTime());
      }
      result = result && (hasCutEndTime() == other.hasCutEndTime());
      if (hasCutEndTime()) {
        result = result && (getCutEndTime()
            == other.getCutEndTime());
      }
      result = result && (hasMRenderMode() == other.hasMRenderMode());
      if (hasMRenderMode()) {
        result = result && mRenderMode_ == other.mRenderMode_;
      }
      result = result && (hasMIconPath() == other.hasMIconPath());
      if (hasMIconPath()) {
        result = result && getMIconPath()
            .equals(other.getMIconPath());
      }
      result = result && (hasMMaterialId() == other.hasMMaterialId());
      if (hasMMaterialId()) {
        result = result && (getMMaterialId()
            == other.getMMaterialId());
      }
      result = result && (hasMFileUrl() == other.hasMFileUrl());
      if (hasMFileUrl()) {
        result = result && getMFileUrl()
            .equals(other.getMFileUrl());
      }
      result = result && (hasMIconUrl() == other.hasMIconUrl());
      if (hasMIconUrl()) {
        result = result && getMIconUrl()
            .equals(other.getMIconUrl());
      }
      result = result && (hasMGroupId() == other.hasMGroupId());
      if (hasMGroupId()) {
        result = result && (getMGroupId()
            == other.getMGroupId());
      }
      result = result && (hasMReplayVedio() == other.hasMReplayVedio());
      if (hasMReplayVedio()) {
        result = result && (getMReplayVedio()
            == other.getMReplayVedio());
      }
      result = result && (hasMSelectorFlag() == other.hasMSelectorFlag());
      if (hasMSelectorFlag()) {
        result = result && (getMSelectorFlag()
            == other.getMSelectorFlag());
      }
      result = result && (hasMMajorViewAngleY() == other.hasMMajorViewAngleY());
      if (hasMMajorViewAngleY()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMMajorViewAngleY())
            == java.lang.Float.floatToIntBits(
                other.getMMajorViewAngleY()));
      }
      result = result && (hasMSkyImagePath() == other.hasMSkyImagePath());
      if (hasMSkyImagePath()) {
        result = result && getMSkyImagePath()
            .equals(other.getMSkyImagePath());
      }
      result = result && (hasMGroundImagePath() == other.hasMGroundImagePath());
      if (hasMGroundImagePath()) {
        result = result && getMGroundImagePath()
            .equals(other.getMGroundImagePath());
      }
      result = result && (hasMSkyImagehot() == other.hasMSkyImagehot());
      if (hasMSkyImagehot()) {
        result = result && getMSkyImagehot()
            .equals(other.getMSkyImagehot());
      }
      result = result && (hasMGroundImagehot() == other.hasMGroundImagehot());
      if (hasMGroundImagehot()) {
        result = result && getMGroundImagehot()
            .equals(other.getMGroundImagehot());
      }
      result = result && (hasMFov() == other.hasMFov());
      if (hasMFov()) {
        result = result && (getMFov()
            == other.getMFov());
      }
      result = result && (hasMGyroScope() == other.hasMGyroScope());
      if (hasMGyroScope()) {
        result = result && (getMGyroScope()
            == other.getMGyroScope());
      }
      result = result && (hasMExpand() == other.hasMExpand());
      if (hasMExpand()) {
        result = result && (getMExpand()
            == other.getMExpand());
      }
      result = result && (hasMHotpotId() == other.hasMHotpotId());
      if (hasMHotpotId()) {
        result = result && (getMHotpotId()
            == other.getMHotpotId());
      }
      result = result && (hasMStandTable() == other.hasMStandTable());
      if (hasMStandTable()) {
        result = result && (getMStandTable()
            == other.getMStandTable());
      }
      result = result && (hasMStatistics() == other.hasMStatistics());
      if (hasMStatistics()) {
        result = result && (getMStatistics()
            == other.getMStatistics());
      }
      result = result && (hasMNorthViewAngle() == other.hasMNorthViewAngle());
      if (hasMNorthViewAngle()) {
        result = result && (
            java.lang.Float.floatToIntBits(getMNorthViewAngle())
            == java.lang.Float.floatToIntBits(
                other.getMNorthViewAngle()));
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMID()) {
        hash = (37 * hash) + M_ID_FIELD_NUMBER;
        hash = (53 * hash) + getMID();
      }
      if (hasMSceneName()) {
        hash = (37 * hash) + M_SCENENAME_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneName().hashCode();
      }
      if (hasMFileName()) {
        hash = (37 * hash) + M_FILENAME_FIELD_NUMBER;
        hash = (53 * hash) + getMFileName().hashCode();
      }
      if (hasMMajorViewAngle()) {
        hash = (37 * hash) + M_MAJORVIEWANGLE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMMajorViewAngle());
      }
      if (hasMScenePos()) {
        hash = (37 * hash) + M_SCENEPOS_FIELD_NUMBER;
        hash = (53 * hash) + getMScenePos().hashCode();
      }
      if (hasMBackGroundAudio()) {
        hash = (37 * hash) + M_BACKGROUNDAUDIO_FIELD_NUMBER;
        hash = (53 * hash) + getMBackGroundAudio().hashCode();
      }
      if (getMHotPotsCount() > 0) {
        hash = (37 * hash) + M_HOTPOTS_FIELD_NUMBER;
        hash = (53 * hash) + getMHotPotsList().hashCode();
      }
      if (getMEventsCount() > 0) {
        hash = (37 * hash) + M_EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + getMEventsList().hashCode();
      }
      if (getMComponentsCount() > 0) {
        hash = (37 * hash) + M_COMPONENTS_FIELD_NUMBER;
        hash = (53 * hash) + getMComponentsList().hashCode();
      }
      if (hasMAdjust()) {
        hash = (37 * hash) + M_ADJUST_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMAdjust());
      }
      if (getMSkinSetCount() > 0) {
        hash = (37 * hash) + M_SKINSET_FIELD_NUMBER;
        hash = (53 * hash) + getMSkinSetList().hashCode();
      }
      if (hasMFileNameExt()) {
        hash = (37 * hash) + M_FILENAMEEXT_FIELD_NUMBER;
        hash = (53 * hash) + getMFileNameExt().hashCode();
      }
      if (hasMScenetype()) {
        hash = (37 * hash) + M_SCENETYPE_FIELD_NUMBER;
        hash = (53 * hash) + getMScenetype();
      }
      if (hasMTotalTime()) {
        hash = (37 * hash) + M_TOTALTIME_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getMTotalTime());
      }
      if (hasCutStartTime()) {
        hash = (37 * hash) + CUTSTARTTIME_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getCutStartTime());
      }
      if (hasCutEndTime()) {
        hash = (37 * hash) + CUTENDTIME_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getCutEndTime());
      }
      if (hasMRenderMode()) {
        hash = (37 * hash) + M_RENDERMODE_FIELD_NUMBER;
        hash = (53 * hash) + mRenderMode_;
      }
      if (hasMIconPath()) {
        hash = (37 * hash) + M_ICONPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMIconPath().hashCode();
      }
      if (hasMMaterialId()) {
        hash = (37 * hash) + M_MATERIALID_FIELD_NUMBER;
        hash = (53 * hash) + getMMaterialId();
      }
      if (hasMFileUrl()) {
        hash = (37 * hash) + M_FILEURL_FIELD_NUMBER;
        hash = (53 * hash) + getMFileUrl().hashCode();
      }
      if (hasMIconUrl()) {
        hash = (37 * hash) + M_ICONURL_FIELD_NUMBER;
        hash = (53 * hash) + getMIconUrl().hashCode();
      }
      if (hasMGroupId()) {
        hash = (37 * hash) + M_GROUPID_FIELD_NUMBER;
        hash = (53 * hash) + getMGroupId();
      }
      if (hasMReplayVedio()) {
        hash = (37 * hash) + M_REPLAYVEDIO_FIELD_NUMBER;
        hash = (53 * hash) + getMReplayVedio();
      }
      if (hasMSelectorFlag()) {
        hash = (37 * hash) + M_SELECTORFLAG_FIELD_NUMBER;
        hash = (53 * hash) + getMSelectorFlag();
      }
      if (hasMMajorViewAngleY()) {
        hash = (37 * hash) + M_MAJORVIEWANGLEY_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMMajorViewAngleY());
      }
      if (hasMSkyImagePath()) {
        hash = (37 * hash) + M_SKYIMAGEPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMSkyImagePath().hashCode();
      }
      if (hasMGroundImagePath()) {
        hash = (37 * hash) + M_GROUNDIMAGEPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMGroundImagePath().hashCode();
      }
      if (hasMSkyImagehot()) {
        hash = (37 * hash) + M_SKYIMAGEHOT_FIELD_NUMBER;
        hash = (53 * hash) + getMSkyImagehot().hashCode();
      }
      if (hasMGroundImagehot()) {
        hash = (37 * hash) + M_GROUNDIMAGEHOT_FIELD_NUMBER;
        hash = (53 * hash) + getMGroundImagehot().hashCode();
      }
      if (hasMFov()) {
        hash = (37 * hash) + M_FOV_FIELD_NUMBER;
        hash = (53 * hash) + getMFov();
      }
      if (hasMGyroScope()) {
        hash = (37 * hash) + M_GYROSCOPE_FIELD_NUMBER;
        hash = (53 * hash) + getMGyroScope();
      }
      if (hasMExpand()) {
        hash = (37 * hash) + M_EXPAND_FIELD_NUMBER;
        hash = (53 * hash) + getMExpand();
      }
      if (hasMHotpotId()) {
        hash = (37 * hash) + M_HOTPOTID_FIELD_NUMBER;
        hash = (53 * hash) + getMHotpotId();
      }
      if (hasMStandTable()) {
        hash = (37 * hash) + M_STANDTABLE_FIELD_NUMBER;
        hash = (53 * hash) + getMStandTable();
      }
      if (hasMStatistics()) {
        hash = (37 * hash) + M_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getMStatistics();
      }
      if (hasMNorthViewAngle()) {
        hash = (37 * hash) + M_NORTHVIEWANGLE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMNorthViewAngle());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *场景属性（图片场景/视频场景/选择器）
     * </pre>
     *
     * Protobuf type {@code DataFactory.SkyBoxSceneAttribute}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.SkyBoxSceneAttribute)
        com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkyBoxSceneAttribute_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkyBoxSceneAttribute_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.class, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMScenePosFieldBuilder();
          getMBackGroundAudioFieldBuilder();
          getMHotPotsFieldBuilder();
          getMEventsFieldBuilder();
          getMComponentsFieldBuilder();
          getMSkinSetFieldBuilder();
          getMSkyImagehotFieldBuilder();
          getMGroundImagehotFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        mSceneName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        mFileName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        mMajorViewAngle_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (mScenePosBuilder_ == null) {
          mScenePos_ = null;
        } else {
          mScenePosBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (mBackGroundAudioBuilder_ == null) {
          mBackGroundAudio_ = null;
        } else {
          mBackGroundAudioBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (mHotPotsBuilder_ == null) {
          mHotPots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          mHotPotsBuilder_.clear();
        }
        if (mEventsBuilder_ == null) {
          mEvents_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          mEventsBuilder_.clear();
        }
        if (mComponentsBuilder_ == null) {
          mComponents_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          mComponentsBuilder_.clear();
        }
        mAdjust_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        if (mSkinSetBuilder_ == null) {
          mSkinSet_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          mSkinSetBuilder_.clear();
        }
        mFileNameExt_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        mScenetype_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        mTotalTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00002000);
        cutStartTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00004000);
        cutEndTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00008000);
        mRenderMode_ = 2;
        bitField0_ = (bitField0_ & ~0x00010000);
        mIconPath_ = "";
        bitField0_ = (bitField0_ & ~0x00020000);
        mMaterialId_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        mFileUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00080000);
        mIconUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00100000);
        mGroupId_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        mReplayVedio_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        mSelectorFlag_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        mMajorViewAngleY_ = 0F;
        bitField0_ = (bitField0_ & ~0x01000000);
        mSkyImagePath_ = "";
        bitField0_ = (bitField0_ & ~0x02000000);
        mGroundImagePath_ = "";
        bitField0_ = (bitField0_ & ~0x04000000);
        if (mSkyImagehotBuilder_ == null) {
          mSkyImagehot_ = null;
        } else {
          mSkyImagehotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        if (mGroundImagehotBuilder_ == null) {
          mGroundImagehot_ = null;
        } else {
          mGroundImagehotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        mFov_ = 75;
        bitField0_ = (bitField0_ & ~0x20000000);
        mGyroScope_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        mExpand_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        mHotpotId_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        mStandTable_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        mStatistics_ = 0;
        bitField1_ = (bitField1_ & ~0x00000004);
        mNorthViewAngle_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000008);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkyBoxSceneAttribute_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute build() {
        com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute buildPartial() {
        com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute result = new com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mID_ = mID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mSceneName_ = mSceneName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mFileName_ = mFileName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mMajorViewAngle_ = mMajorViewAngle_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (mScenePosBuilder_ == null) {
          result.mScenePos_ = mScenePos_;
        } else {
          result.mScenePos_ = mScenePosBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (mBackGroundAudioBuilder_ == null) {
          result.mBackGroundAudio_ = mBackGroundAudio_;
        } else {
          result.mBackGroundAudio_ = mBackGroundAudioBuilder_.build();
        }
        if (mHotPotsBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            mHotPots_ = java.util.Collections.unmodifiableList(mHotPots_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.mHotPots_ = mHotPots_;
        } else {
          result.mHotPots_ = mHotPotsBuilder_.build();
        }
        if (mEventsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            mEvents_ = java.util.Collections.unmodifiableList(mEvents_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.mEvents_ = mEvents_;
        } else {
          result.mEvents_ = mEventsBuilder_.build();
        }
        if (mComponentsBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            mComponents_ = java.util.Collections.unmodifiableList(mComponents_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.mComponents_ = mComponents_;
        } else {
          result.mComponents_ = mComponentsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mAdjust_ = mAdjust_;
        if (mSkinSetBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            mSkinSet_ = java.util.Collections.unmodifiableList(mSkinSet_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.mSkinSet_ = mSkinSet_;
        } else {
          result.mSkinSet_ = mSkinSetBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mFileNameExt_ = mFileNameExt_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.mScenetype_ = mScenetype_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.mTotalTime_ = mTotalTime_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.cutStartTime_ = cutStartTime_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.cutEndTime_ = cutEndTime_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.mRenderMode_ = mRenderMode_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.mIconPath_ = mIconPath_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.mMaterialId_ = mMaterialId_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.mFileUrl_ = mFileUrl_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.mIconUrl_ = mIconUrl_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.mGroupId_ = mGroupId_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.mReplayVedio_ = mReplayVedio_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.mSelectorFlag_ = mSelectorFlag_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.mMajorViewAngleY_ = mMajorViewAngleY_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.mSkyImagePath_ = mSkyImagePath_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.mGroundImagePath_ = mGroundImagePath_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x00800000;
        }
        if (mSkyImagehotBuilder_ == null) {
          result.mSkyImagehot_ = mSkyImagehot_;
        } else {
          result.mSkyImagehot_ = mSkyImagehotBuilder_.build();
        }
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x01000000;
        }
        if (mGroundImagehotBuilder_ == null) {
          result.mGroundImagehot_ = mGroundImagehot_;
        } else {
          result.mGroundImagehot_ = mGroundImagehotBuilder_.build();
        }
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.mFov_ = mFov_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.mGyroScope_ = mGyroScope_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.mExpand_ = mExpand_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x10000000;
        }
        result.mHotpotId_ = mHotpotId_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x20000000;
        }
        result.mStandTable_ = mStandTable_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x40000000;
        }
        result.mStatistics_ = mStatistics_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x80000000;
        }
        result.mNorthViewAngle_ = mNorthViewAngle_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute other) {
        if (other == com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.getDefaultInstance()) return this;
        if (other.hasMID()) {
          setMID(other.getMID());
        }
        if (other.hasMSceneName()) {
          bitField0_ |= 0x00000002;
          mSceneName_ = other.mSceneName_;
          onChanged();
        }
        if (other.hasMFileName()) {
          bitField0_ |= 0x00000004;
          mFileName_ = other.mFileName_;
          onChanged();
        }
        if (other.hasMMajorViewAngle()) {
          setMMajorViewAngle(other.getMMajorViewAngle());
        }
        if (other.hasMScenePos()) {
          mergeMScenePos(other.getMScenePos());
        }
        if (other.hasMBackGroundAudio()) {
          mergeMBackGroundAudio(other.getMBackGroundAudio());
        }
        if (mHotPotsBuilder_ == null) {
          if (!other.mHotPots_.isEmpty()) {
            if (mHotPots_.isEmpty()) {
              mHotPots_ = other.mHotPots_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureMHotPotsIsMutable();
              mHotPots_.addAll(other.mHotPots_);
            }
            onChanged();
          }
        } else {
          if (!other.mHotPots_.isEmpty()) {
            if (mHotPotsBuilder_.isEmpty()) {
              mHotPotsBuilder_.dispose();
              mHotPotsBuilder_ = null;
              mHotPots_ = other.mHotPots_;
              bitField0_ = (bitField0_ & ~0x00000040);
              mHotPotsBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMHotPotsFieldBuilder() : null;
            } else {
              mHotPotsBuilder_.addAllMessages(other.mHotPots_);
            }
          }
        }
        if (mEventsBuilder_ == null) {
          if (!other.mEvents_.isEmpty()) {
            if (mEvents_.isEmpty()) {
              mEvents_ = other.mEvents_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureMEventsIsMutable();
              mEvents_.addAll(other.mEvents_);
            }
            onChanged();
          }
        } else {
          if (!other.mEvents_.isEmpty()) {
            if (mEventsBuilder_.isEmpty()) {
              mEventsBuilder_.dispose();
              mEventsBuilder_ = null;
              mEvents_ = other.mEvents_;
              bitField0_ = (bitField0_ & ~0x00000080);
              mEventsBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMEventsFieldBuilder() : null;
            } else {
              mEventsBuilder_.addAllMessages(other.mEvents_);
            }
          }
        }
        if (mComponentsBuilder_ == null) {
          if (!other.mComponents_.isEmpty()) {
            if (mComponents_.isEmpty()) {
              mComponents_ = other.mComponents_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureMComponentsIsMutable();
              mComponents_.addAll(other.mComponents_);
            }
            onChanged();
          }
        } else {
          if (!other.mComponents_.isEmpty()) {
            if (mComponentsBuilder_.isEmpty()) {
              mComponentsBuilder_.dispose();
              mComponentsBuilder_ = null;
              mComponents_ = other.mComponents_;
              bitField0_ = (bitField0_ & ~0x00000100);
              mComponentsBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMComponentsFieldBuilder() : null;
            } else {
              mComponentsBuilder_.addAllMessages(other.mComponents_);
            }
          }
        }
        if (other.hasMAdjust()) {
          setMAdjust(other.getMAdjust());
        }
        if (mSkinSetBuilder_ == null) {
          if (!other.mSkinSet_.isEmpty()) {
            if (mSkinSet_.isEmpty()) {
              mSkinSet_ = other.mSkinSet_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureMSkinSetIsMutable();
              mSkinSet_.addAll(other.mSkinSet_);
            }
            onChanged();
          }
        } else {
          if (!other.mSkinSet_.isEmpty()) {
            if (mSkinSetBuilder_.isEmpty()) {
              mSkinSetBuilder_.dispose();
              mSkinSetBuilder_ = null;
              mSkinSet_ = other.mSkinSet_;
              bitField0_ = (bitField0_ & ~0x00000400);
              mSkinSetBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMSkinSetFieldBuilder() : null;
            } else {
              mSkinSetBuilder_.addAllMessages(other.mSkinSet_);
            }
          }
        }
        if (other.hasMFileNameExt()) {
          bitField0_ |= 0x00000800;
          mFileNameExt_ = other.mFileNameExt_;
          onChanged();
        }
        if (other.hasMScenetype()) {
          setMScenetype(other.getMScenetype());
        }
        if (other.hasMTotalTime()) {
          setMTotalTime(other.getMTotalTime());
        }
        if (other.hasCutStartTime()) {
          setCutStartTime(other.getCutStartTime());
        }
        if (other.hasCutEndTime()) {
          setCutEndTime(other.getCutEndTime());
        }
        if (other.hasMRenderMode()) {
          setMRenderMode(other.getMRenderMode());
        }
        if (other.hasMIconPath()) {
          bitField0_ |= 0x00020000;
          mIconPath_ = other.mIconPath_;
          onChanged();
        }
        if (other.hasMMaterialId()) {
          setMMaterialId(other.getMMaterialId());
        }
        if (other.hasMFileUrl()) {
          bitField0_ |= 0x00080000;
          mFileUrl_ = other.mFileUrl_;
          onChanged();
        }
        if (other.hasMIconUrl()) {
          bitField0_ |= 0x00100000;
          mIconUrl_ = other.mIconUrl_;
          onChanged();
        }
        if (other.hasMGroupId()) {
          setMGroupId(other.getMGroupId());
        }
        if (other.hasMReplayVedio()) {
          setMReplayVedio(other.getMReplayVedio());
        }
        if (other.hasMSelectorFlag()) {
          setMSelectorFlag(other.getMSelectorFlag());
        }
        if (other.hasMMajorViewAngleY()) {
          setMMajorViewAngleY(other.getMMajorViewAngleY());
        }
        if (other.hasMSkyImagePath()) {
          bitField0_ |= 0x02000000;
          mSkyImagePath_ = other.mSkyImagePath_;
          onChanged();
        }
        if (other.hasMGroundImagePath()) {
          bitField0_ |= 0x04000000;
          mGroundImagePath_ = other.mGroundImagePath_;
          onChanged();
        }
        if (other.hasMSkyImagehot()) {
          mergeMSkyImagehot(other.getMSkyImagehot());
        }
        if (other.hasMGroundImagehot()) {
          mergeMGroundImagehot(other.getMGroundImagehot());
        }
        if (other.hasMFov()) {
          setMFov(other.getMFov());
        }
        if (other.hasMGyroScope()) {
          setMGyroScope(other.getMGyroScope());
        }
        if (other.hasMExpand()) {
          setMExpand(other.getMExpand());
        }
        if (other.hasMHotpotId()) {
          setMHotpotId(other.getMHotpotId());
        }
        if (other.hasMStandTable()) {
          setMStandTable(other.getMStandTable());
        }
        if (other.hasMStatistics()) {
          setMStatistics(other.getMStatistics());
        }
        if (other.hasMNorthViewAngle()) {
          setMNorthViewAngle(other.getMNorthViewAngle());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMID()) {
          return false;
        }
        if (!hasMSceneName()) {
          return false;
        }
        if (!hasMFileName()) {
          return false;
        }
        if (!hasMMajorViewAngle()) {
          return false;
        }
        if (!hasMScenePos()) {
          return false;
        }
        if (!hasMBackGroundAudio()) {
          return false;
        }
        if (!getMScenePos().isInitialized()) {
          return false;
        }
        if (!getMBackGroundAudio().isInitialized()) {
          return false;
        }
        for (int i = 0; i < getMHotPotsCount(); i++) {
          if (!getMHotPots(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getMEventsCount(); i++) {
          if (!getMEvents(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getMComponentsCount(); i++) {
          if (!getMComponents(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getMSkinSetCount(); i++) {
          if (!getMSkinSet(i).isInitialized()) {
            return false;
          }
        }
        if (hasMSkyImagehot()) {
          if (!getMSkyImagehot().isInitialized()) {
            return false;
          }
        }
        if (hasMGroundImagehot()) {
          if (!getMGroundImagehot().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private int mID_ ;
      /**
       * <pre>
       *场景ID
       * </pre>
       *
       * <code>required int32 m_ID = 1;</code>
       */
      public boolean hasMID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *场景ID
       * </pre>
       *
       * <code>required int32 m_ID = 1;</code>
       */
      public int getMID() {
        return mID_;
      }
      /**
       * <pre>
       *场景ID
       * </pre>
       *
       * <code>required int32 m_ID = 1;</code>
       */
      public Builder setMID(int value) {
        bitField0_ |= 0x00000001;
        mID_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景ID
       * </pre>
       *
       * <code>required int32 m_ID = 1;</code>
       */
      public Builder clearMID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mID_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mSceneName_ = "";
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>required string m_SceneName = 2;</code>
       */
      public boolean hasMSceneName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>required string m_SceneName = 2;</code>
       */
      public java.lang.String getMSceneName() {
        java.lang.Object ref = mSceneName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mSceneName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>required string m_SceneName = 2;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMSceneNameBytes() {
        java.lang.Object ref = mSceneName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mSceneName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>required string m_SceneName = 2;</code>
       */
      public Builder setMSceneName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mSceneName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>required string m_SceneName = 2;</code>
       */
      public Builder clearMSceneName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mSceneName_ = getDefaultInstance().getMSceneName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>required string m_SceneName = 2;</code>
       */
      public Builder setMSceneNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mSceneName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mFileName_ = "";
      /**
       * <pre>
       *场景对应资源的路径（图片/视频）
       * </pre>
       *
       * <code>required string m_FileName = 3;</code>
       */
      public boolean hasMFileName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *场景对应资源的路径（图片/视频）
       * </pre>
       *
       * <code>required string m_FileName = 3;</code>
       */
      public java.lang.String getMFileName() {
        java.lang.Object ref = mFileName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *场景对应资源的路径（图片/视频）
       * </pre>
       *
       * <code>required string m_FileName = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileNameBytes() {
        java.lang.Object ref = mFileName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *场景对应资源的路径（图片/视频）
       * </pre>
       *
       * <code>required string m_FileName = 3;</code>
       */
      public Builder setMFileName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mFileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景对应资源的路径（图片/视频）
       * </pre>
       *
       * <code>required string m_FileName = 3;</code>
       */
      public Builder clearMFileName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mFileName_ = getDefaultInstance().getMFileName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景对应资源的路径（图片/视频）
       * </pre>
       *
       * <code>required string m_FileName = 3;</code>
       */
      public Builder setMFileNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mFileName_ = value;
        onChanged();
        return this;
      }

      private float mMajorViewAngle_ ;
      /**
       * <pre>
       *主视角X轴转动角度
       * </pre>
       *
       * <code>required float m_MajorViewAngle = 4;</code>
       */
      public boolean hasMMajorViewAngle() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *主视角X轴转动角度
       * </pre>
       *
       * <code>required float m_MajorViewAngle = 4;</code>
       */
      public float getMMajorViewAngle() {
        return mMajorViewAngle_;
      }
      /**
       * <pre>
       *主视角X轴转动角度
       * </pre>
       *
       * <code>required float m_MajorViewAngle = 4;</code>
       */
      public Builder setMMajorViewAngle(float value) {
        bitField0_ |= 0x00000008;
        mMajorViewAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *主视角X轴转动角度
       * </pre>
       *
       * <code>required float m_MajorViewAngle = 4;</code>
       */
      public Builder clearMMajorViewAngle() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mMajorViewAngle_ = 0F;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.Vec2 mScenePos_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> mScenePosBuilder_;
      /**
       * <pre>
       *流程图中场景位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
       */
      public boolean hasMScenePos() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *流程图中场景位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2 getMScenePos() {
        if (mScenePosBuilder_ == null) {
          return mScenePos_ == null ? com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mScenePos_;
        } else {
          return mScenePosBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *流程图中场景位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
       */
      public Builder setMScenePos(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mScenePosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mScenePos_ = value;
          onChanged();
        } else {
          mScenePosBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *流程图中场景位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
       */
      public Builder setMScenePos(
          com.nibiru.creator.data.HotPotData.Vec2.Builder builderForValue) {
        if (mScenePosBuilder_ == null) {
          mScenePos_ = builderForValue.build();
          onChanged();
        } else {
          mScenePosBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *流程图中场景位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
       */
      public Builder mergeMScenePos(com.nibiru.creator.data.HotPotData.Vec2 value) {
        if (mScenePosBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              mScenePos_ != null &&
              mScenePos_ != com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance()) {
            mScenePos_ =
              com.nibiru.creator.data.HotPotData.Vec2.newBuilder(mScenePos_).mergeFrom(value).buildPartial();
          } else {
            mScenePos_ = value;
          }
          onChanged();
        } else {
          mScenePosBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *流程图中场景位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
       */
      public Builder clearMScenePos() {
        if (mScenePosBuilder_ == null) {
          mScenePos_ = null;
          onChanged();
        } else {
          mScenePosBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       *流程图中场景位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2.Builder getMScenePosBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMScenePosFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *流程图中场景位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.Vec2OrBuilder getMScenePosOrBuilder() {
        if (mScenePosBuilder_ != null) {
          return mScenePosBuilder_.getMessageOrBuilder();
        } else {
          return mScenePos_ == null ?
              com.nibiru.creator.data.HotPotData.Vec2.getDefaultInstance() : mScenePos_;
        }
      }
      /**
       * <pre>
       *流程图中场景位置
       * </pre>
       *
       * <code>required .DataFactory.Vec2 m_ScenePos = 5;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder> 
          getMScenePosFieldBuilder() {
        if (mScenePosBuilder_ == null) {
          mScenePosBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Vec2, com.nibiru.creator.data.HotPotData.Vec2.Builder, com.nibiru.creator.data.HotPotData.Vec2OrBuilder>(
                  getMScenePos(),
                  getParentForChildren(),
                  isClean());
          mScenePos_ = null;
        }
        return mScenePosBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.BackGroundAudio mBackGroundAudio_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.BackGroundAudio, com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder, com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder> mBackGroundAudioBuilder_;
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
       */
      public boolean hasMBackGroundAudio() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.BackGroundAudio getMBackGroundAudio() {
        if (mBackGroundAudioBuilder_ == null) {
          return mBackGroundAudio_ == null ? com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance() : mBackGroundAudio_;
        } else {
          return mBackGroundAudioBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
       */
      public Builder setMBackGroundAudio(com.nibiru.creator.data.HotPotData.BackGroundAudio value) {
        if (mBackGroundAudioBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mBackGroundAudio_ = value;
          onChanged();
        } else {
          mBackGroundAudioBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
       */
      public Builder setMBackGroundAudio(
          com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder builderForValue) {
        if (mBackGroundAudioBuilder_ == null) {
          mBackGroundAudio_ = builderForValue.build();
          onChanged();
        } else {
          mBackGroundAudioBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
       */
      public Builder mergeMBackGroundAudio(com.nibiru.creator.data.HotPotData.BackGroundAudio value) {
        if (mBackGroundAudioBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              mBackGroundAudio_ != null &&
              mBackGroundAudio_ != com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance()) {
            mBackGroundAudio_ =
              com.nibiru.creator.data.HotPotData.BackGroundAudio.newBuilder(mBackGroundAudio_).mergeFrom(value).buildPartial();
          } else {
            mBackGroundAudio_ = value;
          }
          onChanged();
        } else {
          mBackGroundAudioBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
       */
      public Builder clearMBackGroundAudio() {
        if (mBackGroundAudioBuilder_ == null) {
          mBackGroundAudio_ = null;
          onChanged();
        } else {
          mBackGroundAudioBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder getMBackGroundAudioBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getMBackGroundAudioFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder getMBackGroundAudioOrBuilder() {
        if (mBackGroundAudioBuilder_ != null) {
          return mBackGroundAudioBuilder_.getMessageOrBuilder();
        } else {
          return mBackGroundAudio_ == null ?
              com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance() : mBackGroundAudio_;
        }
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_BackGroundAudio = 6;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.BackGroundAudio, com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder, com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder> 
          getMBackGroundAudioFieldBuilder() {
        if (mBackGroundAudioBuilder_ == null) {
          mBackGroundAudioBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.BackGroundAudio, com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder, com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder>(
                  getMBackGroundAudio(),
                  getParentForChildren(),
                  isClean());
          mBackGroundAudio_ = null;
        }
        return mBackGroundAudioBuilder_;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.HotPot> mHotPots_ =
        java.util.Collections.emptyList();
      private void ensureMHotPotsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          mHotPots_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.HotPot>(mHotPots_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder> mHotPotsBuilder_;

      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.HotPot> getMHotPotsList() {
        if (mHotPotsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mHotPots_);
        } else {
          return mHotPotsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public int getMHotPotsCount() {
        if (mHotPotsBuilder_ == null) {
          return mHotPots_.size();
        } else {
          return mHotPotsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot getMHotPots(int index) {
        if (mHotPotsBuilder_ == null) {
          return mHotPots_.get(index);
        } else {
          return mHotPotsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public Builder setMHotPots(
          int index, com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mHotPotsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMHotPotsIsMutable();
          mHotPots_.set(index, value);
          onChanged();
        } else {
          mHotPotsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public Builder setMHotPots(
          int index, com.nibiru.creator.data.HotPotData.HotPot.Builder builderForValue) {
        if (mHotPotsBuilder_ == null) {
          ensureMHotPotsIsMutable();
          mHotPots_.set(index, builderForValue.build());
          onChanged();
        } else {
          mHotPotsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public Builder addMHotPots(com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mHotPotsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMHotPotsIsMutable();
          mHotPots_.add(value);
          onChanged();
        } else {
          mHotPotsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public Builder addMHotPots(
          int index, com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mHotPotsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMHotPotsIsMutable();
          mHotPots_.add(index, value);
          onChanged();
        } else {
          mHotPotsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public Builder addMHotPots(
          com.nibiru.creator.data.HotPotData.HotPot.Builder builderForValue) {
        if (mHotPotsBuilder_ == null) {
          ensureMHotPotsIsMutable();
          mHotPots_.add(builderForValue.build());
          onChanged();
        } else {
          mHotPotsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public Builder addMHotPots(
          int index, com.nibiru.creator.data.HotPotData.HotPot.Builder builderForValue) {
        if (mHotPotsBuilder_ == null) {
          ensureMHotPotsIsMutable();
          mHotPots_.add(index, builderForValue.build());
          onChanged();
        } else {
          mHotPotsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public Builder addAllMHotPots(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.HotPot> values) {
        if (mHotPotsBuilder_ == null) {
          ensureMHotPotsIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mHotPots_);
          onChanged();
        } else {
          mHotPotsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public Builder clearMHotPots() {
        if (mHotPotsBuilder_ == null) {
          mHotPots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          mHotPotsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public Builder removeMHotPots(int index) {
        if (mHotPotsBuilder_ == null) {
          ensureMHotPotsIsMutable();
          mHotPots_.remove(index);
          onChanged();
        } else {
          mHotPotsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot.Builder getMHotPotsBuilder(
          int index) {
        return getMHotPotsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMHotPotsOrBuilder(
          int index) {
        if (mHotPotsBuilder_ == null) {
          return mHotPots_.get(index);  } else {
          return mHotPotsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
           getMHotPotsOrBuilderList() {
        if (mHotPotsBuilder_ != null) {
          return mHotPotsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mHotPots_);
        }
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot.Builder addMHotPotsBuilder() {
        return getMHotPotsFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance());
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot.Builder addMHotPotsBuilder(
          int index) {
        return getMHotPotsFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance());
      }
      /**
       * <pre>
       *场景中所有热点
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 7;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.HotPot.Builder> 
           getMHotPotsBuilderList() {
        return getMHotPotsFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
          getMHotPotsFieldBuilder() {
        if (mHotPotsBuilder_ == null) {
          mHotPotsBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder>(
                  mHotPots_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          mHotPots_ = null;
        }
        return mHotPotsBuilder_;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.Event> mEvents_ =
        java.util.Collections.emptyList();
      private void ensureMEventsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          mEvents_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.Event>(mEvents_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Event, com.nibiru.creator.data.HotPotData.Event.Builder, com.nibiru.creator.data.HotPotData.EventOrBuilder> mEventsBuilder_;

      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.Event> getMEventsList() {
        if (mEventsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mEvents_);
        } else {
          return mEventsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public int getMEventsCount() {
        if (mEventsBuilder_ == null) {
          return mEvents_.size();
        } else {
          return mEventsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Event getMEvents(int index) {
        if (mEventsBuilder_ == null) {
          return mEvents_.get(index);
        } else {
          return mEventsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public Builder setMEvents(
          int index, com.nibiru.creator.data.HotPotData.Event value) {
        if (mEventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMEventsIsMutable();
          mEvents_.set(index, value);
          onChanged();
        } else {
          mEventsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public Builder setMEvents(
          int index, com.nibiru.creator.data.HotPotData.Event.Builder builderForValue) {
        if (mEventsBuilder_ == null) {
          ensureMEventsIsMutable();
          mEvents_.set(index, builderForValue.build());
          onChanged();
        } else {
          mEventsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public Builder addMEvents(com.nibiru.creator.data.HotPotData.Event value) {
        if (mEventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMEventsIsMutable();
          mEvents_.add(value);
          onChanged();
        } else {
          mEventsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public Builder addMEvents(
          int index, com.nibiru.creator.data.HotPotData.Event value) {
        if (mEventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMEventsIsMutable();
          mEvents_.add(index, value);
          onChanged();
        } else {
          mEventsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public Builder addMEvents(
          com.nibiru.creator.data.HotPotData.Event.Builder builderForValue) {
        if (mEventsBuilder_ == null) {
          ensureMEventsIsMutable();
          mEvents_.add(builderForValue.build());
          onChanged();
        } else {
          mEventsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public Builder addMEvents(
          int index, com.nibiru.creator.data.HotPotData.Event.Builder builderForValue) {
        if (mEventsBuilder_ == null) {
          ensureMEventsIsMutable();
          mEvents_.add(index, builderForValue.build());
          onChanged();
        } else {
          mEventsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public Builder addAllMEvents(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.Event> values) {
        if (mEventsBuilder_ == null) {
          ensureMEventsIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mEvents_);
          onChanged();
        } else {
          mEventsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public Builder clearMEvents() {
        if (mEventsBuilder_ == null) {
          mEvents_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          mEventsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public Builder removeMEvents(int index) {
        if (mEventsBuilder_ == null) {
          ensureMEventsIsMutable();
          mEvents_.remove(index);
          onChanged();
        } else {
          mEventsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Event.Builder getMEventsBuilder(
          int index) {
        return getMEventsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.EventOrBuilder getMEventsOrBuilder(
          int index) {
        if (mEventsBuilder_ == null) {
          return mEvents_.get(index);  } else {
          return mEventsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.EventOrBuilder> 
           getMEventsOrBuilderList() {
        if (mEventsBuilder_ != null) {
          return mEventsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mEvents_);
        }
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Event.Builder addMEventsBuilder() {
        return getMEventsFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.Event.getDefaultInstance());
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Event.Builder addMEventsBuilder(
          int index) {
        return getMEventsFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.Event.getDefaultInstance());
      }
      /**
       * <pre>
       *场景中所有事件
       * </pre>
       *
       * <code>repeated .DataFactory.Event m_events = 8;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.Event.Builder> 
           getMEventsBuilderList() {
        return getMEventsFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Event, com.nibiru.creator.data.HotPotData.Event.Builder, com.nibiru.creator.data.HotPotData.EventOrBuilder> 
          getMEventsFieldBuilder() {
        if (mEventsBuilder_ == null) {
          mEventsBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Event, com.nibiru.creator.data.HotPotData.Event.Builder, com.nibiru.creator.data.HotPotData.EventOrBuilder>(
                  mEvents_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          mEvents_ = null;
        }
        return mEventsBuilder_;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.Component> mComponents_ =
        java.util.Collections.emptyList();
      private void ensureMComponentsIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          mComponents_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.Component>(mComponents_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Component, com.nibiru.creator.data.HotPotData.Component.Builder, com.nibiru.creator.data.HotPotData.ComponentOrBuilder> mComponentsBuilder_;

      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.Component> getMComponentsList() {
        if (mComponentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mComponents_);
        } else {
          return mComponentsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public int getMComponentsCount() {
        if (mComponentsBuilder_ == null) {
          return mComponents_.size();
        } else {
          return mComponentsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Component getMComponents(int index) {
        if (mComponentsBuilder_ == null) {
          return mComponents_.get(index);
        } else {
          return mComponentsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public Builder setMComponents(
          int index, com.nibiru.creator.data.HotPotData.Component value) {
        if (mComponentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMComponentsIsMutable();
          mComponents_.set(index, value);
          onChanged();
        } else {
          mComponentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public Builder setMComponents(
          int index, com.nibiru.creator.data.HotPotData.Component.Builder builderForValue) {
        if (mComponentsBuilder_ == null) {
          ensureMComponentsIsMutable();
          mComponents_.set(index, builderForValue.build());
          onChanged();
        } else {
          mComponentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public Builder addMComponents(com.nibiru.creator.data.HotPotData.Component value) {
        if (mComponentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMComponentsIsMutable();
          mComponents_.add(value);
          onChanged();
        } else {
          mComponentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public Builder addMComponents(
          int index, com.nibiru.creator.data.HotPotData.Component value) {
        if (mComponentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMComponentsIsMutable();
          mComponents_.add(index, value);
          onChanged();
        } else {
          mComponentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public Builder addMComponents(
          com.nibiru.creator.data.HotPotData.Component.Builder builderForValue) {
        if (mComponentsBuilder_ == null) {
          ensureMComponentsIsMutable();
          mComponents_.add(builderForValue.build());
          onChanged();
        } else {
          mComponentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public Builder addMComponents(
          int index, com.nibiru.creator.data.HotPotData.Component.Builder builderForValue) {
        if (mComponentsBuilder_ == null) {
          ensureMComponentsIsMutable();
          mComponents_.add(index, builderForValue.build());
          onChanged();
        } else {
          mComponentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public Builder addAllMComponents(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.Component> values) {
        if (mComponentsBuilder_ == null) {
          ensureMComponentsIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mComponents_);
          onChanged();
        } else {
          mComponentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public Builder clearMComponents() {
        if (mComponentsBuilder_ == null) {
          mComponents_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          mComponentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public Builder removeMComponents(int index) {
        if (mComponentsBuilder_ == null) {
          ensureMComponentsIsMutable();
          mComponents_.remove(index);
          onChanged();
        } else {
          mComponentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Component.Builder getMComponentsBuilder(
          int index) {
        return getMComponentsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.ComponentOrBuilder getMComponentsOrBuilder(
          int index) {
        if (mComponentsBuilder_ == null) {
          return mComponents_.get(index);  } else {
          return mComponentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.ComponentOrBuilder> 
           getMComponentsOrBuilderList() {
        if (mComponentsBuilder_ != null) {
          return mComponentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mComponents_);
        }
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Component.Builder addMComponentsBuilder() {
        return getMComponentsFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.Component.getDefaultInstance());
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Component.Builder addMComponentsBuilder(
          int index) {
        return getMComponentsFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.Component.getDefaultInstance());
      }
      /**
       * <pre>
       *场景中所有组件
       * </pre>
       *
       * <code>repeated .DataFactory.Component m_Components = 9;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.Component.Builder> 
           getMComponentsBuilderList() {
        return getMComponentsFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Component, com.nibiru.creator.data.HotPotData.Component.Builder, com.nibiru.creator.data.HotPotData.ComponentOrBuilder> 
          getMComponentsFieldBuilder() {
        if (mComponentsBuilder_ == null) {
          mComponentsBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Component, com.nibiru.creator.data.HotPotData.Component.Builder, com.nibiru.creator.data.HotPotData.ComponentOrBuilder>(
                  mComponents_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          mComponents_ = null;
        }
        return mComponentsBuilder_;
      }

      private float mAdjust_ ;
      /**
       * <pre>
       * </pre>
       *
       * <code>optional float m_adjust = 10;</code>
       */
      public boolean hasMAdjust() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional float m_adjust = 10;</code>
       */
      public float getMAdjust() {
        return mAdjust_;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional float m_adjust = 10;</code>
       */
      public Builder setMAdjust(float value) {
        bitField0_ |= 0x00000200;
        mAdjust_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional float m_adjust = 10;</code>
       */
      public Builder clearMAdjust() {
        bitField0_ = (bitField0_ & ~0x00000200);
        mAdjust_ = 0F;
        onChanged();
        return this;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.SkinSet> mSkinSet_ =
        java.util.Collections.emptyList();
      private void ensureMSkinSetIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          mSkinSet_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.SkinSet>(mSkinSet_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SkinSet, com.nibiru.creator.data.HotPotData.SkinSet.Builder, com.nibiru.creator.data.HotPotData.SkinSetOrBuilder> mSkinSetBuilder_;

      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.SkinSet> getMSkinSetList() {
        if (mSkinSetBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mSkinSet_);
        } else {
          return mSkinSetBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public int getMSkinSetCount() {
        if (mSkinSetBuilder_ == null) {
          return mSkinSet_.size();
        } else {
          return mSkinSetBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkinSet getMSkinSet(int index) {
        if (mSkinSetBuilder_ == null) {
          return mSkinSet_.get(index);
        } else {
          return mSkinSetBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public Builder setMSkinSet(
          int index, com.nibiru.creator.data.HotPotData.SkinSet value) {
        if (mSkinSetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSkinSetIsMutable();
          mSkinSet_.set(index, value);
          onChanged();
        } else {
          mSkinSetBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public Builder setMSkinSet(
          int index, com.nibiru.creator.data.HotPotData.SkinSet.Builder builderForValue) {
        if (mSkinSetBuilder_ == null) {
          ensureMSkinSetIsMutable();
          mSkinSet_.set(index, builderForValue.build());
          onChanged();
        } else {
          mSkinSetBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public Builder addMSkinSet(com.nibiru.creator.data.HotPotData.SkinSet value) {
        if (mSkinSetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSkinSetIsMutable();
          mSkinSet_.add(value);
          onChanged();
        } else {
          mSkinSetBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public Builder addMSkinSet(
          int index, com.nibiru.creator.data.HotPotData.SkinSet value) {
        if (mSkinSetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSkinSetIsMutable();
          mSkinSet_.add(index, value);
          onChanged();
        } else {
          mSkinSetBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public Builder addMSkinSet(
          com.nibiru.creator.data.HotPotData.SkinSet.Builder builderForValue) {
        if (mSkinSetBuilder_ == null) {
          ensureMSkinSetIsMutable();
          mSkinSet_.add(builderForValue.build());
          onChanged();
        } else {
          mSkinSetBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public Builder addMSkinSet(
          int index, com.nibiru.creator.data.HotPotData.SkinSet.Builder builderForValue) {
        if (mSkinSetBuilder_ == null) {
          ensureMSkinSetIsMutable();
          mSkinSet_.add(index, builderForValue.build());
          onChanged();
        } else {
          mSkinSetBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public Builder addAllMSkinSet(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.SkinSet> values) {
        if (mSkinSetBuilder_ == null) {
          ensureMSkinSetIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mSkinSet_);
          onChanged();
        } else {
          mSkinSetBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public Builder clearMSkinSet() {
        if (mSkinSetBuilder_ == null) {
          mSkinSet_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          mSkinSetBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public Builder removeMSkinSet(int index) {
        if (mSkinSetBuilder_ == null) {
          ensureMSkinSetIsMutable();
          mSkinSet_.remove(index);
          onChanged();
        } else {
          mSkinSetBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkinSet.Builder getMSkinSetBuilder(
          int index) {
        return getMSkinSetFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkinSetOrBuilder getMSkinSetOrBuilder(
          int index) {
        if (mSkinSetBuilder_ == null) {
          return mSkinSet_.get(index);  } else {
          return mSkinSetBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.SkinSetOrBuilder> 
           getMSkinSetOrBuilderList() {
        if (mSkinSetBuilder_ != null) {
          return mSkinSetBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mSkinSet_);
        }
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkinSet.Builder addMSkinSetBuilder() {
        return getMSkinSetFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.SkinSet.getDefaultInstance());
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkinSet.Builder addMSkinSetBuilder(
          int index) {
        return getMSkinSetFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.SkinSet.getDefaultInstance());
      }
      /**
       * <pre>
       *选择器皮肤
       * </pre>
       *
       * <code>repeated .DataFactory.SkinSet m_SkinSet = 11;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.SkinSet.Builder> 
           getMSkinSetBuilderList() {
        return getMSkinSetFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SkinSet, com.nibiru.creator.data.HotPotData.SkinSet.Builder, com.nibiru.creator.data.HotPotData.SkinSetOrBuilder> 
          getMSkinSetFieldBuilder() {
        if (mSkinSetBuilder_ == null) {
          mSkinSetBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.SkinSet, com.nibiru.creator.data.HotPotData.SkinSet.Builder, com.nibiru.creator.data.HotPotData.SkinSetOrBuilder>(
                  mSkinSet_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          mSkinSet_ = null;
        }
        return mSkinSetBuilder_;
      }

      private java.lang.Object mFileNameExt_ = "";
      /**
       * <pre>
       * </pre>
       *
       * <code>optional string m_FileNameExt = 12;</code>
       */
      public boolean hasMFileNameExt() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional string m_FileNameExt = 12;</code>
       */
      public java.lang.String getMFileNameExt() {
        java.lang.Object ref = mFileNameExt_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileNameExt_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional string m_FileNameExt = 12;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileNameExtBytes() {
        java.lang.Object ref = mFileNameExt_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileNameExt_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional string m_FileNameExt = 12;</code>
       */
      public Builder setMFileNameExt(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        mFileNameExt_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional string m_FileNameExt = 12;</code>
       */
      public Builder clearMFileNameExt() {
        bitField0_ = (bitField0_ & ~0x00000800);
        mFileNameExt_ = getDefaultInstance().getMFileNameExt();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>optional string m_FileNameExt = 12;</code>
       */
      public Builder setMFileNameExtBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        mFileNameExt_ = value;
        onChanged();
        return this;
      }

      private int mScenetype_ ;
      /**
       * <pre>
       *场景类型
       * </pre>
       *
       * <code>optional int32 m_Scenetype = 13;</code>
       */
      public boolean hasMScenetype() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       *场景类型
       * </pre>
       *
       * <code>optional int32 m_Scenetype = 13;</code>
       */
      public int getMScenetype() {
        return mScenetype_;
      }
      /**
       * <pre>
       *场景类型
       * </pre>
       *
       * <code>optional int32 m_Scenetype = 13;</code>
       */
      public Builder setMScenetype(int value) {
        bitField0_ |= 0x00001000;
        mScenetype_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景类型
       * </pre>
       *
       * <code>optional int32 m_Scenetype = 13;</code>
       */
      public Builder clearMScenetype() {
        bitField0_ = (bitField0_ & ~0x00001000);
        mScenetype_ = 0;
        onChanged();
        return this;
      }

      private long mTotalTime_ ;
      /**
       * <pre>
       *视频场景总时长 图片场景默认为0
       * </pre>
       *
       * <code>optional int64 m_totalTime = 14;</code>
       */
      public boolean hasMTotalTime() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       *视频场景总时长 图片场景默认为0
       * </pre>
       *
       * <code>optional int64 m_totalTime = 14;</code>
       */
      public long getMTotalTime() {
        return mTotalTime_;
      }
      /**
       * <pre>
       *视频场景总时长 图片场景默认为0
       * </pre>
       *
       * <code>optional int64 m_totalTime = 14;</code>
       */
      public Builder setMTotalTime(long value) {
        bitField0_ |= 0x00002000;
        mTotalTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *视频场景总时长 图片场景默认为0
       * </pre>
       *
       * <code>optional int64 m_totalTime = 14;</code>
       */
      public Builder clearMTotalTime() {
        bitField0_ = (bitField0_ & ~0x00002000);
        mTotalTime_ = 0L;
        onChanged();
        return this;
      }

      private long cutStartTime_ ;
      /**
       * <pre>
       *场景截取开始时间，图片场景默认为0
       * </pre>
       *
       * <code>optional int64 cutStartTime = 15;</code>
       */
      public boolean hasCutStartTime() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <pre>
       *场景截取开始时间，图片场景默认为0
       * </pre>
       *
       * <code>optional int64 cutStartTime = 15;</code>
       */
      public long getCutStartTime() {
        return cutStartTime_;
      }
      /**
       * <pre>
       *场景截取开始时间，图片场景默认为0
       * </pre>
       *
       * <code>optional int64 cutStartTime = 15;</code>
       */
      public Builder setCutStartTime(long value) {
        bitField0_ |= 0x00004000;
        cutStartTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景截取开始时间，图片场景默认为0
       * </pre>
       *
       * <code>optional int64 cutStartTime = 15;</code>
       */
      public Builder clearCutStartTime() {
        bitField0_ = (bitField0_ & ~0x00004000);
        cutStartTime_ = 0L;
        onChanged();
        return this;
      }

      private long cutEndTime_ ;
      /**
       * <pre>
       *场景截取结束时间，图片场景默认为0
       * </pre>
       *
       * <code>optional int64 cutEndTime = 16;</code>
       */
      public boolean hasCutEndTime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <pre>
       *场景截取结束时间，图片场景默认为0
       * </pre>
       *
       * <code>optional int64 cutEndTime = 16;</code>
       */
      public long getCutEndTime() {
        return cutEndTime_;
      }
      /**
       * <pre>
       *场景截取结束时间，图片场景默认为0
       * </pre>
       *
       * <code>optional int64 cutEndTime = 16;</code>
       */
      public Builder setCutEndTime(long value) {
        bitField0_ |= 0x00008000;
        cutEndTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景截取结束时间，图片场景默认为0
       * </pre>
       *
       * <code>optional int64 cutEndTime = 16;</code>
       */
      public Builder clearCutEndTime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        cutEndTime_ = 0L;
        onChanged();
        return this;
      }

      private int mRenderMode_ = 2;
      /**
       * <pre>
       *渲染模式
       * </pre>
       *
       * <code>optional .DataFactory.SceneRenderMode m_renderMode = 17 [default = SceneType_VR];</code>
       */
      public boolean hasMRenderMode() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <pre>
       *渲染模式
       * </pre>
       *
       * <code>optional .DataFactory.SceneRenderMode m_renderMode = 17 [default = SceneType_VR];</code>
       */
      public com.nibiru.creator.data.HotPotData.SceneRenderMode getMRenderMode() {
        com.nibiru.creator.data.HotPotData.SceneRenderMode result = com.nibiru.creator.data.HotPotData.SceneRenderMode.valueOf(mRenderMode_);
        return result == null ? com.nibiru.creator.data.HotPotData.SceneRenderMode.SceneType_VR : result;
      }
      /**
       * <pre>
       *渲染模式
       * </pre>
       *
       * <code>optional .DataFactory.SceneRenderMode m_renderMode = 17 [default = SceneType_VR];</code>
       */
      public Builder setMRenderMode(com.nibiru.creator.data.HotPotData.SceneRenderMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00010000;
        mRenderMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *渲染模式
       * </pre>
       *
       * <code>optional .DataFactory.SceneRenderMode m_renderMode = 17 [default = SceneType_VR];</code>
       */
      public Builder clearMRenderMode() {
        bitField0_ = (bitField0_ & ~0x00010000);
        mRenderMode_ = 2;
        onChanged();
        return this;
      }

      private java.lang.Object mIconPath_ = "";
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 18;</code>
       */
      public boolean hasMIconPath() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 18;</code>
       */
      public java.lang.String getMIconPath() {
        java.lang.Object ref = mIconPath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mIconPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 18;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIconPathBytes() {
        java.lang.Object ref = mIconPath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mIconPath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 18;</code>
       */
      public Builder setMIconPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        mIconPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 18;</code>
       */
      public Builder clearMIconPath() {
        bitField0_ = (bitField0_ & ~0x00020000);
        mIconPath_ = getDefaultInstance().getMIconPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景对应资源的路径缩略图（图片/视频）
       * </pre>
       *
       * <code>optional string m_iconPath = 18;</code>
       */
      public Builder setMIconPathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        mIconPath_ = value;
        onChanged();
        return this;
      }

      private int mMaterialId_ ;
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 19;</code>
       */
      public boolean hasMMaterialId() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 19;</code>
       */
      public int getMMaterialId() {
        return mMaterialId_;
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 19;</code>
       */
      public Builder setMMaterialId(int value) {
        bitField0_ |= 0x00040000;
        mMaterialId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *素材ID
       * </pre>
       *
       * <code>optional int32 m_materialId = 19;</code>
       */
      public Builder clearMMaterialId() {
        bitField0_ = (bitField0_ & ~0x00040000);
        mMaterialId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mFileUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 20;</code>
       */
      public boolean hasMFileUrl() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 20;</code>
       */
      public java.lang.String getMFileUrl() {
        java.lang.Object ref = mFileUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFileUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 20;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFileUrlBytes() {
        java.lang.Object ref = mFileUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFileUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 20;</code>
       */
      public Builder setMFileUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00080000;
        mFileUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 20;</code>
       */
      public Builder clearMFileUrl() {
        bitField0_ = (bitField0_ & ~0x00080000);
        mFileUrl_ = getDefaultInstance().getMFileUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_fileUrl = 20;</code>
       */
      public Builder setMFileUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00080000;
        mFileUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mIconUrl_ = "";
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 21;</code>
       */
      public boolean hasMIconUrl() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 21;</code>
       */
      public java.lang.String getMIconUrl() {
        java.lang.Object ref = mIconUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mIconUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 21;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIconUrlBytes() {
        java.lang.Object ref = mIconUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mIconUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 21;</code>
       */
      public Builder setMIconUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00100000;
        mIconUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 21;</code>
       */
      public Builder clearMIconUrl() {
        bitField0_ = (bitField0_ & ~0x00100000);
        mIconUrl_ = getDefaultInstance().getMIconUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Android用
       * </pre>
       *
       * <code>optional string m_iconUrl = 21;</code>
       */
      public Builder setMIconUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00100000;
        mIconUrl_ = value;
        onChanged();
        return this;
      }

      private int mGroupId_ ;
      /**
       * <pre>
       *对应的分组id
       * </pre>
       *
       * <code>optional int32 m_groupId = 22;</code>
       */
      public boolean hasMGroupId() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <pre>
       *对应的分组id
       * </pre>
       *
       * <code>optional int32 m_groupId = 22;</code>
       */
      public int getMGroupId() {
        return mGroupId_;
      }
      /**
       * <pre>
       *对应的分组id
       * </pre>
       *
       * <code>optional int32 m_groupId = 22;</code>
       */
      public Builder setMGroupId(int value) {
        bitField0_ |= 0x00200000;
        mGroupId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *对应的分组id
       * </pre>
       *
       * <code>optional int32 m_groupId = 22;</code>
       */
      public Builder clearMGroupId() {
        bitField0_ = (bitField0_ & ~0x00200000);
        mGroupId_ = 0;
        onChanged();
        return this;
      }

      private int mReplayVedio_ ;
      /**
       * <pre>
       *是否自动重播， 0不重播，1重播
       * </pre>
       *
       * <code>optional int32 m_ReplayVedio = 23;</code>
       */
      public boolean hasMReplayVedio() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <pre>
       *是否自动重播， 0不重播，1重播
       * </pre>
       *
       * <code>optional int32 m_ReplayVedio = 23;</code>
       */
      public int getMReplayVedio() {
        return mReplayVedio_;
      }
      /**
       * <pre>
       *是否自动重播， 0不重播，1重播
       * </pre>
       *
       * <code>optional int32 m_ReplayVedio = 23;</code>
       */
      public Builder setMReplayVedio(int value) {
        bitField0_ |= 0x00400000;
        mReplayVedio_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *是否自动重播， 0不重播，1重播
       * </pre>
       *
       * <code>optional int32 m_ReplayVedio = 23;</code>
       */
      public Builder clearMReplayVedio() {
        bitField0_ = (bitField0_ & ~0x00400000);
        mReplayVedio_ = 0;
        onChanged();
        return this;
      }

      private int mSelectorFlag_ ;
      /**
       * <pre>
       *店铺设置选中器标志  详情查看m_selectorFlag
       * </pre>
       *
       * <code>optional int32 m_selectorFlag = 24;</code>
       */
      public boolean hasMSelectorFlag() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <pre>
       *店铺设置选中器标志  详情查看m_selectorFlag
       * </pre>
       *
       * <code>optional int32 m_selectorFlag = 24;</code>
       */
      public int getMSelectorFlag() {
        return mSelectorFlag_;
      }
      /**
       * <pre>
       *店铺设置选中器标志  详情查看m_selectorFlag
       * </pre>
       *
       * <code>optional int32 m_selectorFlag = 24;</code>
       */
      public Builder setMSelectorFlag(int value) {
        bitField0_ |= 0x00800000;
        mSelectorFlag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *店铺设置选中器标志  详情查看m_selectorFlag
       * </pre>
       *
       * <code>optional int32 m_selectorFlag = 24;</code>
       */
      public Builder clearMSelectorFlag() {
        bitField0_ = (bitField0_ & ~0x00800000);
        mSelectorFlag_ = 0;
        onChanged();
        return this;
      }

      private float mMajorViewAngleY_ ;
      /**
       * <pre>
       *主视角Y轴转动角度
       * </pre>
       *
       * <code>optional float m_MajorViewAngleY = 25 [default = 0];</code>
       */
      public boolean hasMMajorViewAngleY() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <pre>
       *主视角Y轴转动角度
       * </pre>
       *
       * <code>optional float m_MajorViewAngleY = 25 [default = 0];</code>
       */
      public float getMMajorViewAngleY() {
        return mMajorViewAngleY_;
      }
      /**
       * <pre>
       *主视角Y轴转动角度
       * </pre>
       *
       * <code>optional float m_MajorViewAngleY = 25 [default = 0];</code>
       */
      public Builder setMMajorViewAngleY(float value) {
        bitField0_ |= 0x01000000;
        mMajorViewAngleY_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *主视角Y轴转动角度
       * </pre>
       *
       * <code>optional float m_MajorViewAngleY = 25 [default = 0];</code>
       */
      public Builder clearMMajorViewAngleY() {
        bitField0_ = (bitField0_ & ~0x01000000);
        mMajorViewAngleY_ = 0F;
        onChanged();
        return this;
      }

      private java.lang.Object mSkyImagePath_ = "";
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_SkyImagePath = 26;</code>
       */
      public boolean hasMSkyImagePath() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_SkyImagePath = 26;</code>
       */
      public java.lang.String getMSkyImagePath() {
        java.lang.Object ref = mSkyImagePath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mSkyImagePath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_SkyImagePath = 26;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMSkyImagePathBytes() {
        java.lang.Object ref = mSkyImagePath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mSkyImagePath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_SkyImagePath = 26;</code>
       */
      public Builder setMSkyImagePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x02000000;
        mSkyImagePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_SkyImagePath = 26;</code>
       */
      public Builder clearMSkyImagePath() {
        bitField0_ = (bitField0_ & ~0x02000000);
        mSkyImagePath_ = getDefaultInstance().getMSkyImagePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_SkyImagePath = 26;</code>
       */
      public Builder setMSkyImagePathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x02000000;
        mSkyImagePath_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mGroundImagePath_ = "";
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_GroundImagePath = 27;</code>
       */
      public boolean hasMGroundImagePath() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_GroundImagePath = 27;</code>
       */
      public java.lang.String getMGroundImagePath() {
        java.lang.Object ref = mGroundImagePath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mGroundImagePath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_GroundImagePath = 27;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMGroundImagePathBytes() {
        java.lang.Object ref = mGroundImagePath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mGroundImagePath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_GroundImagePath = 27;</code>
       */
      public Builder setMGroundImagePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        mGroundImagePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_GroundImagePath = 27;</code>
       */
      public Builder clearMGroundImagePath() {
        bitField0_ = (bitField0_ & ~0x04000000);
        mGroundImagePath_ = getDefaultInstance().getMGroundImagePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *弃用
       * </pre>
       *
       * <code>optional string m_GroundImagePath = 27;</code>
       */
      public Builder setMGroundImagePathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        mGroundImagePath_ = value;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.HotPot mSkyImagehot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder> mSkyImagehotBuilder_;
      /**
       * <pre>
       *场景天空遮罩图片路径
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
       */
      public boolean hasMSkyImagehot() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <pre>
       *场景天空遮罩图片路径
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot getMSkyImagehot() {
        if (mSkyImagehotBuilder_ == null) {
          return mSkyImagehot_ == null ? com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mSkyImagehot_;
        } else {
          return mSkyImagehotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *场景天空遮罩图片路径
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
       */
      public Builder setMSkyImagehot(com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mSkyImagehotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mSkyImagehot_ = value;
          onChanged();
        } else {
          mSkyImagehotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <pre>
       *场景天空遮罩图片路径
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
       */
      public Builder setMSkyImagehot(
          com.nibiru.creator.data.HotPotData.HotPot.Builder builderForValue) {
        if (mSkyImagehotBuilder_ == null) {
          mSkyImagehot_ = builderForValue.build();
          onChanged();
        } else {
          mSkyImagehotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <pre>
       *场景天空遮罩图片路径
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
       */
      public Builder mergeMSkyImagehot(com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mSkyImagehotBuilder_ == null) {
          if (((bitField0_ & 0x08000000) == 0x08000000) &&
              mSkyImagehot_ != null &&
              mSkyImagehot_ != com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance()) {
            mSkyImagehot_ =
              com.nibiru.creator.data.HotPotData.HotPot.newBuilder(mSkyImagehot_).mergeFrom(value).buildPartial();
          } else {
            mSkyImagehot_ = value;
          }
          onChanged();
        } else {
          mSkyImagehotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <pre>
       *场景天空遮罩图片路径
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
       */
      public Builder clearMSkyImagehot() {
        if (mSkyImagehotBuilder_ == null) {
          mSkyImagehot_ = null;
          onChanged();
        } else {
          mSkyImagehotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }
      /**
       * <pre>
       *场景天空遮罩图片路径
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot.Builder getMSkyImagehotBuilder() {
        bitField0_ |= 0x08000000;
        onChanged();
        return getMSkyImagehotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *场景天空遮罩图片路径
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMSkyImagehotOrBuilder() {
        if (mSkyImagehotBuilder_ != null) {
          return mSkyImagehotBuilder_.getMessageOrBuilder();
        } else {
          return mSkyImagehot_ == null ?
              com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mSkyImagehot_;
        }
      }
      /**
       * <pre>
       *场景天空遮罩图片路径
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_SkyImagehot = 28;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
          getMSkyImagehotFieldBuilder() {
        if (mSkyImagehotBuilder_ == null) {
          mSkyImagehotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder>(
                  getMSkyImagehot(),
                  getParentForChildren(),
                  isClean());
          mSkyImagehot_ = null;
        }
        return mSkyImagehotBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.HotPot mGroundImagehot_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder> mGroundImagehotBuilder_;
      /**
       * <pre>
       *场景地面遮罩图片路径	
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
       */
      public boolean hasMGroundImagehot() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <pre>
       *场景地面遮罩图片路径	
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot getMGroundImagehot() {
        if (mGroundImagehotBuilder_ == null) {
          return mGroundImagehot_ == null ? com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mGroundImagehot_;
        } else {
          return mGroundImagehotBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *场景地面遮罩图片路径	
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
       */
      public Builder setMGroundImagehot(com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mGroundImagehotBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mGroundImagehot_ = value;
          onChanged();
        } else {
          mGroundImagehotBuilder_.setMessage(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <pre>
       *场景地面遮罩图片路径	
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
       */
      public Builder setMGroundImagehot(
          com.nibiru.creator.data.HotPotData.HotPot.Builder builderForValue) {
        if (mGroundImagehotBuilder_ == null) {
          mGroundImagehot_ = builderForValue.build();
          onChanged();
        } else {
          mGroundImagehotBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <pre>
       *场景地面遮罩图片路径	
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
       */
      public Builder mergeMGroundImagehot(com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mGroundImagehotBuilder_ == null) {
          if (((bitField0_ & 0x10000000) == 0x10000000) &&
              mGroundImagehot_ != null &&
              mGroundImagehot_ != com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance()) {
            mGroundImagehot_ =
              com.nibiru.creator.data.HotPotData.HotPot.newBuilder(mGroundImagehot_).mergeFrom(value).buildPartial();
          } else {
            mGroundImagehot_ = value;
          }
          onChanged();
        } else {
          mGroundImagehotBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <pre>
       *场景地面遮罩图片路径	
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
       */
      public Builder clearMGroundImagehot() {
        if (mGroundImagehotBuilder_ == null) {
          mGroundImagehot_ = null;
          onChanged();
        } else {
          mGroundImagehotBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        return this;
      }
      /**
       * <pre>
       *场景地面遮罩图片路径	
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot.Builder getMGroundImagehotBuilder() {
        bitField0_ |= 0x10000000;
        onChanged();
        return getMGroundImagehotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *场景地面遮罩图片路径	
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMGroundImagehotOrBuilder() {
        if (mGroundImagehotBuilder_ != null) {
          return mGroundImagehotBuilder_.getMessageOrBuilder();
        } else {
          return mGroundImagehot_ == null ?
              com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance() : mGroundImagehot_;
        }
      }
      /**
       * <pre>
       *场景地面遮罩图片路径	
       * </pre>
       *
       * <code>optional .DataFactory.HotPot m_GroundImagehot = 29;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
          getMGroundImagehotFieldBuilder() {
        if (mGroundImagehotBuilder_ == null) {
          mGroundImagehotBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder>(
                  getMGroundImagehot(),
                  getParentForChildren(),
                  isClean());
          mGroundImagehot_ = null;
        }
        return mGroundImagehotBuilder_;
      }

      private int mFov_ = 75;
      /**
       * <pre>
       *fov默认75
       * </pre>
       *
       * <code>optional int32 m_Fov = 30 [default = 75];</code>
       */
      public boolean hasMFov() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <pre>
       *fov默认75
       * </pre>
       *
       * <code>optional int32 m_Fov = 30 [default = 75];</code>
       */
      public int getMFov() {
        return mFov_;
      }
      /**
       * <pre>
       *fov默认75
       * </pre>
       *
       * <code>optional int32 m_Fov = 30 [default = 75];</code>
       */
      public Builder setMFov(int value) {
        bitField0_ |= 0x20000000;
        mFov_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *fov默认75
       * </pre>
       *
       * <code>optional int32 m_Fov = 30 [default = 75];</code>
       */
      public Builder clearMFov() {
        bitField0_ = (bitField0_ & ~0x20000000);
        mFov_ = 75;
        onChanged();
        return this;
      }

      private int mGyroScope_ ;
      /**
       * <pre>
       *陀螺仪设置， 0关闭，1 开启
       * </pre>
       *
       * <code>optional int32 m_gyroScope = 31;</code>
       */
      public boolean hasMGyroScope() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <pre>
       *陀螺仪设置， 0关闭，1 开启
       * </pre>
       *
       * <code>optional int32 m_gyroScope = 31;</code>
       */
      public int getMGyroScope() {
        return mGyroScope_;
      }
      /**
       * <pre>
       *陀螺仪设置， 0关闭，1 开启
       * </pre>
       *
       * <code>optional int32 m_gyroScope = 31;</code>
       */
      public Builder setMGyroScope(int value) {
        bitField0_ |= 0x40000000;
        mGyroScope_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *陀螺仪设置， 0关闭，1 开启
       * </pre>
       *
       * <code>optional int32 m_gyroScope = 31;</code>
       */
      public Builder clearMGyroScope() {
        bitField0_ = (bitField0_ & ~0x40000000);
        mGyroScope_ = 0;
        onChanged();
        return this;
      }

      private int mExpand_ ;
      /**
       * <pre>
       *全局选择器 是否默认展开
       * </pre>
       *
       * <code>optional int32 m_expand = 32;</code>
       */
      public boolean hasMExpand() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <pre>
       *全局选择器 是否默认展开
       * </pre>
       *
       * <code>optional int32 m_expand = 32;</code>
       */
      public int getMExpand() {
        return mExpand_;
      }
      /**
       * <pre>
       *全局选择器 是否默认展开
       * </pre>
       *
       * <code>optional int32 m_expand = 32;</code>
       */
      public Builder setMExpand(int value) {
        bitField0_ |= 0x80000000;
        mExpand_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *全局选择器 是否默认展开
       * </pre>
       *
       * <code>optional int32 m_expand = 32;</code>
       */
      public Builder clearMExpand() {
        bitField0_ = (bitField0_ & ~0x80000000);
        mExpand_ = 0;
        onChanged();
        return this;
      }

      private int mHotpotId_ ;
      /**
       * <pre>
       *全局选择器对应全局热点id
       * </pre>
       *
       * <code>optional int32 m_hotpotId = 33;</code>
       */
      public boolean hasMHotpotId() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *全局选择器对应全局热点id
       * </pre>
       *
       * <code>optional int32 m_hotpotId = 33;</code>
       */
      public int getMHotpotId() {
        return mHotpotId_;
      }
      /**
       * <pre>
       *全局选择器对应全局热点id
       * </pre>
       *
       * <code>optional int32 m_hotpotId = 33;</code>
       */
      public Builder setMHotpotId(int value) {
        bitField1_ |= 0x00000001;
        mHotpotId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *全局选择器对应全局热点id
       * </pre>
       *
       * <code>optional int32 m_hotpotId = 33;</code>
       */
      public Builder clearMHotpotId() {
        bitField1_ = (bitField1_ & ~0x00000001);
        mHotpotId_ = 0;
        onChanged();
        return this;
      }

      private int mStandTable_ ;
      /**
       * <pre>
       *全局选择器 是否沙盘模式
       * </pre>
       *
       * <code>optional int32 m_standTable = 34;</code>
       */
      public boolean hasMStandTable() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *全局选择器 是否沙盘模式
       * </pre>
       *
       * <code>optional int32 m_standTable = 34;</code>
       */
      public int getMStandTable() {
        return mStandTable_;
      }
      /**
       * <pre>
       *全局选择器 是否沙盘模式
       * </pre>
       *
       * <code>optional int32 m_standTable = 34;</code>
       */
      public Builder setMStandTable(int value) {
        bitField1_ |= 0x00000002;
        mStandTable_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *全局选择器 是否沙盘模式
       * </pre>
       *
       * <code>optional int32 m_standTable = 34;</code>
       */
      public Builder clearMStandTable() {
        bitField1_ = (bitField1_ & ~0x00000002);
        mStandTable_ = 0;
        onChanged();
        return this;
      }

      private int mStatistics_ ;
      /**
       * <pre>
       *数据统计
       * </pre>
       *
       * <code>optional int32 m_statistics = 35;</code>
       */
      public boolean hasMStatistics() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *数据统计
       * </pre>
       *
       * <code>optional int32 m_statistics = 35;</code>
       */
      public int getMStatistics() {
        return mStatistics_;
      }
      /**
       * <pre>
       *数据统计
       * </pre>
       *
       * <code>optional int32 m_statistics = 35;</code>
       */
      public Builder setMStatistics(int value) {
        bitField1_ |= 0x00000004;
        mStatistics_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *数据统计
       * </pre>
       *
       * <code>optional int32 m_statistics = 35;</code>
       */
      public Builder clearMStatistics() {
        bitField1_ = (bitField1_ & ~0x00000004);
        mStatistics_ = 0;
        onChanged();
        return this;
      }

      private float mNorthViewAngle_ ;
      /**
       * <pre>
       *沙盘指向角
       * </pre>
       *
       * <code>optional float m_NorthViewAngle = 36;</code>
       */
      public boolean hasMNorthViewAngle() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *沙盘指向角
       * </pre>
       *
       * <code>optional float m_NorthViewAngle = 36;</code>
       */
      public float getMNorthViewAngle() {
        return mNorthViewAngle_;
      }
      /**
       * <pre>
       *沙盘指向角
       * </pre>
       *
       * <code>optional float m_NorthViewAngle = 36;</code>
       */
      public Builder setMNorthViewAngle(float value) {
        bitField1_ |= 0x00000008;
        mNorthViewAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *沙盘指向角
       * </pre>
       *
       * <code>optional float m_NorthViewAngle = 36;</code>
       */
      public Builder clearMNorthViewAngle() {
        bitField1_ = (bitField1_ & ~0x00000008);
        mNorthViewAngle_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.SkyBoxSceneAttribute)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.SkyBoxSceneAttribute)
    private static final com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute();
    }

    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<SkyBoxSceneAttribute>
        PARSER = new com.nibiru.protobuf.AbstractParser<SkyBoxSceneAttribute>() {
      public SkyBoxSceneAttribute parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new SkyBoxSceneAttribute(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<SkyBoxSceneAttribute> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<SkyBoxSceneAttribute> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WeChatShareOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.WeChatShare)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *标题名称
     * </pre>
     *
     * <code>optional string m_TitleName = 1;</code>
     */
    boolean hasMTitleName();
    /**
     * <pre>
     *标题名称
     * </pre>
     *
     * <code>optional string m_TitleName = 1;</code>
     */
    java.lang.String getMTitleName();
    /**
     * <pre>
     *标题名称
     * </pre>
     *
     * <code>optional string m_TitleName = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMTitleNameBytes();

    /**
     * <pre>
     *项目简介
     * </pre>
     *
     * <code>optional string m_ProjectIntroduction = 2;</code>
     */
    boolean hasMProjectIntroduction();
    /**
     * <pre>
     *项目简介
     * </pre>
     *
     * <code>optional string m_ProjectIntroduction = 2;</code>
     */
    java.lang.String getMProjectIntroduction();
    /**
     * <pre>
     *项目简介
     * </pre>
     *
     * <code>optional string m_ProjectIntroduction = 2;</code>
     */
    com.nibiru.protobuf.ByteString
        getMProjectIntroductionBytes();

    /**
     * <pre>
     *缩略图
     * </pre>
     *
     * <code>optional string m_thumbnail = 3;</code>
     */
    boolean hasMThumbnail();
    /**
     * <pre>
     *缩略图
     * </pre>
     *
     * <code>optional string m_thumbnail = 3;</code>
     */
    java.lang.String getMThumbnail();
    /**
     * <pre>
     *缩略图
     * </pre>
     *
     * <code>optional string m_thumbnail = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMThumbnailBytes();

    /**
     * <pre>
     * 是否展示logo
     * </pre>
     *
     * <code>optional int32 m_showLogo = 4;</code>
     */
    boolean hasMShowLogo();
    /**
     * <pre>
     * 是否展示logo
     * </pre>
     *
     * <code>optional int32 m_showLogo = 4;</code>
     */
    int getMShowLogo();

    /**
     * <pre>
     *logo资源路径
     * </pre>
     *
     * <code>optional string m_logoPath = 5;</code>
     */
    boolean hasMLogoPath();
    /**
     * <pre>
     *logo资源路径
     * </pre>
     *
     * <code>optional string m_logoPath = 5;</code>
     */
    java.lang.String getMLogoPath();
    /**
     * <pre>
     *logo资源路径
     * </pre>
     *
     * <code>optional string m_logoPath = 5;</code>
     */
    com.nibiru.protobuf.ByteString
        getMLogoPathBytes();
  }
  /**
   * <pre>
   *微信分享内容
   * </pre>
   *
   * Protobuf type {@code DataFactory.WeChatShare}
   */
  public  static final class WeChatShare extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.WeChatShare)
      WeChatShareOrBuilder {
    // Use WeChatShare.newBuilder() to construct.
    private WeChatShare(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WeChatShare() {
      mTitleName_ = "";
      mProjectIntroduction_ = "";
      mThumbnail_ = "";
      mShowLogo_ = 0;
      mLogoPath_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WeChatShare(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mTitleName_ = bs;
              break;
            }
            case 18: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              mProjectIntroduction_ = bs;
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mThumbnail_ = bs;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              mShowLogo_ = input.readInt32();
              break;
            }
            case 42: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              mLogoPath_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_WeChatShare_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_WeChatShare_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.WeChatShare.class, com.nibiru.creator.data.HotPotData.WeChatShare.Builder.class);
    }

    private int bitField0_;
    public static final int M_TITLENAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object mTitleName_;
    /**
     * <pre>
     *标题名称
     * </pre>
     *
     * <code>optional string m_TitleName = 1;</code>
     */
    public boolean hasMTitleName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *标题名称
     * </pre>
     *
     * <code>optional string m_TitleName = 1;</code>
     */
    public java.lang.String getMTitleName() {
      java.lang.Object ref = mTitleName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mTitleName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *标题名称
     * </pre>
     *
     * <code>optional string m_TitleName = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMTitleNameBytes() {
      java.lang.Object ref = mTitleName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mTitleName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_PROJECTINTRODUCTION_FIELD_NUMBER = 2;
    private volatile java.lang.Object mProjectIntroduction_;
    /**
     * <pre>
     *项目简介
     * </pre>
     *
     * <code>optional string m_ProjectIntroduction = 2;</code>
     */
    public boolean hasMProjectIntroduction() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *项目简介
     * </pre>
     *
     * <code>optional string m_ProjectIntroduction = 2;</code>
     */
    public java.lang.String getMProjectIntroduction() {
      java.lang.Object ref = mProjectIntroduction_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mProjectIntroduction_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *项目简介
     * </pre>
     *
     * <code>optional string m_ProjectIntroduction = 2;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMProjectIntroductionBytes() {
      java.lang.Object ref = mProjectIntroduction_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mProjectIntroduction_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_THUMBNAIL_FIELD_NUMBER = 3;
    private volatile java.lang.Object mThumbnail_;
    /**
     * <pre>
     *缩略图
     * </pre>
     *
     * <code>optional string m_thumbnail = 3;</code>
     */
    public boolean hasMThumbnail() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *缩略图
     * </pre>
     *
     * <code>optional string m_thumbnail = 3;</code>
     */
    public java.lang.String getMThumbnail() {
      java.lang.Object ref = mThumbnail_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mThumbnail_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *缩略图
     * </pre>
     *
     * <code>optional string m_thumbnail = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMThumbnailBytes() {
      java.lang.Object ref = mThumbnail_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mThumbnail_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_SHOWLOGO_FIELD_NUMBER = 4;
    private int mShowLogo_;
    /**
     * <pre>
     * 是否展示logo
     * </pre>
     *
     * <code>optional int32 m_showLogo = 4;</code>
     */
    public boolean hasMShowLogo() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 是否展示logo
     * </pre>
     *
     * <code>optional int32 m_showLogo = 4;</code>
     */
    public int getMShowLogo() {
      return mShowLogo_;
    }

    public static final int M_LOGOPATH_FIELD_NUMBER = 5;
    private volatile java.lang.Object mLogoPath_;
    /**
     * <pre>
     *logo资源路径
     * </pre>
     *
     * <code>optional string m_logoPath = 5;</code>
     */
    public boolean hasMLogoPath() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *logo资源路径
     * </pre>
     *
     * <code>optional string m_logoPath = 5;</code>
     */
    public java.lang.String getMLogoPath() {
      java.lang.Object ref = mLogoPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mLogoPath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *logo资源路径
     * </pre>
     *
     * <code>optional string m_logoPath = 5;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMLogoPathBytes() {
      java.lang.Object ref = mLogoPath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mLogoPath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mTitleName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 2, mProjectIntroduction_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mThumbnail_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, mShowLogo_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 5, mLogoPath_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mTitleName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(2, mProjectIntroduction_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mThumbnail_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(4, mShowLogo_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(5, mLogoPath_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.WeChatShare)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.WeChatShare other = (com.nibiru.creator.data.HotPotData.WeChatShare) obj;

      boolean result = true;
      result = result && (hasMTitleName() == other.hasMTitleName());
      if (hasMTitleName()) {
        result = result && getMTitleName()
            .equals(other.getMTitleName());
      }
      result = result && (hasMProjectIntroduction() == other.hasMProjectIntroduction());
      if (hasMProjectIntroduction()) {
        result = result && getMProjectIntroduction()
            .equals(other.getMProjectIntroduction());
      }
      result = result && (hasMThumbnail() == other.hasMThumbnail());
      if (hasMThumbnail()) {
        result = result && getMThumbnail()
            .equals(other.getMThumbnail());
      }
      result = result && (hasMShowLogo() == other.hasMShowLogo());
      if (hasMShowLogo()) {
        result = result && (getMShowLogo()
            == other.getMShowLogo());
      }
      result = result && (hasMLogoPath() == other.hasMLogoPath());
      if (hasMLogoPath()) {
        result = result && getMLogoPath()
            .equals(other.getMLogoPath());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMTitleName()) {
        hash = (37 * hash) + M_TITLENAME_FIELD_NUMBER;
        hash = (53 * hash) + getMTitleName().hashCode();
      }
      if (hasMProjectIntroduction()) {
        hash = (37 * hash) + M_PROJECTINTRODUCTION_FIELD_NUMBER;
        hash = (53 * hash) + getMProjectIntroduction().hashCode();
      }
      if (hasMThumbnail()) {
        hash = (37 * hash) + M_THUMBNAIL_FIELD_NUMBER;
        hash = (53 * hash) + getMThumbnail().hashCode();
      }
      if (hasMShowLogo()) {
        hash = (37 * hash) + M_SHOWLOGO_FIELD_NUMBER;
        hash = (53 * hash) + getMShowLogo();
      }
      if (hasMLogoPath()) {
        hash = (37 * hash) + M_LOGOPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMLogoPath().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.WeChatShare parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.WeChatShare parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.WeChatShare parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.WeChatShare parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.WeChatShare parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.WeChatShare parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.WeChatShare parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.WeChatShare parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.WeChatShare parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.WeChatShare parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.WeChatShare prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *微信分享内容
     * </pre>
     *
     * Protobuf type {@code DataFactory.WeChatShare}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.WeChatShare)
        com.nibiru.creator.data.HotPotData.WeChatShareOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_WeChatShare_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_WeChatShare_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.WeChatShare.class, com.nibiru.creator.data.HotPotData.WeChatShare.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.WeChatShare.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mTitleName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mProjectIntroduction_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        mThumbnail_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        mShowLogo_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        mLogoPath_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_WeChatShare_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.WeChatShare getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.WeChatShare.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.WeChatShare build() {
        com.nibiru.creator.data.HotPotData.WeChatShare result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.WeChatShare buildPartial() {
        com.nibiru.creator.data.HotPotData.WeChatShare result = new com.nibiru.creator.data.HotPotData.WeChatShare(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mTitleName_ = mTitleName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mProjectIntroduction_ = mProjectIntroduction_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mThumbnail_ = mThumbnail_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mShowLogo_ = mShowLogo_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mLogoPath_ = mLogoPath_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.WeChatShare) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.WeChatShare)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.WeChatShare other) {
        if (other == com.nibiru.creator.data.HotPotData.WeChatShare.getDefaultInstance()) return this;
        if (other.hasMTitleName()) {
          bitField0_ |= 0x00000001;
          mTitleName_ = other.mTitleName_;
          onChanged();
        }
        if (other.hasMProjectIntroduction()) {
          bitField0_ |= 0x00000002;
          mProjectIntroduction_ = other.mProjectIntroduction_;
          onChanged();
        }
        if (other.hasMThumbnail()) {
          bitField0_ |= 0x00000004;
          mThumbnail_ = other.mThumbnail_;
          onChanged();
        }
        if (other.hasMShowLogo()) {
          setMShowLogo(other.getMShowLogo());
        }
        if (other.hasMLogoPath()) {
          bitField0_ |= 0x00000010;
          mLogoPath_ = other.mLogoPath_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.WeChatShare parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.WeChatShare) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mTitleName_ = "";
      /**
       * <pre>
       *标题名称
       * </pre>
       *
       * <code>optional string m_TitleName = 1;</code>
       */
      public boolean hasMTitleName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *标题名称
       * </pre>
       *
       * <code>optional string m_TitleName = 1;</code>
       */
      public java.lang.String getMTitleName() {
        java.lang.Object ref = mTitleName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mTitleName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *标题名称
       * </pre>
       *
       * <code>optional string m_TitleName = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMTitleNameBytes() {
        java.lang.Object ref = mTitleName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mTitleName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *标题名称
       * </pre>
       *
       * <code>optional string m_TitleName = 1;</code>
       */
      public Builder setMTitleName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mTitleName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *标题名称
       * </pre>
       *
       * <code>optional string m_TitleName = 1;</code>
       */
      public Builder clearMTitleName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mTitleName_ = getDefaultInstance().getMTitleName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *标题名称
       * </pre>
       *
       * <code>optional string m_TitleName = 1;</code>
       */
      public Builder setMTitleNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mTitleName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mProjectIntroduction_ = "";
      /**
       * <pre>
       *项目简介
       * </pre>
       *
       * <code>optional string m_ProjectIntroduction = 2;</code>
       */
      public boolean hasMProjectIntroduction() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *项目简介
       * </pre>
       *
       * <code>optional string m_ProjectIntroduction = 2;</code>
       */
      public java.lang.String getMProjectIntroduction() {
        java.lang.Object ref = mProjectIntroduction_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mProjectIntroduction_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *项目简介
       * </pre>
       *
       * <code>optional string m_ProjectIntroduction = 2;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMProjectIntroductionBytes() {
        java.lang.Object ref = mProjectIntroduction_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mProjectIntroduction_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *项目简介
       * </pre>
       *
       * <code>optional string m_ProjectIntroduction = 2;</code>
       */
      public Builder setMProjectIntroduction(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mProjectIntroduction_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *项目简介
       * </pre>
       *
       * <code>optional string m_ProjectIntroduction = 2;</code>
       */
      public Builder clearMProjectIntroduction() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mProjectIntroduction_ = getDefaultInstance().getMProjectIntroduction();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *项目简介
       * </pre>
       *
       * <code>optional string m_ProjectIntroduction = 2;</code>
       */
      public Builder setMProjectIntroductionBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mProjectIntroduction_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mThumbnail_ = "";
      /**
       * <pre>
       *缩略图
       * </pre>
       *
       * <code>optional string m_thumbnail = 3;</code>
       */
      public boolean hasMThumbnail() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *缩略图
       * </pre>
       *
       * <code>optional string m_thumbnail = 3;</code>
       */
      public java.lang.String getMThumbnail() {
        java.lang.Object ref = mThumbnail_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mThumbnail_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *缩略图
       * </pre>
       *
       * <code>optional string m_thumbnail = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMThumbnailBytes() {
        java.lang.Object ref = mThumbnail_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mThumbnail_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *缩略图
       * </pre>
       *
       * <code>optional string m_thumbnail = 3;</code>
       */
      public Builder setMThumbnail(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mThumbnail_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *缩略图
       * </pre>
       *
       * <code>optional string m_thumbnail = 3;</code>
       */
      public Builder clearMThumbnail() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mThumbnail_ = getDefaultInstance().getMThumbnail();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *缩略图
       * </pre>
       *
       * <code>optional string m_thumbnail = 3;</code>
       */
      public Builder setMThumbnailBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mThumbnail_ = value;
        onChanged();
        return this;
      }

      private int mShowLogo_ ;
      /**
       * <pre>
       * 是否展示logo
       * </pre>
       *
       * <code>optional int32 m_showLogo = 4;</code>
       */
      public boolean hasMShowLogo() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * 是否展示logo
       * </pre>
       *
       * <code>optional int32 m_showLogo = 4;</code>
       */
      public int getMShowLogo() {
        return mShowLogo_;
      }
      /**
       * <pre>
       * 是否展示logo
       * </pre>
       *
       * <code>optional int32 m_showLogo = 4;</code>
       */
      public Builder setMShowLogo(int value) {
        bitField0_ |= 0x00000008;
        mShowLogo_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 是否展示logo
       * </pre>
       *
       * <code>optional int32 m_showLogo = 4;</code>
       */
      public Builder clearMShowLogo() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mShowLogo_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mLogoPath_ = "";
      /**
       * <pre>
       *logo资源路径
       * </pre>
       *
       * <code>optional string m_logoPath = 5;</code>
       */
      public boolean hasMLogoPath() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *logo资源路径
       * </pre>
       *
       * <code>optional string m_logoPath = 5;</code>
       */
      public java.lang.String getMLogoPath() {
        java.lang.Object ref = mLogoPath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mLogoPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *logo资源路径
       * </pre>
       *
       * <code>optional string m_logoPath = 5;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMLogoPathBytes() {
        java.lang.Object ref = mLogoPath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mLogoPath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *logo资源路径
       * </pre>
       *
       * <code>optional string m_logoPath = 5;</code>
       */
      public Builder setMLogoPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mLogoPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *logo资源路径
       * </pre>
       *
       * <code>optional string m_logoPath = 5;</code>
       */
      public Builder clearMLogoPath() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mLogoPath_ = getDefaultInstance().getMLogoPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *logo资源路径
       * </pre>
       *
       * <code>optional string m_logoPath = 5;</code>
       */
      public Builder setMLogoPathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mLogoPath_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.WeChatShare)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.WeChatShare)
    private static final com.nibiru.creator.data.HotPotData.WeChatShare DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.WeChatShare();
    }

    public static com.nibiru.creator.data.HotPotData.WeChatShare getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<WeChatShare>
        PARSER = new com.nibiru.protobuf.AbstractParser<WeChatShare>() {
      public WeChatShare parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new WeChatShare(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<WeChatShare> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<WeChatShare> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.WeChatShare getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface sceneContextOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.sceneContext)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *场景资源名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    boolean hasMName();
    /**
     * <pre>
     *场景资源名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    java.lang.String getMName();
    /**
     * <pre>
     *场景资源名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMNameBytes();

    /**
     * <pre>
     *资源路径	
     * </pre>
     *
     * <code>optional string m_filePath = 2;</code>
     */
    boolean hasMFilePath();
    /**
     * <pre>
     *资源路径	
     * </pre>
     *
     * <code>optional string m_filePath = 2;</code>
     */
    java.lang.String getMFilePath();
    /**
     * <pre>
     *资源路径	
     * </pre>
     *
     * <code>optional string m_filePath = 2;</code>
     */
    com.nibiru.protobuf.ByteString
        getMFilePathBytes();

    /**
     * <pre>
     *资源应用模式（0:2D,1:VR）
     * </pre>
     *
     * <code>optional int32 m_sceneMode = 3;</code>
     */
    boolean hasMSceneMode();
    /**
     * <pre>
     *资源应用模式（0:2D,1:VR）
     * </pre>
     *
     * <code>optional int32 m_sceneMode = 3;</code>
     */
    int getMSceneMode();

    /**
     * <pre>
     *资源时长（图片为0）
     * </pre>
     *
     * <code>optional int64 m_totalTime = 4;</code>
     */
    boolean hasMTotalTime();
    /**
     * <pre>
     *资源时长（图片为0）
     * </pre>
     *
     * <code>optional int64 m_totalTime = 4;</code>
     */
    long getMTotalTime();

    /**
     * <pre>
     *资源类型（0:Image, 1:Video）
     * </pre>
     *
     * <code>optional int32 m_sceneType = 5;</code>
     */
    boolean hasMSceneType();
    /**
     * <pre>
     *资源类型（0:Image, 1:Video）
     * </pre>
     *
     * <code>optional int32 m_sceneType = 5;</code>
     */
    int getMSceneType();

    /**
     * <pre>
     *资源所在分组id
     * </pre>
     *
     * <code>optional int32 m_groupId = 6;</code>
     */
    boolean hasMGroupId();
    /**
     * <pre>
     *资源所在分组id
     * </pre>
     *
     * <code>optional int32 m_groupId = 6;</code>
     */
    int getMGroupId();

    /**
     * <code>optional string m_iconPath = 7;</code>
     */
    boolean hasMIconPath();
    /**
     * <code>optional string m_iconPath = 7;</code>
     */
    java.lang.String getMIconPath();
    /**
     * <code>optional string m_iconPath = 7;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIconPathBytes();
  }
  /**
   * <pre>
   *分组下的资源信息
   * </pre>
   *
   * Protobuf type {@code DataFactory.sceneContext}
   */
  public  static final class sceneContext extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.sceneContext)
      sceneContextOrBuilder {
    // Use sceneContext.newBuilder() to construct.
    private sceneContext(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private sceneContext() {
      mName_ = "";
      mFilePath_ = "";
      mSceneMode_ = 0;
      mTotalTime_ = 0L;
      mSceneType_ = 0;
      mGroupId_ = 0;
      mIconPath_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private sceneContext(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mName_ = bs;
              break;
            }
            case 18: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              mFilePath_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              mSceneMode_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              mTotalTime_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              mSceneType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mGroupId_ = input.readInt32();
              break;
            }
            case 58: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              mIconPath_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_sceneContext_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_sceneContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.sceneContext.class, com.nibiru.creator.data.HotPotData.sceneContext.Builder.class);
    }

    private int bitField0_;
    public static final int M_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object mName_;
    /**
     * <pre>
     *场景资源名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public boolean hasMName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *场景资源名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public java.lang.String getMName() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *场景资源名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMNameBytes() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_FILEPATH_FIELD_NUMBER = 2;
    private volatile java.lang.Object mFilePath_;
    /**
     * <pre>
     *资源路径	
     * </pre>
     *
     * <code>optional string m_filePath = 2;</code>
     */
    public boolean hasMFilePath() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *资源路径	
     * </pre>
     *
     * <code>optional string m_filePath = 2;</code>
     */
    public java.lang.String getMFilePath() {
      java.lang.Object ref = mFilePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mFilePath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *资源路径	
     * </pre>
     *
     * <code>optional string m_filePath = 2;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMFilePathBytes() {
      java.lang.Object ref = mFilePath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mFilePath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_SCENEMODE_FIELD_NUMBER = 3;
    private int mSceneMode_;
    /**
     * <pre>
     *资源应用模式（0:2D,1:VR）
     * </pre>
     *
     * <code>optional int32 m_sceneMode = 3;</code>
     */
    public boolean hasMSceneMode() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *资源应用模式（0:2D,1:VR）
     * </pre>
     *
     * <code>optional int32 m_sceneMode = 3;</code>
     */
    public int getMSceneMode() {
      return mSceneMode_;
    }

    public static final int M_TOTALTIME_FIELD_NUMBER = 4;
    private long mTotalTime_;
    /**
     * <pre>
     *资源时长（图片为0）
     * </pre>
     *
     * <code>optional int64 m_totalTime = 4;</code>
     */
    public boolean hasMTotalTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *资源时长（图片为0）
     * </pre>
     *
     * <code>optional int64 m_totalTime = 4;</code>
     */
    public long getMTotalTime() {
      return mTotalTime_;
    }

    public static final int M_SCENETYPE_FIELD_NUMBER = 5;
    private int mSceneType_;
    /**
     * <pre>
     *资源类型（0:Image, 1:Video）
     * </pre>
     *
     * <code>optional int32 m_sceneType = 5;</code>
     */
    public boolean hasMSceneType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *资源类型（0:Image, 1:Video）
     * </pre>
     *
     * <code>optional int32 m_sceneType = 5;</code>
     */
    public int getMSceneType() {
      return mSceneType_;
    }

    public static final int M_GROUPID_FIELD_NUMBER = 6;
    private int mGroupId_;
    /**
     * <pre>
     *资源所在分组id
     * </pre>
     *
     * <code>optional int32 m_groupId = 6;</code>
     */
    public boolean hasMGroupId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *资源所在分组id
     * </pre>
     *
     * <code>optional int32 m_groupId = 6;</code>
     */
    public int getMGroupId() {
      return mGroupId_;
    }

    public static final int M_ICONPATH_FIELD_NUMBER = 7;
    private volatile java.lang.Object mIconPath_;
    /**
     * <code>optional string m_iconPath = 7;</code>
     */
    public boolean hasMIconPath() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional string m_iconPath = 7;</code>
     */
    public java.lang.String getMIconPath() {
      java.lang.Object ref = mIconPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mIconPath_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string m_iconPath = 7;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIconPathBytes() {
      java.lang.Object ref = mIconPath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mIconPath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 2, mFilePath_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, mSceneMode_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, mTotalTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, mSceneType_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, mGroupId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 7, mIconPath_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(2, mFilePath_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(3, mSceneMode_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(4, mTotalTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(5, mSceneType_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(6, mGroupId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(7, mIconPath_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.sceneContext)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.sceneContext other = (com.nibiru.creator.data.HotPotData.sceneContext) obj;

      boolean result = true;
      result = result && (hasMName() == other.hasMName());
      if (hasMName()) {
        result = result && getMName()
            .equals(other.getMName());
      }
      result = result && (hasMFilePath() == other.hasMFilePath());
      if (hasMFilePath()) {
        result = result && getMFilePath()
            .equals(other.getMFilePath());
      }
      result = result && (hasMSceneMode() == other.hasMSceneMode());
      if (hasMSceneMode()) {
        result = result && (getMSceneMode()
            == other.getMSceneMode());
      }
      result = result && (hasMTotalTime() == other.hasMTotalTime());
      if (hasMTotalTime()) {
        result = result && (getMTotalTime()
            == other.getMTotalTime());
      }
      result = result && (hasMSceneType() == other.hasMSceneType());
      if (hasMSceneType()) {
        result = result && (getMSceneType()
            == other.getMSceneType());
      }
      result = result && (hasMGroupId() == other.hasMGroupId());
      if (hasMGroupId()) {
        result = result && (getMGroupId()
            == other.getMGroupId());
      }
      result = result && (hasMIconPath() == other.hasMIconPath());
      if (hasMIconPath()) {
        result = result && getMIconPath()
            .equals(other.getMIconPath());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMName()) {
        hash = (37 * hash) + M_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getMName().hashCode();
      }
      if (hasMFilePath()) {
        hash = (37 * hash) + M_FILEPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMFilePath().hashCode();
      }
      if (hasMSceneMode()) {
        hash = (37 * hash) + M_SCENEMODE_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneMode();
      }
      if (hasMTotalTime()) {
        hash = (37 * hash) + M_TOTALTIME_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getMTotalTime());
      }
      if (hasMSceneType()) {
        hash = (37 * hash) + M_SCENETYPE_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneType();
      }
      if (hasMGroupId()) {
        hash = (37 * hash) + M_GROUPID_FIELD_NUMBER;
        hash = (53 * hash) + getMGroupId();
      }
      if (hasMIconPath()) {
        hash = (37 * hash) + M_ICONPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMIconPath().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.sceneContext parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.sceneContext parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.sceneContext parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.sceneContext parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.sceneContext parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.sceneContext parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.sceneContext parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.sceneContext parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.sceneContext parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.sceneContext parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.sceneContext prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *分组下的资源信息
     * </pre>
     *
     * Protobuf type {@code DataFactory.sceneContext}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.sceneContext)
        com.nibiru.creator.data.HotPotData.sceneContextOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_sceneContext_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_sceneContext_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.sceneContext.class, com.nibiru.creator.data.HotPotData.sceneContext.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.sceneContext.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mFilePath_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        mSceneMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        mTotalTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        mSceneType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mGroupId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        mIconPath_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_sceneContext_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.sceneContext getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.sceneContext.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.sceneContext build() {
        com.nibiru.creator.data.HotPotData.sceneContext result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.sceneContext buildPartial() {
        com.nibiru.creator.data.HotPotData.sceneContext result = new com.nibiru.creator.data.HotPotData.sceneContext(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mName_ = mName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mFilePath_ = mFilePath_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mSceneMode_ = mSceneMode_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mTotalTime_ = mTotalTime_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mSceneType_ = mSceneType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mGroupId_ = mGroupId_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mIconPath_ = mIconPath_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.sceneContext) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.sceneContext)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.sceneContext other) {
        if (other == com.nibiru.creator.data.HotPotData.sceneContext.getDefaultInstance()) return this;
        if (other.hasMName()) {
          bitField0_ |= 0x00000001;
          mName_ = other.mName_;
          onChanged();
        }
        if (other.hasMFilePath()) {
          bitField0_ |= 0x00000002;
          mFilePath_ = other.mFilePath_;
          onChanged();
        }
        if (other.hasMSceneMode()) {
          setMSceneMode(other.getMSceneMode());
        }
        if (other.hasMTotalTime()) {
          setMTotalTime(other.getMTotalTime());
        }
        if (other.hasMSceneType()) {
          setMSceneType(other.getMSceneType());
        }
        if (other.hasMGroupId()) {
          setMGroupId(other.getMGroupId());
        }
        if (other.hasMIconPath()) {
          bitField0_ |= 0x00000040;
          mIconPath_ = other.mIconPath_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.sceneContext parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.sceneContext) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mName_ = "";
      /**
       * <pre>
       *场景资源名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public boolean hasMName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *场景资源名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public java.lang.String getMName() {
        java.lang.Object ref = mName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *场景资源名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMNameBytes() {
        java.lang.Object ref = mName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *场景资源名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder setMName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景资源名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder clearMName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mName_ = getDefaultInstance().getMName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景资源名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder setMNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mFilePath_ = "";
      /**
       * <pre>
       *资源路径	
       * </pre>
       *
       * <code>optional string m_filePath = 2;</code>
       */
      public boolean hasMFilePath() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *资源路径	
       * </pre>
       *
       * <code>optional string m_filePath = 2;</code>
       */
      public java.lang.String getMFilePath() {
        java.lang.Object ref = mFilePath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mFilePath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *资源路径	
       * </pre>
       *
       * <code>optional string m_filePath = 2;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMFilePathBytes() {
        java.lang.Object ref = mFilePath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mFilePath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *资源路径	
       * </pre>
       *
       * <code>optional string m_filePath = 2;</code>
       */
      public Builder setMFilePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mFilePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *资源路径	
       * </pre>
       *
       * <code>optional string m_filePath = 2;</code>
       */
      public Builder clearMFilePath() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mFilePath_ = getDefaultInstance().getMFilePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *资源路径	
       * </pre>
       *
       * <code>optional string m_filePath = 2;</code>
       */
      public Builder setMFilePathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mFilePath_ = value;
        onChanged();
        return this;
      }

      private int mSceneMode_ ;
      /**
       * <pre>
       *资源应用模式（0:2D,1:VR）
       * </pre>
       *
       * <code>optional int32 m_sceneMode = 3;</code>
       */
      public boolean hasMSceneMode() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *资源应用模式（0:2D,1:VR）
       * </pre>
       *
       * <code>optional int32 m_sceneMode = 3;</code>
       */
      public int getMSceneMode() {
        return mSceneMode_;
      }
      /**
       * <pre>
       *资源应用模式（0:2D,1:VR）
       * </pre>
       *
       * <code>optional int32 m_sceneMode = 3;</code>
       */
      public Builder setMSceneMode(int value) {
        bitField0_ |= 0x00000004;
        mSceneMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *资源应用模式（0:2D,1:VR）
       * </pre>
       *
       * <code>optional int32 m_sceneMode = 3;</code>
       */
      public Builder clearMSceneMode() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mSceneMode_ = 0;
        onChanged();
        return this;
      }

      private long mTotalTime_ ;
      /**
       * <pre>
       *资源时长（图片为0）
       * </pre>
       *
       * <code>optional int64 m_totalTime = 4;</code>
       */
      public boolean hasMTotalTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *资源时长（图片为0）
       * </pre>
       *
       * <code>optional int64 m_totalTime = 4;</code>
       */
      public long getMTotalTime() {
        return mTotalTime_;
      }
      /**
       * <pre>
       *资源时长（图片为0）
       * </pre>
       *
       * <code>optional int64 m_totalTime = 4;</code>
       */
      public Builder setMTotalTime(long value) {
        bitField0_ |= 0x00000008;
        mTotalTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *资源时长（图片为0）
       * </pre>
       *
       * <code>optional int64 m_totalTime = 4;</code>
       */
      public Builder clearMTotalTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mTotalTime_ = 0L;
        onChanged();
        return this;
      }

      private int mSceneType_ ;
      /**
       * <pre>
       *资源类型（0:Image, 1:Video）
       * </pre>
       *
       * <code>optional int32 m_sceneType = 5;</code>
       */
      public boolean hasMSceneType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *资源类型（0:Image, 1:Video）
       * </pre>
       *
       * <code>optional int32 m_sceneType = 5;</code>
       */
      public int getMSceneType() {
        return mSceneType_;
      }
      /**
       * <pre>
       *资源类型（0:Image, 1:Video）
       * </pre>
       *
       * <code>optional int32 m_sceneType = 5;</code>
       */
      public Builder setMSceneType(int value) {
        bitField0_ |= 0x00000010;
        mSceneType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *资源类型（0:Image, 1:Video）
       * </pre>
       *
       * <code>optional int32 m_sceneType = 5;</code>
       */
      public Builder clearMSceneType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mSceneType_ = 0;
        onChanged();
        return this;
      }

      private int mGroupId_ ;
      /**
       * <pre>
       *资源所在分组id
       * </pre>
       *
       * <code>optional int32 m_groupId = 6;</code>
       */
      public boolean hasMGroupId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *资源所在分组id
       * </pre>
       *
       * <code>optional int32 m_groupId = 6;</code>
       */
      public int getMGroupId() {
        return mGroupId_;
      }
      /**
       * <pre>
       *资源所在分组id
       * </pre>
       *
       * <code>optional int32 m_groupId = 6;</code>
       */
      public Builder setMGroupId(int value) {
        bitField0_ |= 0x00000020;
        mGroupId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *资源所在分组id
       * </pre>
       *
       * <code>optional int32 m_groupId = 6;</code>
       */
      public Builder clearMGroupId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mGroupId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mIconPath_ = "";
      /**
       * <code>optional string m_iconPath = 7;</code>
       */
      public boolean hasMIconPath() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string m_iconPath = 7;</code>
       */
      public java.lang.String getMIconPath() {
        java.lang.Object ref = mIconPath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mIconPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string m_iconPath = 7;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIconPathBytes() {
        java.lang.Object ref = mIconPath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mIconPath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string m_iconPath = 7;</code>
       */
      public Builder setMIconPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mIconPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string m_iconPath = 7;</code>
       */
      public Builder clearMIconPath() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mIconPath_ = getDefaultInstance().getMIconPath();
        onChanged();
        return this;
      }
      /**
       * <code>optional string m_iconPath = 7;</code>
       */
      public Builder setMIconPathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        mIconPath_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.sceneContext)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.sceneContext)
    private static final com.nibiru.creator.data.HotPotData.sceneContext DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.sceneContext();
    }

    public static com.nibiru.creator.data.HotPotData.sceneContext getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<sceneContext>
        PARSER = new com.nibiru.protobuf.AbstractParser<sceneContext>() {
      public sceneContext parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new sceneContext(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<sceneContext> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<sceneContext> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.sceneContext getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface sceneGroupOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.sceneGroup)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *分组名称
     * </pre>
     *
     * <code>optional string m_groupName = 1;</code>
     */
    boolean hasMGroupName();
    /**
     * <pre>
     *分组名称
     * </pre>
     *
     * <code>optional string m_groupName = 1;</code>
     */
    java.lang.String getMGroupName();
    /**
     * <pre>
     *分组名称
     * </pre>
     *
     * <code>optional string m_groupName = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMGroupNameBytes();

    /**
     * <pre>
     *分组id
     * </pre>
     *
     * <code>optional int32 m_id = 2;</code>
     */
    boolean hasMId();
    /**
     * <pre>
     *分组id
     * </pre>
     *
     * <code>optional int32 m_id = 2;</code>
     */
    int getMId();

    /**
     * <pre>
     *分组下已添加的场景id
     * </pre>
     *
     * <code>repeated int32 m_sceneIds = 3;</code>
     */
    java.util.List<java.lang.Integer> getMSceneIdsList();
    /**
     * <pre>
     *分组下已添加的场景id
     * </pre>
     *
     * <code>repeated int32 m_sceneIds = 3;</code>
     */
    int getMSceneIdsCount();
    /**
     * <pre>
     *分组下已添加的场景id
     * </pre>
     *
     * <code>repeated int32 m_sceneIds = 3;</code>
     */
    int getMSceneIds(int index);

    /**
     * <pre>
     *分组下资源信息
     * </pre>
     *
     * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.sceneContext> 
        getMSceneContextsList();
    /**
     * <pre>
     *分组下资源信息
     * </pre>
     *
     * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.sceneContext getMSceneContexts(int index);
    /**
     * <pre>
     *分组下资源信息
     * </pre>
     *
     * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
     */
    int getMSceneContextsCount();
    /**
     * <pre>
     *分组下资源信息
     * </pre>
     *
     * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.sceneContextOrBuilder> 
        getMSceneContextsOrBuilderList();
    /**
     * <pre>
     *分组下资源信息
     * </pre>
     *
     * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.sceneContextOrBuilder getMSceneContextsOrBuilder(
        int index);

    /**
     * <pre>
     *是否是默认分组
     * </pre>
     *
     * <code>optional bool m_defaultGroup = 5;</code>
     */
    boolean hasMDefaultGroup();
    /**
     * <pre>
     *是否是默认分组
     * </pre>
     *
     * <code>optional bool m_defaultGroup = 5;</code>
     */
    boolean getMDefaultGroup();
  }
  /**
   * <pre>
   *场景分组
   * </pre>
   *
   * Protobuf type {@code DataFactory.sceneGroup}
   */
  public  static final class sceneGroup extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.sceneGroup)
      sceneGroupOrBuilder {
    // Use sceneGroup.newBuilder() to construct.
    private sceneGroup(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private sceneGroup() {
      mGroupName_ = "";
      mId_ = 0;
      mSceneIds_ = java.util.Collections.emptyList();
      mSceneContexts_ = java.util.Collections.emptyList();
      mDefaultGroup_ = false;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private sceneGroup(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mGroupName_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mId_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                mSceneIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              mSceneIds_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                mSceneIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                mSceneIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                mSceneContexts_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.sceneContext>();
                mutable_bitField0_ |= 0x00000008;
              }
              mSceneContexts_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.sceneContext.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              mDefaultGroup_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          mSceneIds_ = java.util.Collections.unmodifiableList(mSceneIds_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          mSceneContexts_ = java.util.Collections.unmodifiableList(mSceneContexts_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_sceneGroup_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_sceneGroup_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.sceneGroup.class, com.nibiru.creator.data.HotPotData.sceneGroup.Builder.class);
    }

    private int bitField0_;
    public static final int M_GROUPNAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object mGroupName_;
    /**
     * <pre>
     *分组名称
     * </pre>
     *
     * <code>optional string m_groupName = 1;</code>
     */
    public boolean hasMGroupName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *分组名称
     * </pre>
     *
     * <code>optional string m_groupName = 1;</code>
     */
    public java.lang.String getMGroupName() {
      java.lang.Object ref = mGroupName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mGroupName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *分组名称
     * </pre>
     *
     * <code>optional string m_groupName = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMGroupNameBytes() {
      java.lang.Object ref = mGroupName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mGroupName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ID_FIELD_NUMBER = 2;
    private int mId_;
    /**
     * <pre>
     *分组id
     * </pre>
     *
     * <code>optional int32 m_id = 2;</code>
     */
    public boolean hasMId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *分组id
     * </pre>
     *
     * <code>optional int32 m_id = 2;</code>
     */
    public int getMId() {
      return mId_;
    }

    public static final int M_SCENEIDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> mSceneIds_;
    /**
     * <pre>
     *分组下已添加的场景id
     * </pre>
     *
     * <code>repeated int32 m_sceneIds = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getMSceneIdsList() {
      return mSceneIds_;
    }
    /**
     * <pre>
     *分组下已添加的场景id
     * </pre>
     *
     * <code>repeated int32 m_sceneIds = 3;</code>
     */
    public int getMSceneIdsCount() {
      return mSceneIds_.size();
    }
    /**
     * <pre>
     *分组下已添加的场景id
     * </pre>
     *
     * <code>repeated int32 m_sceneIds = 3;</code>
     */
    public int getMSceneIds(int index) {
      return mSceneIds_.get(index);
    }

    public static final int M_SCENECONTEXTS_FIELD_NUMBER = 4;
    private java.util.List<com.nibiru.creator.data.HotPotData.sceneContext> mSceneContexts_;
    /**
     * <pre>
     *分组下资源信息
     * </pre>
     *
     * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.sceneContext> getMSceneContextsList() {
      return mSceneContexts_;
    }
    /**
     * <pre>
     *分组下资源信息
     * </pre>
     *
     * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.sceneContextOrBuilder> 
        getMSceneContextsOrBuilderList() {
      return mSceneContexts_;
    }
    /**
     * <pre>
     *分组下资源信息
     * </pre>
     *
     * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
     */
    public int getMSceneContextsCount() {
      return mSceneContexts_.size();
    }
    /**
     * <pre>
     *分组下资源信息
     * </pre>
     *
     * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.sceneContext getMSceneContexts(int index) {
      return mSceneContexts_.get(index);
    }
    /**
     * <pre>
     *分组下资源信息
     * </pre>
     *
     * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.sceneContextOrBuilder getMSceneContextsOrBuilder(
        int index) {
      return mSceneContexts_.get(index);
    }

    public static final int M_DEFAULTGROUP_FIELD_NUMBER = 5;
    private boolean mDefaultGroup_;
    /**
     * <pre>
     *是否是默认分组
     * </pre>
     *
     * <code>optional bool m_defaultGroup = 5;</code>
     */
    public boolean hasMDefaultGroup() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *是否是默认分组
     * </pre>
     *
     * <code>optional bool m_defaultGroup = 5;</code>
     */
    public boolean getMDefaultGroup() {
      return mDefaultGroup_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mGroupName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mId_);
      }
      for (int i = 0; i < mSceneIds_.size(); i++) {
        output.writeInt32(3, mSceneIds_.get(i));
      }
      for (int i = 0; i < mSceneContexts_.size(); i++) {
        output.writeMessage(4, mSceneContexts_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(5, mDefaultGroup_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mGroupName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(2, mId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mSceneIds_.size(); i++) {
          dataSize += com.nibiru.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mSceneIds_.get(i));
        }
        size += dataSize;
        size += 1 * getMSceneIdsList().size();
      }
      for (int i = 0; i < mSceneContexts_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(4, mSceneContexts_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeBoolSize(5, mDefaultGroup_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.sceneGroup)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.sceneGroup other = (com.nibiru.creator.data.HotPotData.sceneGroup) obj;

      boolean result = true;
      result = result && (hasMGroupName() == other.hasMGroupName());
      if (hasMGroupName()) {
        result = result && getMGroupName()
            .equals(other.getMGroupName());
      }
      result = result && (hasMId() == other.hasMId());
      if (hasMId()) {
        result = result && (getMId()
            == other.getMId());
      }
      result = result && getMSceneIdsList()
          .equals(other.getMSceneIdsList());
      result = result && getMSceneContextsList()
          .equals(other.getMSceneContextsList());
      result = result && (hasMDefaultGroup() == other.hasMDefaultGroup());
      if (hasMDefaultGroup()) {
        result = result && (getMDefaultGroup()
            == other.getMDefaultGroup());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMGroupName()) {
        hash = (37 * hash) + M_GROUPNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMGroupName().hashCode();
      }
      if (hasMId()) {
        hash = (37 * hash) + M_ID_FIELD_NUMBER;
        hash = (53 * hash) + getMId();
      }
      if (getMSceneIdsCount() > 0) {
        hash = (37 * hash) + M_SCENEIDS_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneIdsList().hashCode();
      }
      if (getMSceneContextsCount() > 0) {
        hash = (37 * hash) + M_SCENECONTEXTS_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneContextsList().hashCode();
      }
      if (hasMDefaultGroup()) {
        hash = (37 * hash) + M_DEFAULTGROUP_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashBoolean(
            getMDefaultGroup());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.sceneGroup parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.sceneGroup parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.sceneGroup parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.sceneGroup parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.sceneGroup parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.sceneGroup parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.sceneGroup parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.sceneGroup parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.sceneGroup parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.sceneGroup parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.sceneGroup prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *场景分组
     * </pre>
     *
     * Protobuf type {@code DataFactory.sceneGroup}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.sceneGroup)
        com.nibiru.creator.data.HotPotData.sceneGroupOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_sceneGroup_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_sceneGroup_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.sceneGroup.class, com.nibiru.creator.data.HotPotData.sceneGroup.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.sceneGroup.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMSceneContextsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mGroupName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mSceneIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        if (mSceneContextsBuilder_ == null) {
          mSceneContexts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          mSceneContextsBuilder_.clear();
        }
        mDefaultGroup_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_sceneGroup_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.sceneGroup getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.sceneGroup.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.sceneGroup build() {
        com.nibiru.creator.data.HotPotData.sceneGroup result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.sceneGroup buildPartial() {
        com.nibiru.creator.data.HotPotData.sceneGroup result = new com.nibiru.creator.data.HotPotData.sceneGroup(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mGroupName_ = mGroupName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mId_ = mId_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          mSceneIds_ = java.util.Collections.unmodifiableList(mSceneIds_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.mSceneIds_ = mSceneIds_;
        if (mSceneContextsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            mSceneContexts_ = java.util.Collections.unmodifiableList(mSceneContexts_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.mSceneContexts_ = mSceneContexts_;
        } else {
          result.mSceneContexts_ = mSceneContextsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mDefaultGroup_ = mDefaultGroup_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.sceneGroup) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.sceneGroup)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.sceneGroup other) {
        if (other == com.nibiru.creator.data.HotPotData.sceneGroup.getDefaultInstance()) return this;
        if (other.hasMGroupName()) {
          bitField0_ |= 0x00000001;
          mGroupName_ = other.mGroupName_;
          onChanged();
        }
        if (other.hasMId()) {
          setMId(other.getMId());
        }
        if (!other.mSceneIds_.isEmpty()) {
          if (mSceneIds_.isEmpty()) {
            mSceneIds_ = other.mSceneIds_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureMSceneIdsIsMutable();
            mSceneIds_.addAll(other.mSceneIds_);
          }
          onChanged();
        }
        if (mSceneContextsBuilder_ == null) {
          if (!other.mSceneContexts_.isEmpty()) {
            if (mSceneContexts_.isEmpty()) {
              mSceneContexts_ = other.mSceneContexts_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMSceneContextsIsMutable();
              mSceneContexts_.addAll(other.mSceneContexts_);
            }
            onChanged();
          }
        } else {
          if (!other.mSceneContexts_.isEmpty()) {
            if (mSceneContextsBuilder_.isEmpty()) {
              mSceneContextsBuilder_.dispose();
              mSceneContextsBuilder_ = null;
              mSceneContexts_ = other.mSceneContexts_;
              bitField0_ = (bitField0_ & ~0x00000008);
              mSceneContextsBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMSceneContextsFieldBuilder() : null;
            } else {
              mSceneContextsBuilder_.addAllMessages(other.mSceneContexts_);
            }
          }
        }
        if (other.hasMDefaultGroup()) {
          setMDefaultGroup(other.getMDefaultGroup());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.sceneGroup parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.sceneGroup) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mGroupName_ = "";
      /**
       * <pre>
       *分组名称
       * </pre>
       *
       * <code>optional string m_groupName = 1;</code>
       */
      public boolean hasMGroupName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *分组名称
       * </pre>
       *
       * <code>optional string m_groupName = 1;</code>
       */
      public java.lang.String getMGroupName() {
        java.lang.Object ref = mGroupName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mGroupName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *分组名称
       * </pre>
       *
       * <code>optional string m_groupName = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMGroupNameBytes() {
        java.lang.Object ref = mGroupName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mGroupName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *分组名称
       * </pre>
       *
       * <code>optional string m_groupName = 1;</code>
       */
      public Builder setMGroupName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mGroupName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *分组名称
       * </pre>
       *
       * <code>optional string m_groupName = 1;</code>
       */
      public Builder clearMGroupName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mGroupName_ = getDefaultInstance().getMGroupName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *分组名称
       * </pre>
       *
       * <code>optional string m_groupName = 1;</code>
       */
      public Builder setMGroupNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mGroupName_ = value;
        onChanged();
        return this;
      }

      private int mId_ ;
      /**
       * <pre>
       *分组id
       * </pre>
       *
       * <code>optional int32 m_id = 2;</code>
       */
      public boolean hasMId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *分组id
       * </pre>
       *
       * <code>optional int32 m_id = 2;</code>
       */
      public int getMId() {
        return mId_;
      }
      /**
       * <pre>
       *分组id
       * </pre>
       *
       * <code>optional int32 m_id = 2;</code>
       */
      public Builder setMId(int value) {
        bitField0_ |= 0x00000002;
        mId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *分组id
       * </pre>
       *
       * <code>optional int32 m_id = 2;</code>
       */
      public Builder clearMId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> mSceneIds_ = java.util.Collections.emptyList();
      private void ensureMSceneIdsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          mSceneIds_ = new java.util.ArrayList<java.lang.Integer>(mSceneIds_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       *分组下已添加的场景id
       * </pre>
       *
       * <code>repeated int32 m_sceneIds = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getMSceneIdsList() {
        return java.util.Collections.unmodifiableList(mSceneIds_);
      }
      /**
       * <pre>
       *分组下已添加的场景id
       * </pre>
       *
       * <code>repeated int32 m_sceneIds = 3;</code>
       */
      public int getMSceneIdsCount() {
        return mSceneIds_.size();
      }
      /**
       * <pre>
       *分组下已添加的场景id
       * </pre>
       *
       * <code>repeated int32 m_sceneIds = 3;</code>
       */
      public int getMSceneIds(int index) {
        return mSceneIds_.get(index);
      }
      /**
       * <pre>
       *分组下已添加的场景id
       * </pre>
       *
       * <code>repeated int32 m_sceneIds = 3;</code>
       */
      public Builder setMSceneIds(
          int index, int value) {
        ensureMSceneIdsIsMutable();
        mSceneIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *分组下已添加的场景id
       * </pre>
       *
       * <code>repeated int32 m_sceneIds = 3;</code>
       */
      public Builder addMSceneIds(int value) {
        ensureMSceneIdsIsMutable();
        mSceneIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *分组下已添加的场景id
       * </pre>
       *
       * <code>repeated int32 m_sceneIds = 3;</code>
       */
      public Builder addAllMSceneIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMSceneIdsIsMutable();
        com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
            values, mSceneIds_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *分组下已添加的场景id
       * </pre>
       *
       * <code>repeated int32 m_sceneIds = 3;</code>
       */
      public Builder clearMSceneIds() {
        mSceneIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.sceneContext> mSceneContexts_ =
        java.util.Collections.emptyList();
      private void ensureMSceneContextsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          mSceneContexts_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.sceneContext>(mSceneContexts_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.sceneContext, com.nibiru.creator.data.HotPotData.sceneContext.Builder, com.nibiru.creator.data.HotPotData.sceneContextOrBuilder> mSceneContextsBuilder_;

      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.sceneContext> getMSceneContextsList() {
        if (mSceneContextsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mSceneContexts_);
        } else {
          return mSceneContextsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public int getMSceneContextsCount() {
        if (mSceneContextsBuilder_ == null) {
          return mSceneContexts_.size();
        } else {
          return mSceneContextsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.sceneContext getMSceneContexts(int index) {
        if (mSceneContextsBuilder_ == null) {
          return mSceneContexts_.get(index);
        } else {
          return mSceneContextsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public Builder setMSceneContexts(
          int index, com.nibiru.creator.data.HotPotData.sceneContext value) {
        if (mSceneContextsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSceneContextsIsMutable();
          mSceneContexts_.set(index, value);
          onChanged();
        } else {
          mSceneContextsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public Builder setMSceneContexts(
          int index, com.nibiru.creator.data.HotPotData.sceneContext.Builder builderForValue) {
        if (mSceneContextsBuilder_ == null) {
          ensureMSceneContextsIsMutable();
          mSceneContexts_.set(index, builderForValue.build());
          onChanged();
        } else {
          mSceneContextsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public Builder addMSceneContexts(com.nibiru.creator.data.HotPotData.sceneContext value) {
        if (mSceneContextsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSceneContextsIsMutable();
          mSceneContexts_.add(value);
          onChanged();
        } else {
          mSceneContextsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public Builder addMSceneContexts(
          int index, com.nibiru.creator.data.HotPotData.sceneContext value) {
        if (mSceneContextsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSceneContextsIsMutable();
          mSceneContexts_.add(index, value);
          onChanged();
        } else {
          mSceneContextsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public Builder addMSceneContexts(
          com.nibiru.creator.data.HotPotData.sceneContext.Builder builderForValue) {
        if (mSceneContextsBuilder_ == null) {
          ensureMSceneContextsIsMutable();
          mSceneContexts_.add(builderForValue.build());
          onChanged();
        } else {
          mSceneContextsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public Builder addMSceneContexts(
          int index, com.nibiru.creator.data.HotPotData.sceneContext.Builder builderForValue) {
        if (mSceneContextsBuilder_ == null) {
          ensureMSceneContextsIsMutable();
          mSceneContexts_.add(index, builderForValue.build());
          onChanged();
        } else {
          mSceneContextsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public Builder addAllMSceneContexts(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.sceneContext> values) {
        if (mSceneContextsBuilder_ == null) {
          ensureMSceneContextsIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mSceneContexts_);
          onChanged();
        } else {
          mSceneContextsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public Builder clearMSceneContexts() {
        if (mSceneContextsBuilder_ == null) {
          mSceneContexts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          mSceneContextsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public Builder removeMSceneContexts(int index) {
        if (mSceneContextsBuilder_ == null) {
          ensureMSceneContextsIsMutable();
          mSceneContexts_.remove(index);
          onChanged();
        } else {
          mSceneContextsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.sceneContext.Builder getMSceneContextsBuilder(
          int index) {
        return getMSceneContextsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.sceneContextOrBuilder getMSceneContextsOrBuilder(
          int index) {
        if (mSceneContextsBuilder_ == null) {
          return mSceneContexts_.get(index);  } else {
          return mSceneContextsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.sceneContextOrBuilder> 
           getMSceneContextsOrBuilderList() {
        if (mSceneContextsBuilder_ != null) {
          return mSceneContextsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mSceneContexts_);
        }
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.sceneContext.Builder addMSceneContextsBuilder() {
        return getMSceneContextsFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.sceneContext.getDefaultInstance());
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.sceneContext.Builder addMSceneContextsBuilder(
          int index) {
        return getMSceneContextsFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.sceneContext.getDefaultInstance());
      }
      /**
       * <pre>
       *分组下资源信息
       * </pre>
       *
       * <code>repeated .DataFactory.sceneContext m_sceneContexts = 4;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.sceneContext.Builder> 
           getMSceneContextsBuilderList() {
        return getMSceneContextsFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.sceneContext, com.nibiru.creator.data.HotPotData.sceneContext.Builder, com.nibiru.creator.data.HotPotData.sceneContextOrBuilder> 
          getMSceneContextsFieldBuilder() {
        if (mSceneContextsBuilder_ == null) {
          mSceneContextsBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.sceneContext, com.nibiru.creator.data.HotPotData.sceneContext.Builder, com.nibiru.creator.data.HotPotData.sceneContextOrBuilder>(
                  mSceneContexts_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          mSceneContexts_ = null;
        }
        return mSceneContextsBuilder_;
      }

      private boolean mDefaultGroup_ ;
      /**
       * <pre>
       *是否是默认分组
       * </pre>
       *
       * <code>optional bool m_defaultGroup = 5;</code>
       */
      public boolean hasMDefaultGroup() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *是否是默认分组
       * </pre>
       *
       * <code>optional bool m_defaultGroup = 5;</code>
       */
      public boolean getMDefaultGroup() {
        return mDefaultGroup_;
      }
      /**
       * <pre>
       *是否是默认分组
       * </pre>
       *
       * <code>optional bool m_defaultGroup = 5;</code>
       */
      public Builder setMDefaultGroup(boolean value) {
        bitField0_ |= 0x00000010;
        mDefaultGroup_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *是否是默认分组
       * </pre>
       *
       * <code>optional bool m_defaultGroup = 5;</code>
       */
      public Builder clearMDefaultGroup() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mDefaultGroup_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.sceneGroup)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.sceneGroup)
    private static final com.nibiru.creator.data.HotPotData.sceneGroup DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.sceneGroup();
    }

    public static com.nibiru.creator.data.HotPotData.sceneGroup getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<sceneGroup>
        PARSER = new com.nibiru.protobuf.AbstractParser<sceneGroup>() {
      public sceneGroup parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new sceneGroup(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<sceneGroup> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<sceneGroup> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.sceneGroup getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SubCategoryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.SubCategory)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    boolean hasMName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    java.lang.String getMName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMNameBytes();

    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    boolean hasMIcon();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    java.lang.String getMIcon();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIconBytes();

    /**
     * <pre>
     *链接类型 链接到场景 0 全景图，1 图片，2 全景视频，3 视频  || 4 超链接类型
     * </pre>
     *
     * <code>optional int32 m_LinkType = 3;</code>
     */
    boolean hasMLinkType();
    /**
     * <pre>
     *链接类型 链接到场景 0 全景图，1 图片，2 全景视频，3 视频  || 4 超链接类型
     * </pre>
     *
     * <code>optional int32 m_LinkType = 3;</code>
     */
    int getMLinkType();

    /**
     * <pre>
     *链接场景id
     * </pre>
     *
     * <code>optional int32 m_SceneId = 4;</code>
     */
    boolean hasMSceneId();
    /**
     * <pre>
     *链接场景id
     * </pre>
     *
     * <code>optional int32 m_SceneId = 4;</code>
     */
    int getMSceneId();

    /**
     * <pre>
     *超链接
     * </pre>
     *
     * <code>optional string m_hyperlink = 5;</code>
     */
    boolean hasMHyperlink();
    /**
     * <pre>
     *超链接
     * </pre>
     *
     * <code>optional string m_hyperlink = 5;</code>
     */
    java.lang.String getMHyperlink();
    /**
     * <pre>
     *超链接
     * </pre>
     *
     * <code>optional string m_hyperlink = 5;</code>
     */
    com.nibiru.protobuf.ByteString
        getMHyperlinkBytes();

    /**
     * <pre>
     *指向分类id 
     * </pre>
     *
     * <code>optional int32 m_parentId = 6;</code>
     */
    boolean hasMParentId();
    /**
     * <pre>
     *指向分类id 
     * </pre>
     *
     * <code>optional int32 m_parentId = 6;</code>
     */
    int getMParentId();

    /**
     * <pre>
     *子分类id 
     * </pre>
     *
     * <code>optional int32 m_Id = 7;</code>
     */
    boolean hasMId();
    /**
     * <pre>
     *子分类id 
     * </pre>
     *
     * <code>optional int32 m_Id = 7;</code>
     */
    int getMId();

    /**
     * <pre>
     *店铺类型   0 店铺 ， 1 商场
     * </pre>
     *
     * <code>optional int32 m_Shoptype = 8;</code>
     */
    boolean hasMShoptype();
    /**
     * <pre>
     *店铺类型   0 店铺 ， 1 商场
     * </pre>
     *
     * <code>optional int32 m_Shoptype = 8;</code>
     */
    int getMShoptype();
  }
  /**
   * <pre>
   *子分类
   * </pre>
   *
   * Protobuf type {@code DataFactory.SubCategory}
   */
  public  static final class SubCategory extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.SubCategory)
      SubCategoryOrBuilder {
    // Use SubCategory.newBuilder() to construct.
    private SubCategory(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SubCategory() {
      mName_ = "";
      mIcon_ = "";
      mLinkType_ = 0;
      mSceneId_ = 0;
      mHyperlink_ = "";
      mParentId_ = 0;
      mId_ = 0;
      mShoptype_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SubCategory(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mName_ = bs;
              break;
            }
            case 18: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              mIcon_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              mLinkType_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              mSceneId_ = input.readInt32();
              break;
            }
            case 42: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              mHyperlink_ = bs;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mParentId_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              mId_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              mShoptype_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SubCategory_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SubCategory_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.SubCategory.class, com.nibiru.creator.data.HotPotData.SubCategory.Builder.class);
    }

    private int bitField0_;
    public static final int M_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object mName_;
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public boolean hasMName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public java.lang.String getMName() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMNameBytes() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ICON_FIELD_NUMBER = 2;
    private volatile java.lang.Object mIcon_;
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    public boolean hasMIcon() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    public java.lang.String getMIcon() {
      java.lang.Object ref = mIcon_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mIcon_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIconBytes() {
      java.lang.Object ref = mIcon_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mIcon_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_LINKTYPE_FIELD_NUMBER = 3;
    private int mLinkType_;
    /**
     * <pre>
     *链接类型 链接到场景 0 全景图，1 图片，2 全景视频，3 视频  || 4 超链接类型
     * </pre>
     *
     * <code>optional int32 m_LinkType = 3;</code>
     */
    public boolean hasMLinkType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *链接类型 链接到场景 0 全景图，1 图片，2 全景视频，3 视频  || 4 超链接类型
     * </pre>
     *
     * <code>optional int32 m_LinkType = 3;</code>
     */
    public int getMLinkType() {
      return mLinkType_;
    }

    public static final int M_SCENEID_FIELD_NUMBER = 4;
    private int mSceneId_;
    /**
     * <pre>
     *链接场景id
     * </pre>
     *
     * <code>optional int32 m_SceneId = 4;</code>
     */
    public boolean hasMSceneId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *链接场景id
     * </pre>
     *
     * <code>optional int32 m_SceneId = 4;</code>
     */
    public int getMSceneId() {
      return mSceneId_;
    }

    public static final int M_HYPERLINK_FIELD_NUMBER = 5;
    private volatile java.lang.Object mHyperlink_;
    /**
     * <pre>
     *超链接
     * </pre>
     *
     * <code>optional string m_hyperlink = 5;</code>
     */
    public boolean hasMHyperlink() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *超链接
     * </pre>
     *
     * <code>optional string m_hyperlink = 5;</code>
     */
    public java.lang.String getMHyperlink() {
      java.lang.Object ref = mHyperlink_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mHyperlink_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *超链接
     * </pre>
     *
     * <code>optional string m_hyperlink = 5;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMHyperlinkBytes() {
      java.lang.Object ref = mHyperlink_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mHyperlink_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_PARENTID_FIELD_NUMBER = 6;
    private int mParentId_;
    /**
     * <pre>
     *指向分类id 
     * </pre>
     *
     * <code>optional int32 m_parentId = 6;</code>
     */
    public boolean hasMParentId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *指向分类id 
     * </pre>
     *
     * <code>optional int32 m_parentId = 6;</code>
     */
    public int getMParentId() {
      return mParentId_;
    }

    public static final int M_ID_FIELD_NUMBER = 7;
    private int mId_;
    /**
     * <pre>
     *子分类id 
     * </pre>
     *
     * <code>optional int32 m_Id = 7;</code>
     */
    public boolean hasMId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *子分类id 
     * </pre>
     *
     * <code>optional int32 m_Id = 7;</code>
     */
    public int getMId() {
      return mId_;
    }

    public static final int M_SHOPTYPE_FIELD_NUMBER = 8;
    private int mShoptype_;
    /**
     * <pre>
     *店铺类型   0 店铺 ， 1 商场
     * </pre>
     *
     * <code>optional int32 m_Shoptype = 8;</code>
     */
    public boolean hasMShoptype() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *店铺类型   0 店铺 ， 1 商场
     * </pre>
     *
     * <code>optional int32 m_Shoptype = 8;</code>
     */
    public int getMShoptype() {
      return mShoptype_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 2, mIcon_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, mLinkType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, mSceneId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 5, mHyperlink_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, mParentId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, mId_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, mShoptype_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(2, mIcon_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(3, mLinkType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(4, mSceneId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(5, mHyperlink_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(6, mParentId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(7, mId_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(8, mShoptype_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.SubCategory)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.SubCategory other = (com.nibiru.creator.data.HotPotData.SubCategory) obj;

      boolean result = true;
      result = result && (hasMName() == other.hasMName());
      if (hasMName()) {
        result = result && getMName()
            .equals(other.getMName());
      }
      result = result && (hasMIcon() == other.hasMIcon());
      if (hasMIcon()) {
        result = result && getMIcon()
            .equals(other.getMIcon());
      }
      result = result && (hasMLinkType() == other.hasMLinkType());
      if (hasMLinkType()) {
        result = result && (getMLinkType()
            == other.getMLinkType());
      }
      result = result && (hasMSceneId() == other.hasMSceneId());
      if (hasMSceneId()) {
        result = result && (getMSceneId()
            == other.getMSceneId());
      }
      result = result && (hasMHyperlink() == other.hasMHyperlink());
      if (hasMHyperlink()) {
        result = result && getMHyperlink()
            .equals(other.getMHyperlink());
      }
      result = result && (hasMParentId() == other.hasMParentId());
      if (hasMParentId()) {
        result = result && (getMParentId()
            == other.getMParentId());
      }
      result = result && (hasMId() == other.hasMId());
      if (hasMId()) {
        result = result && (getMId()
            == other.getMId());
      }
      result = result && (hasMShoptype() == other.hasMShoptype());
      if (hasMShoptype()) {
        result = result && (getMShoptype()
            == other.getMShoptype());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMName()) {
        hash = (37 * hash) + M_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getMName().hashCode();
      }
      if (hasMIcon()) {
        hash = (37 * hash) + M_ICON_FIELD_NUMBER;
        hash = (53 * hash) + getMIcon().hashCode();
      }
      if (hasMLinkType()) {
        hash = (37 * hash) + M_LINKTYPE_FIELD_NUMBER;
        hash = (53 * hash) + getMLinkType();
      }
      if (hasMSceneId()) {
        hash = (37 * hash) + M_SCENEID_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneId();
      }
      if (hasMHyperlink()) {
        hash = (37 * hash) + M_HYPERLINK_FIELD_NUMBER;
        hash = (53 * hash) + getMHyperlink().hashCode();
      }
      if (hasMParentId()) {
        hash = (37 * hash) + M_PARENTID_FIELD_NUMBER;
        hash = (53 * hash) + getMParentId();
      }
      if (hasMId()) {
        hash = (37 * hash) + M_ID_FIELD_NUMBER;
        hash = (53 * hash) + getMId();
      }
      if (hasMShoptype()) {
        hash = (37 * hash) + M_SHOPTYPE_FIELD_NUMBER;
        hash = (53 * hash) + getMShoptype();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.SubCategory parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.SubCategory parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SubCategory parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.SubCategory parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SubCategory parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SubCategory parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SubCategory parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SubCategory parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SubCategory parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SubCategory parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.SubCategory prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *子分类
     * </pre>
     *
     * Protobuf type {@code DataFactory.SubCategory}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.SubCategory)
        com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SubCategory_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SubCategory_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.SubCategory.class, com.nibiru.creator.data.HotPotData.SubCategory.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.SubCategory.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mIcon_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        mLinkType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        mSceneId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        mHyperlink_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        mParentId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        mId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        mShoptype_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SubCategory_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.SubCategory getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.SubCategory.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.SubCategory build() {
        com.nibiru.creator.data.HotPotData.SubCategory result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.SubCategory buildPartial() {
        com.nibiru.creator.data.HotPotData.SubCategory result = new com.nibiru.creator.data.HotPotData.SubCategory(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mName_ = mName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mIcon_ = mIcon_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mLinkType_ = mLinkType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mSceneId_ = mSceneId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mHyperlink_ = mHyperlink_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mParentId_ = mParentId_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mId_ = mId_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mShoptype_ = mShoptype_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.SubCategory) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.SubCategory)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.SubCategory other) {
        if (other == com.nibiru.creator.data.HotPotData.SubCategory.getDefaultInstance()) return this;
        if (other.hasMName()) {
          bitField0_ |= 0x00000001;
          mName_ = other.mName_;
          onChanged();
        }
        if (other.hasMIcon()) {
          bitField0_ |= 0x00000002;
          mIcon_ = other.mIcon_;
          onChanged();
        }
        if (other.hasMLinkType()) {
          setMLinkType(other.getMLinkType());
        }
        if (other.hasMSceneId()) {
          setMSceneId(other.getMSceneId());
        }
        if (other.hasMHyperlink()) {
          bitField0_ |= 0x00000010;
          mHyperlink_ = other.mHyperlink_;
          onChanged();
        }
        if (other.hasMParentId()) {
          setMParentId(other.getMParentId());
        }
        if (other.hasMId()) {
          setMId(other.getMId());
        }
        if (other.hasMShoptype()) {
          setMShoptype(other.getMShoptype());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.SubCategory parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.SubCategory) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mName_ = "";
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public boolean hasMName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public java.lang.String getMName() {
        java.lang.Object ref = mName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMNameBytes() {
        java.lang.Object ref = mName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder setMName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder clearMName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mName_ = getDefaultInstance().getMName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder setMNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mIcon_ = "";
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public boolean hasMIcon() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public java.lang.String getMIcon() {
        java.lang.Object ref = mIcon_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mIcon_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIconBytes() {
        java.lang.Object ref = mIcon_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mIcon_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public Builder setMIcon(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mIcon_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public Builder clearMIcon() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mIcon_ = getDefaultInstance().getMIcon();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public Builder setMIconBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mIcon_ = value;
        onChanged();
        return this;
      }

      private int mLinkType_ ;
      /**
       * <pre>
       *链接类型 链接到场景 0 全景图，1 图片，2 全景视频，3 视频  || 4 超链接类型
       * </pre>
       *
       * <code>optional int32 m_LinkType = 3;</code>
       */
      public boolean hasMLinkType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *链接类型 链接到场景 0 全景图，1 图片，2 全景视频，3 视频  || 4 超链接类型
       * </pre>
       *
       * <code>optional int32 m_LinkType = 3;</code>
       */
      public int getMLinkType() {
        return mLinkType_;
      }
      /**
       * <pre>
       *链接类型 链接到场景 0 全景图，1 图片，2 全景视频，3 视频  || 4 超链接类型
       * </pre>
       *
       * <code>optional int32 m_LinkType = 3;</code>
       */
      public Builder setMLinkType(int value) {
        bitField0_ |= 0x00000004;
        mLinkType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *链接类型 链接到场景 0 全景图，1 图片，2 全景视频，3 视频  || 4 超链接类型
       * </pre>
       *
       * <code>optional int32 m_LinkType = 3;</code>
       */
      public Builder clearMLinkType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mLinkType_ = 0;
        onChanged();
        return this;
      }

      private int mSceneId_ ;
      /**
       * <pre>
       *链接场景id
       * </pre>
       *
       * <code>optional int32 m_SceneId = 4;</code>
       */
      public boolean hasMSceneId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *链接场景id
       * </pre>
       *
       * <code>optional int32 m_SceneId = 4;</code>
       */
      public int getMSceneId() {
        return mSceneId_;
      }
      /**
       * <pre>
       *链接场景id
       * </pre>
       *
       * <code>optional int32 m_SceneId = 4;</code>
       */
      public Builder setMSceneId(int value) {
        bitField0_ |= 0x00000008;
        mSceneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *链接场景id
       * </pre>
       *
       * <code>optional int32 m_SceneId = 4;</code>
       */
      public Builder clearMSceneId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mSceneId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mHyperlink_ = "";
      /**
       * <pre>
       *超链接
       * </pre>
       *
       * <code>optional string m_hyperlink = 5;</code>
       */
      public boolean hasMHyperlink() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *超链接
       * </pre>
       *
       * <code>optional string m_hyperlink = 5;</code>
       */
      public java.lang.String getMHyperlink() {
        java.lang.Object ref = mHyperlink_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mHyperlink_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *超链接
       * </pre>
       *
       * <code>optional string m_hyperlink = 5;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMHyperlinkBytes() {
        java.lang.Object ref = mHyperlink_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mHyperlink_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *超链接
       * </pre>
       *
       * <code>optional string m_hyperlink = 5;</code>
       */
      public Builder setMHyperlink(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mHyperlink_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *超链接
       * </pre>
       *
       * <code>optional string m_hyperlink = 5;</code>
       */
      public Builder clearMHyperlink() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mHyperlink_ = getDefaultInstance().getMHyperlink();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *超链接
       * </pre>
       *
       * <code>optional string m_hyperlink = 5;</code>
       */
      public Builder setMHyperlinkBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mHyperlink_ = value;
        onChanged();
        return this;
      }

      private int mParentId_ ;
      /**
       * <pre>
       *指向分类id 
       * </pre>
       *
       * <code>optional int32 m_parentId = 6;</code>
       */
      public boolean hasMParentId() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *指向分类id 
       * </pre>
       *
       * <code>optional int32 m_parentId = 6;</code>
       */
      public int getMParentId() {
        return mParentId_;
      }
      /**
       * <pre>
       *指向分类id 
       * </pre>
       *
       * <code>optional int32 m_parentId = 6;</code>
       */
      public Builder setMParentId(int value) {
        bitField0_ |= 0x00000020;
        mParentId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *指向分类id 
       * </pre>
       *
       * <code>optional int32 m_parentId = 6;</code>
       */
      public Builder clearMParentId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mParentId_ = 0;
        onChanged();
        return this;
      }

      private int mId_ ;
      /**
       * <pre>
       *子分类id 
       * </pre>
       *
       * <code>optional int32 m_Id = 7;</code>
       */
      public boolean hasMId() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *子分类id 
       * </pre>
       *
       * <code>optional int32 m_Id = 7;</code>
       */
      public int getMId() {
        return mId_;
      }
      /**
       * <pre>
       *子分类id 
       * </pre>
       *
       * <code>optional int32 m_Id = 7;</code>
       */
      public Builder setMId(int value) {
        bitField0_ |= 0x00000040;
        mId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *子分类id 
       * </pre>
       *
       * <code>optional int32 m_Id = 7;</code>
       */
      public Builder clearMId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mId_ = 0;
        onChanged();
        return this;
      }

      private int mShoptype_ ;
      /**
       * <pre>
       *店铺类型   0 店铺 ， 1 商场
       * </pre>
       *
       * <code>optional int32 m_Shoptype = 8;</code>
       */
      public boolean hasMShoptype() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       *店铺类型   0 店铺 ， 1 商场
       * </pre>
       *
       * <code>optional int32 m_Shoptype = 8;</code>
       */
      public int getMShoptype() {
        return mShoptype_;
      }
      /**
       * <pre>
       *店铺类型   0 店铺 ， 1 商场
       * </pre>
       *
       * <code>optional int32 m_Shoptype = 8;</code>
       */
      public Builder setMShoptype(int value) {
        bitField0_ |= 0x00000080;
        mShoptype_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *店铺类型   0 店铺 ， 1 商场
       * </pre>
       *
       * <code>optional int32 m_Shoptype = 8;</code>
       */
      public Builder clearMShoptype() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mShoptype_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.SubCategory)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.SubCategory)
    private static final com.nibiru.creator.data.HotPotData.SubCategory DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.SubCategory();
    }

    public static com.nibiru.creator.data.HotPotData.SubCategory getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<SubCategory>
        PARSER = new com.nibiru.protobuf.AbstractParser<SubCategory>() {
      public SubCategory parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new SubCategory(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<SubCategory> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<SubCategory> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.SubCategory getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CategoryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.Category)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    boolean hasMName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    java.lang.String getMName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMNameBytes();

    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    boolean hasMIcon();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    java.lang.String getMIcon();
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    com.nibiru.protobuf.ByteString
        getMIconBytes();

    /**
     * <pre>
     *子分类
     * </pre>
     *
     * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.SubCategory> 
        getMSubCategoryList();
    /**
     * <pre>
     *子分类
     * </pre>
     *
     * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.SubCategory getMSubCategory(int index);
    /**
     * <pre>
     *子分类
     * </pre>
     *
     * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
     */
    int getMSubCategoryCount();
    /**
     * <pre>
     *子分类
     * </pre>
     *
     * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder> 
        getMSubCategoryOrBuilderList();
    /**
     * <pre>
     *子分类
     * </pre>
     *
     * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder getMSubCategoryOrBuilder(
        int index);

    /**
     * <pre>
     *分类id 
     * </pre>
     *
     * <code>optional int32 m_Id = 4;</code>
     */
    boolean hasMId();
    /**
     * <pre>
     *分类id 
     * </pre>
     *
     * <code>optional int32 m_Id = 4;</code>
     */
    int getMId();
  }
  /**
   * <pre>
   *分类
   * </pre>
   *
   * Protobuf type {@code DataFactory.Category}
   */
  public  static final class Category extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.Category)
      CategoryOrBuilder {
    // Use Category.newBuilder() to construct.
    private Category(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Category() {
      mName_ = "";
      mIcon_ = "";
      mSubCategory_ = java.util.Collections.emptyList();
      mId_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Category(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mName_ = bs;
              break;
            }
            case 18: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              mIcon_ = bs;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                mSubCategory_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.SubCategory>();
                mutable_bitField0_ |= 0x00000004;
              }
              mSubCategory_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.SubCategory.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              mId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          mSubCategory_ = java.util.Collections.unmodifiableList(mSubCategory_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Category_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Category_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.Category.class, com.nibiru.creator.data.HotPotData.Category.Builder.class);
    }

    private int bitField0_;
    public static final int M_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object mName_;
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public boolean hasMName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public java.lang.String getMName() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMNameBytes() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_ICON_FIELD_NUMBER = 2;
    private volatile java.lang.Object mIcon_;
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    public boolean hasMIcon() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    public java.lang.String getMIcon() {
      java.lang.Object ref = mIcon_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mIcon_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *图片路径
     * </pre>
     *
     * <code>optional string m_icon = 2;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMIconBytes() {
      java.lang.Object ref = mIcon_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mIcon_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_SUBCATEGORY_FIELD_NUMBER = 3;
    private java.util.List<com.nibiru.creator.data.HotPotData.SubCategory> mSubCategory_;
    /**
     * <pre>
     *子分类
     * </pre>
     *
     * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.SubCategory> getMSubCategoryList() {
      return mSubCategory_;
    }
    /**
     * <pre>
     *子分类
     * </pre>
     *
     * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder> 
        getMSubCategoryOrBuilderList() {
      return mSubCategory_;
    }
    /**
     * <pre>
     *子分类
     * </pre>
     *
     * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
     */
    public int getMSubCategoryCount() {
      return mSubCategory_.size();
    }
    /**
     * <pre>
     *子分类
     * </pre>
     *
     * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.SubCategory getMSubCategory(int index) {
      return mSubCategory_.get(index);
    }
    /**
     * <pre>
     *子分类
     * </pre>
     *
     * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder getMSubCategoryOrBuilder(
        int index) {
      return mSubCategory_.get(index);
    }

    public static final int M_ID_FIELD_NUMBER = 4;
    private int mId_;
    /**
     * <pre>
     *分类id 
     * </pre>
     *
     * <code>optional int32 m_Id = 4;</code>
     */
    public boolean hasMId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *分类id 
     * </pre>
     *
     * <code>optional int32 m_Id = 4;</code>
     */
    public int getMId() {
      return mId_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 2, mIcon_);
      }
      for (int i = 0; i < mSubCategory_.size(); i++) {
        output.writeMessage(3, mSubCategory_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, mId_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(2, mIcon_);
      }
      for (int i = 0; i < mSubCategory_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(3, mSubCategory_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(4, mId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.Category)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.Category other = (com.nibiru.creator.data.HotPotData.Category) obj;

      boolean result = true;
      result = result && (hasMName() == other.hasMName());
      if (hasMName()) {
        result = result && getMName()
            .equals(other.getMName());
      }
      result = result && (hasMIcon() == other.hasMIcon());
      if (hasMIcon()) {
        result = result && getMIcon()
            .equals(other.getMIcon());
      }
      result = result && getMSubCategoryList()
          .equals(other.getMSubCategoryList());
      result = result && (hasMId() == other.hasMId());
      if (hasMId()) {
        result = result && (getMId()
            == other.getMId());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMName()) {
        hash = (37 * hash) + M_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getMName().hashCode();
      }
      if (hasMIcon()) {
        hash = (37 * hash) + M_ICON_FIELD_NUMBER;
        hash = (53 * hash) + getMIcon().hashCode();
      }
      if (getMSubCategoryCount() > 0) {
        hash = (37 * hash) + M_SUBCATEGORY_FIELD_NUMBER;
        hash = (53 * hash) + getMSubCategoryList().hashCode();
      }
      if (hasMId()) {
        hash = (37 * hash) + M_ID_FIELD_NUMBER;
        hash = (53 * hash) + getMId();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.Category parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Category parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Category parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Category parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Category parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Category parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Category parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Category parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Category parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Category parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.Category prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *分类
     * </pre>
     *
     * Protobuf type {@code DataFactory.Category}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.Category)
        com.nibiru.creator.data.HotPotData.CategoryOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Category_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Category_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.Category.class, com.nibiru.creator.data.HotPotData.Category.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.Category.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMSubCategoryFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mIcon_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (mSubCategoryBuilder_ == null) {
          mSubCategory_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          mSubCategoryBuilder_.clear();
        }
        mId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Category_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.Category getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.Category.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.Category build() {
        com.nibiru.creator.data.HotPotData.Category result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.Category buildPartial() {
        com.nibiru.creator.data.HotPotData.Category result = new com.nibiru.creator.data.HotPotData.Category(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mName_ = mName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mIcon_ = mIcon_;
        if (mSubCategoryBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            mSubCategory_ = java.util.Collections.unmodifiableList(mSubCategory_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.mSubCategory_ = mSubCategory_;
        } else {
          result.mSubCategory_ = mSubCategoryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mId_ = mId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.Category) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.Category)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.Category other) {
        if (other == com.nibiru.creator.data.HotPotData.Category.getDefaultInstance()) return this;
        if (other.hasMName()) {
          bitField0_ |= 0x00000001;
          mName_ = other.mName_;
          onChanged();
        }
        if (other.hasMIcon()) {
          bitField0_ |= 0x00000002;
          mIcon_ = other.mIcon_;
          onChanged();
        }
        if (mSubCategoryBuilder_ == null) {
          if (!other.mSubCategory_.isEmpty()) {
            if (mSubCategory_.isEmpty()) {
              mSubCategory_ = other.mSubCategory_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureMSubCategoryIsMutable();
              mSubCategory_.addAll(other.mSubCategory_);
            }
            onChanged();
          }
        } else {
          if (!other.mSubCategory_.isEmpty()) {
            if (mSubCategoryBuilder_.isEmpty()) {
              mSubCategoryBuilder_.dispose();
              mSubCategoryBuilder_ = null;
              mSubCategory_ = other.mSubCategory_;
              bitField0_ = (bitField0_ & ~0x00000004);
              mSubCategoryBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMSubCategoryFieldBuilder() : null;
            } else {
              mSubCategoryBuilder_.addAllMessages(other.mSubCategory_);
            }
          }
        }
        if (other.hasMId()) {
          setMId(other.getMId());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.Category parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.Category) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mName_ = "";
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public boolean hasMName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public java.lang.String getMName() {
        java.lang.Object ref = mName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMNameBytes() {
        java.lang.Object ref = mName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder setMName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder clearMName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mName_ = getDefaultInstance().getMName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder setMNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mIcon_ = "";
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public boolean hasMIcon() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public java.lang.String getMIcon() {
        java.lang.Object ref = mIcon_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mIcon_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMIconBytes() {
        java.lang.Object ref = mIcon_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mIcon_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public Builder setMIcon(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mIcon_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public Builder clearMIcon() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mIcon_ = getDefaultInstance().getMIcon();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片路径
       * </pre>
       *
       * <code>optional string m_icon = 2;</code>
       */
      public Builder setMIconBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mIcon_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.SubCategory> mSubCategory_ =
        java.util.Collections.emptyList();
      private void ensureMSubCategoryIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          mSubCategory_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.SubCategory>(mSubCategory_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SubCategory, com.nibiru.creator.data.HotPotData.SubCategory.Builder, com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder> mSubCategoryBuilder_;

      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.SubCategory> getMSubCategoryList() {
        if (mSubCategoryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mSubCategory_);
        } else {
          return mSubCategoryBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public int getMSubCategoryCount() {
        if (mSubCategoryBuilder_ == null) {
          return mSubCategory_.size();
        } else {
          return mSubCategoryBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.SubCategory getMSubCategory(int index) {
        if (mSubCategoryBuilder_ == null) {
          return mSubCategory_.get(index);
        } else {
          return mSubCategoryBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public Builder setMSubCategory(
          int index, com.nibiru.creator.data.HotPotData.SubCategory value) {
        if (mSubCategoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSubCategoryIsMutable();
          mSubCategory_.set(index, value);
          onChanged();
        } else {
          mSubCategoryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public Builder setMSubCategory(
          int index, com.nibiru.creator.data.HotPotData.SubCategory.Builder builderForValue) {
        if (mSubCategoryBuilder_ == null) {
          ensureMSubCategoryIsMutable();
          mSubCategory_.set(index, builderForValue.build());
          onChanged();
        } else {
          mSubCategoryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public Builder addMSubCategory(com.nibiru.creator.data.HotPotData.SubCategory value) {
        if (mSubCategoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSubCategoryIsMutable();
          mSubCategory_.add(value);
          onChanged();
        } else {
          mSubCategoryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public Builder addMSubCategory(
          int index, com.nibiru.creator.data.HotPotData.SubCategory value) {
        if (mSubCategoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSubCategoryIsMutable();
          mSubCategory_.add(index, value);
          onChanged();
        } else {
          mSubCategoryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public Builder addMSubCategory(
          com.nibiru.creator.data.HotPotData.SubCategory.Builder builderForValue) {
        if (mSubCategoryBuilder_ == null) {
          ensureMSubCategoryIsMutable();
          mSubCategory_.add(builderForValue.build());
          onChanged();
        } else {
          mSubCategoryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public Builder addMSubCategory(
          int index, com.nibiru.creator.data.HotPotData.SubCategory.Builder builderForValue) {
        if (mSubCategoryBuilder_ == null) {
          ensureMSubCategoryIsMutable();
          mSubCategory_.add(index, builderForValue.build());
          onChanged();
        } else {
          mSubCategoryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public Builder addAllMSubCategory(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.SubCategory> values) {
        if (mSubCategoryBuilder_ == null) {
          ensureMSubCategoryIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mSubCategory_);
          onChanged();
        } else {
          mSubCategoryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public Builder clearMSubCategory() {
        if (mSubCategoryBuilder_ == null) {
          mSubCategory_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          mSubCategoryBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public Builder removeMSubCategory(int index) {
        if (mSubCategoryBuilder_ == null) {
          ensureMSubCategoryIsMutable();
          mSubCategory_.remove(index);
          onChanged();
        } else {
          mSubCategoryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.SubCategory.Builder getMSubCategoryBuilder(
          int index) {
        return getMSubCategoryFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder getMSubCategoryOrBuilder(
          int index) {
        if (mSubCategoryBuilder_ == null) {
          return mSubCategory_.get(index);  } else {
          return mSubCategoryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder> 
           getMSubCategoryOrBuilderList() {
        if (mSubCategoryBuilder_ != null) {
          return mSubCategoryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mSubCategory_);
        }
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.SubCategory.Builder addMSubCategoryBuilder() {
        return getMSubCategoryFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.SubCategory.getDefaultInstance());
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.SubCategory.Builder addMSubCategoryBuilder(
          int index) {
        return getMSubCategoryFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.SubCategory.getDefaultInstance());
      }
      /**
       * <pre>
       *子分类
       * </pre>
       *
       * <code>repeated .DataFactory.SubCategory m_subCategory = 3;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.SubCategory.Builder> 
           getMSubCategoryBuilderList() {
        return getMSubCategoryFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SubCategory, com.nibiru.creator.data.HotPotData.SubCategory.Builder, com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder> 
          getMSubCategoryFieldBuilder() {
        if (mSubCategoryBuilder_ == null) {
          mSubCategoryBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.SubCategory, com.nibiru.creator.data.HotPotData.SubCategory.Builder, com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder>(
                  mSubCategory_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          mSubCategory_ = null;
        }
        return mSubCategoryBuilder_;
      }

      private int mId_ ;
      /**
       * <pre>
       *分类id 
       * </pre>
       *
       * <code>optional int32 m_Id = 4;</code>
       */
      public boolean hasMId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *分类id 
       * </pre>
       *
       * <code>optional int32 m_Id = 4;</code>
       */
      public int getMId() {
        return mId_;
      }
      /**
       * <pre>
       *分类id 
       * </pre>
       *
       * <code>optional int32 m_Id = 4;</code>
       */
      public Builder setMId(int value) {
        bitField0_ |= 0x00000008;
        mId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *分类id 
       * </pre>
       *
       * <code>optional int32 m_Id = 4;</code>
       */
      public Builder clearMId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mId_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.Category)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.Category)
    private static final com.nibiru.creator.data.HotPotData.Category DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.Category();
    }

    public static com.nibiru.creator.data.HotPotData.Category getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<Category>
        PARSER = new com.nibiru.protobuf.AbstractParser<Category>() {
      public Category parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new Category(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<Category> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<Category> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.Category getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NavigationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.Navigation)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *是否显示导览图 1 显示 0 不显示
     * </pre>
     *
     * <code>optional int32 m_showcategoryIcon = 1;</code>
     */
    boolean hasMShowcategoryIcon();
    /**
     * <pre>
     *是否显示导览图 1 显示 0 不显示
     * </pre>
     *
     * <code>optional int32 m_showcategoryIcon = 1;</code>
     */
    int getMShowcategoryIcon();

    /**
     * <pre>
     *是否 1 默认展开导览项 ，  0不展开 
     * </pre>
     *
     * <code>optional int32 m_hasCategory = 2;</code>
     */
    boolean hasMHasCategory();
    /**
     * <pre>
     *是否 1 默认展开导览项 ，  0不展开 
     * </pre>
     *
     * <code>optional int32 m_hasCategory = 2;</code>
     */
    int getMHasCategory();

    /**
     * <pre>
     *更多样式背景图	
     * </pre>
     *
     * <code>optional string m_moreStyleImage = 3;</code>
     */
    boolean hasMMoreStyleImage();
    /**
     * <pre>
     *更多样式背景图	
     * </pre>
     *
     * <code>optional string m_moreStyleImage = 3;</code>
     */
    java.lang.String getMMoreStyleImage();
    /**
     * <pre>
     *更多样式背景图	
     * </pre>
     *
     * <code>optional string m_moreStyleImage = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMMoreStyleImageBytes();

    /**
     * <pre>
     *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> 
        getMSelectorsList();
    /**
     * <pre>
     *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute getMSelectors(int index);
    /**
     * <pre>
     *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
     */
    int getMSelectorsCount();
    /**
     * <pre>
     *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder> 
        getMSelectorsOrBuilderList();
    /**
     * <pre>
     *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder getMSelectorsOrBuilder(
        int index);

    /**
     * <pre>
     *设置返回
     * </pre>
     *
     * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
     */
    boolean hasMBackto();
    /**
     * <pre>
     *设置返回
     * </pre>
     *
     * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.SubCategory getMBackto();
    /**
     * <pre>
     *设置返回
     * </pre>
     *
     * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder getMBacktoOrBuilder();

    /**
     * <pre>
     *所有全局热点	
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.HotPot> 
        getMHotPotsList();
    /**
     * <pre>
     *所有全局热点	
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPot getMHotPots(int index);
    /**
     * <pre>
     *所有全局热点	
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
     */
    int getMHotPotsCount();
    /**
     * <pre>
     *所有全局热点	
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
        getMHotPotsOrBuilderList();
    /**
     * <pre>
     *所有全局热点	
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
     */
    com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMHotPotsOrBuilder(
        int index);

    /**
     * <pre>
     *全局热点点击放大
     * </pre>
     *
     * <code>optional int64 m_ClickLarger = 7;</code>
     */
    boolean hasMClickLarger();
    /**
     * <pre>
     *全局热点点击放大
     * </pre>
     *
     * <code>optional int64 m_ClickLarger = 7;</code>
     */
    long getMClickLarger();

    /**
     * <pre>
     *全局热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 8;</code>
     */
    boolean hasMClickAudioPath();
    /**
     * <pre>
     *全局热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 8;</code>
     */
    java.lang.String getMClickAudioPath();
    /**
     * <pre>
     *全局热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 8;</code>
     */
    com.nibiru.protobuf.ByteString
        getMClickAudioPathBytes();
  }
  /**
   * <pre>
   *导览配置
   * </pre>
   *
   * Protobuf type {@code DataFactory.Navigation}
   */
  public  static final class Navigation extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.Navigation)
      NavigationOrBuilder {
    // Use Navigation.newBuilder() to construct.
    private Navigation(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Navigation() {
      mShowcategoryIcon_ = 0;
      mHasCategory_ = 0;
      mMoreStyleImage_ = "";
      mSelectors_ = java.util.Collections.emptyList();
      mHotPots_ = java.util.Collections.emptyList();
      mClickLarger_ = 0L;
      mClickAudioPath_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Navigation(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mShowcategoryIcon_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mHasCategory_ = input.readInt32();
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mMoreStyleImage_ = bs;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                mSelectors_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute>();
                mutable_bitField0_ |= 0x00000008;
              }
              mSelectors_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              com.nibiru.creator.data.HotPotData.SubCategory.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = mBackto_.toBuilder();
              }
              mBackto_ = input.readMessage(com.nibiru.creator.data.HotPotData.SubCategory.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mBackto_);
                mBackto_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                mHotPots_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.HotPot>();
                mutable_bitField0_ |= 0x00000020;
              }
              mHotPots_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.HotPot.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              mClickLarger_ = input.readInt64();
              break;
            }
            case 66: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              mClickAudioPath_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          mSelectors_ = java.util.Collections.unmodifiableList(mSelectors_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          mHotPots_ = java.util.Collections.unmodifiableList(mHotPots_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Navigation_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Navigation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.Navigation.class, com.nibiru.creator.data.HotPotData.Navigation.Builder.class);
    }

    private int bitField0_;
    public static final int M_SHOWCATEGORYICON_FIELD_NUMBER = 1;
    private int mShowcategoryIcon_;
    /**
     * <pre>
     *是否显示导览图 1 显示 0 不显示
     * </pre>
     *
     * <code>optional int32 m_showcategoryIcon = 1;</code>
     */
    public boolean hasMShowcategoryIcon() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *是否显示导览图 1 显示 0 不显示
     * </pre>
     *
     * <code>optional int32 m_showcategoryIcon = 1;</code>
     */
    public int getMShowcategoryIcon() {
      return mShowcategoryIcon_;
    }

    public static final int M_HASCATEGORY_FIELD_NUMBER = 2;
    private int mHasCategory_;
    /**
     * <pre>
     *是否 1 默认展开导览项 ，  0不展开 
     * </pre>
     *
     * <code>optional int32 m_hasCategory = 2;</code>
     */
    public boolean hasMHasCategory() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *是否 1 默认展开导览项 ，  0不展开 
     * </pre>
     *
     * <code>optional int32 m_hasCategory = 2;</code>
     */
    public int getMHasCategory() {
      return mHasCategory_;
    }

    public static final int M_MORESTYLEIMAGE_FIELD_NUMBER = 3;
    private volatile java.lang.Object mMoreStyleImage_;
    /**
     * <pre>
     *更多样式背景图	
     * </pre>
     *
     * <code>optional string m_moreStyleImage = 3;</code>
     */
    public boolean hasMMoreStyleImage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *更多样式背景图	
     * </pre>
     *
     * <code>optional string m_moreStyleImage = 3;</code>
     */
    public java.lang.String getMMoreStyleImage() {
      java.lang.Object ref = mMoreStyleImage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mMoreStyleImage_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *更多样式背景图	
     * </pre>
     *
     * <code>optional string m_moreStyleImage = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMMoreStyleImageBytes() {
      java.lang.Object ref = mMoreStyleImage_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mMoreStyleImage_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_SELECTORS_FIELD_NUMBER = 4;
    private java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> mSelectors_;
    /**
     * <pre>
     *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> getMSelectorsList() {
      return mSelectors_;
    }
    /**
     * <pre>
     *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder> 
        getMSelectorsOrBuilderList() {
      return mSelectors_;
    }
    /**
     * <pre>
     *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
     */
    public int getMSelectorsCount() {
      return mSelectors_.size();
    }
    /**
     * <pre>
     *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute getMSelectors(int index) {
      return mSelectors_.get(index);
    }
    /**
     * <pre>
     *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder getMSelectorsOrBuilder(
        int index) {
      return mSelectors_.get(index);
    }

    public static final int M_BACKTO_FIELD_NUMBER = 5;
    private com.nibiru.creator.data.HotPotData.SubCategory mBackto_;
    /**
     * <pre>
     *设置返回
     * </pre>
     *
     * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
     */
    public boolean hasMBackto() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *设置返回
     * </pre>
     *
     * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.SubCategory getMBackto() {
      return mBackto_ == null ? com.nibiru.creator.data.HotPotData.SubCategory.getDefaultInstance() : mBackto_;
    }
    /**
     * <pre>
     *设置返回
     * </pre>
     *
     * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder getMBacktoOrBuilder() {
      return mBackto_ == null ? com.nibiru.creator.data.HotPotData.SubCategory.getDefaultInstance() : mBackto_;
    }

    public static final int M_HOTPOTS_FIELD_NUMBER = 6;
    private java.util.List<com.nibiru.creator.data.HotPotData.HotPot> mHotPots_;
    /**
     * <pre>
     *所有全局热点	
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.HotPot> getMHotPotsList() {
      return mHotPots_;
    }
    /**
     * <pre>
     *所有全局热点	
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
        getMHotPotsOrBuilderList() {
      return mHotPots_;
    }
    /**
     * <pre>
     *所有全局热点	
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
     */
    public int getMHotPotsCount() {
      return mHotPots_.size();
    }
    /**
     * <pre>
     *所有全局热点	
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPot getMHotPots(int index) {
      return mHotPots_.get(index);
    }
    /**
     * <pre>
     *所有全局热点	
     * </pre>
     *
     * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
     */
    public com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMHotPotsOrBuilder(
        int index) {
      return mHotPots_.get(index);
    }

    public static final int M_CLICKLARGER_FIELD_NUMBER = 7;
    private long mClickLarger_;
    /**
     * <pre>
     *全局热点点击放大
     * </pre>
     *
     * <code>optional int64 m_ClickLarger = 7;</code>
     */
    public boolean hasMClickLarger() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *全局热点点击放大
     * </pre>
     *
     * <code>optional int64 m_ClickLarger = 7;</code>
     */
    public long getMClickLarger() {
      return mClickLarger_;
    }

    public static final int M_CLICKAUDIOPATH_FIELD_NUMBER = 8;
    private volatile java.lang.Object mClickAudioPath_;
    /**
     * <pre>
     *全局热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 8;</code>
     */
    public boolean hasMClickAudioPath() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *全局热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 8;</code>
     */
    public java.lang.String getMClickAudioPath() {
      java.lang.Object ref = mClickAudioPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mClickAudioPath_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *全局热点点击音效
     * </pre>
     *
     * <code>optional string m_ClickAudioPath = 8;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMClickAudioPathBytes() {
      java.lang.Object ref = mClickAudioPath_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mClickAudioPath_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getMSelectorsCount(); i++) {
        if (!getMSelectors(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMHotPotsCount(); i++) {
        if (!getMHotPots(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mShowcategoryIcon_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mHasCategory_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mMoreStyleImage_);
      }
      for (int i = 0; i < mSelectors_.size(); i++) {
        output.writeMessage(4, mSelectors_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, getMBackto());
      }
      for (int i = 0; i < mHotPots_.size(); i++) {
        output.writeMessage(6, mHotPots_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt64(7, mClickLarger_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 8, mClickAudioPath_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(1, mShowcategoryIcon_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(2, mHasCategory_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mMoreStyleImage_);
      }
      for (int i = 0; i < mSelectors_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(4, mSelectors_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(5, getMBackto());
      }
      for (int i = 0; i < mHotPots_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(6, mHotPots_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt64Size(7, mClickLarger_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(8, mClickAudioPath_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.Navigation)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.Navigation other = (com.nibiru.creator.data.HotPotData.Navigation) obj;

      boolean result = true;
      result = result && (hasMShowcategoryIcon() == other.hasMShowcategoryIcon());
      if (hasMShowcategoryIcon()) {
        result = result && (getMShowcategoryIcon()
            == other.getMShowcategoryIcon());
      }
      result = result && (hasMHasCategory() == other.hasMHasCategory());
      if (hasMHasCategory()) {
        result = result && (getMHasCategory()
            == other.getMHasCategory());
      }
      result = result && (hasMMoreStyleImage() == other.hasMMoreStyleImage());
      if (hasMMoreStyleImage()) {
        result = result && getMMoreStyleImage()
            .equals(other.getMMoreStyleImage());
      }
      result = result && getMSelectorsList()
          .equals(other.getMSelectorsList());
      result = result && (hasMBackto() == other.hasMBackto());
      if (hasMBackto()) {
        result = result && getMBackto()
            .equals(other.getMBackto());
      }
      result = result && getMHotPotsList()
          .equals(other.getMHotPotsList());
      result = result && (hasMClickLarger() == other.hasMClickLarger());
      if (hasMClickLarger()) {
        result = result && (getMClickLarger()
            == other.getMClickLarger());
      }
      result = result && (hasMClickAudioPath() == other.hasMClickAudioPath());
      if (hasMClickAudioPath()) {
        result = result && getMClickAudioPath()
            .equals(other.getMClickAudioPath());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMShowcategoryIcon()) {
        hash = (37 * hash) + M_SHOWCATEGORYICON_FIELD_NUMBER;
        hash = (53 * hash) + getMShowcategoryIcon();
      }
      if (hasMHasCategory()) {
        hash = (37 * hash) + M_HASCATEGORY_FIELD_NUMBER;
        hash = (53 * hash) + getMHasCategory();
      }
      if (hasMMoreStyleImage()) {
        hash = (37 * hash) + M_MORESTYLEIMAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMMoreStyleImage().hashCode();
      }
      if (getMSelectorsCount() > 0) {
        hash = (37 * hash) + M_SELECTORS_FIELD_NUMBER;
        hash = (53 * hash) + getMSelectorsList().hashCode();
      }
      if (hasMBackto()) {
        hash = (37 * hash) + M_BACKTO_FIELD_NUMBER;
        hash = (53 * hash) + getMBackto().hashCode();
      }
      if (getMHotPotsCount() > 0) {
        hash = (37 * hash) + M_HOTPOTS_FIELD_NUMBER;
        hash = (53 * hash) + getMHotPotsList().hashCode();
      }
      if (hasMClickLarger()) {
        hash = (37 * hash) + M_CLICKLARGER_FIELD_NUMBER;
        hash = (53 * hash) + com.nibiru.protobuf.Internal.hashLong(
            getMClickLarger());
      }
      if (hasMClickAudioPath()) {
        hash = (37 * hash) + M_CLICKAUDIOPATH_FIELD_NUMBER;
        hash = (53 * hash) + getMClickAudioPath().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.Navigation parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Navigation parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Navigation parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.Navigation parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Navigation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Navigation parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Navigation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Navigation parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.Navigation parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.Navigation parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.Navigation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *导览配置
     * </pre>
     *
     * Protobuf type {@code DataFactory.Navigation}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.Navigation)
        com.nibiru.creator.data.HotPotData.NavigationOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Navigation_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Navigation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.Navigation.class, com.nibiru.creator.data.HotPotData.Navigation.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.Navigation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMSelectorsFieldBuilder();
          getMBacktoFieldBuilder();
          getMHotPotsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mShowcategoryIcon_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        mHasCategory_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mMoreStyleImage_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        if (mSelectorsBuilder_ == null) {
          mSelectors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          mSelectorsBuilder_.clear();
        }
        if (mBacktoBuilder_ == null) {
          mBackto_ = null;
        } else {
          mBacktoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (mHotPotsBuilder_ == null) {
          mHotPots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          mHotPotsBuilder_.clear();
        }
        mClickLarger_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        mClickAudioPath_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_Navigation_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.Navigation getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.Navigation.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.Navigation build() {
        com.nibiru.creator.data.HotPotData.Navigation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.Navigation buildPartial() {
        com.nibiru.creator.data.HotPotData.Navigation result = new com.nibiru.creator.data.HotPotData.Navigation(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mShowcategoryIcon_ = mShowcategoryIcon_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mHasCategory_ = mHasCategory_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mMoreStyleImage_ = mMoreStyleImage_;
        if (mSelectorsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            mSelectors_ = java.util.Collections.unmodifiableList(mSelectors_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.mSelectors_ = mSelectors_;
        } else {
          result.mSelectors_ = mSelectorsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        if (mBacktoBuilder_ == null) {
          result.mBackto_ = mBackto_;
        } else {
          result.mBackto_ = mBacktoBuilder_.build();
        }
        if (mHotPotsBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            mHotPots_ = java.util.Collections.unmodifiableList(mHotPots_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.mHotPots_ = mHotPots_;
        } else {
          result.mHotPots_ = mHotPotsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mClickLarger_ = mClickLarger_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mClickAudioPath_ = mClickAudioPath_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.Navigation) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.Navigation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.Navigation other) {
        if (other == com.nibiru.creator.data.HotPotData.Navigation.getDefaultInstance()) return this;
        if (other.hasMShowcategoryIcon()) {
          setMShowcategoryIcon(other.getMShowcategoryIcon());
        }
        if (other.hasMHasCategory()) {
          setMHasCategory(other.getMHasCategory());
        }
        if (other.hasMMoreStyleImage()) {
          bitField0_ |= 0x00000004;
          mMoreStyleImage_ = other.mMoreStyleImage_;
          onChanged();
        }
        if (mSelectorsBuilder_ == null) {
          if (!other.mSelectors_.isEmpty()) {
            if (mSelectors_.isEmpty()) {
              mSelectors_ = other.mSelectors_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMSelectorsIsMutable();
              mSelectors_.addAll(other.mSelectors_);
            }
            onChanged();
          }
        } else {
          if (!other.mSelectors_.isEmpty()) {
            if (mSelectorsBuilder_.isEmpty()) {
              mSelectorsBuilder_.dispose();
              mSelectorsBuilder_ = null;
              mSelectors_ = other.mSelectors_;
              bitField0_ = (bitField0_ & ~0x00000008);
              mSelectorsBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMSelectorsFieldBuilder() : null;
            } else {
              mSelectorsBuilder_.addAllMessages(other.mSelectors_);
            }
          }
        }
        if (other.hasMBackto()) {
          mergeMBackto(other.getMBackto());
        }
        if (mHotPotsBuilder_ == null) {
          if (!other.mHotPots_.isEmpty()) {
            if (mHotPots_.isEmpty()) {
              mHotPots_ = other.mHotPots_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureMHotPotsIsMutable();
              mHotPots_.addAll(other.mHotPots_);
            }
            onChanged();
          }
        } else {
          if (!other.mHotPots_.isEmpty()) {
            if (mHotPotsBuilder_.isEmpty()) {
              mHotPotsBuilder_.dispose();
              mHotPotsBuilder_ = null;
              mHotPots_ = other.mHotPots_;
              bitField0_ = (bitField0_ & ~0x00000020);
              mHotPotsBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMHotPotsFieldBuilder() : null;
            } else {
              mHotPotsBuilder_.addAllMessages(other.mHotPots_);
            }
          }
        }
        if (other.hasMClickLarger()) {
          setMClickLarger(other.getMClickLarger());
        }
        if (other.hasMClickAudioPath()) {
          bitField0_ |= 0x00000080;
          mClickAudioPath_ = other.mClickAudioPath_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getMSelectorsCount(); i++) {
          if (!getMSelectors(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getMHotPotsCount(); i++) {
          if (!getMHotPots(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.Navigation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.Navigation) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int mShowcategoryIcon_ ;
      /**
       * <pre>
       *是否显示导览图 1 显示 0 不显示
       * </pre>
       *
       * <code>optional int32 m_showcategoryIcon = 1;</code>
       */
      public boolean hasMShowcategoryIcon() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *是否显示导览图 1 显示 0 不显示
       * </pre>
       *
       * <code>optional int32 m_showcategoryIcon = 1;</code>
       */
      public int getMShowcategoryIcon() {
        return mShowcategoryIcon_;
      }
      /**
       * <pre>
       *是否显示导览图 1 显示 0 不显示
       * </pre>
       *
       * <code>optional int32 m_showcategoryIcon = 1;</code>
       */
      public Builder setMShowcategoryIcon(int value) {
        bitField0_ |= 0x00000001;
        mShowcategoryIcon_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *是否显示导览图 1 显示 0 不显示
       * </pre>
       *
       * <code>optional int32 m_showcategoryIcon = 1;</code>
       */
      public Builder clearMShowcategoryIcon() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mShowcategoryIcon_ = 0;
        onChanged();
        return this;
      }

      private int mHasCategory_ ;
      /**
       * <pre>
       *是否 1 默认展开导览项 ，  0不展开 
       * </pre>
       *
       * <code>optional int32 m_hasCategory = 2;</code>
       */
      public boolean hasMHasCategory() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *是否 1 默认展开导览项 ，  0不展开 
       * </pre>
       *
       * <code>optional int32 m_hasCategory = 2;</code>
       */
      public int getMHasCategory() {
        return mHasCategory_;
      }
      /**
       * <pre>
       *是否 1 默认展开导览项 ，  0不展开 
       * </pre>
       *
       * <code>optional int32 m_hasCategory = 2;</code>
       */
      public Builder setMHasCategory(int value) {
        bitField0_ |= 0x00000002;
        mHasCategory_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *是否 1 默认展开导览项 ，  0不展开 
       * </pre>
       *
       * <code>optional int32 m_hasCategory = 2;</code>
       */
      public Builder clearMHasCategory() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mHasCategory_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object mMoreStyleImage_ = "";
      /**
       * <pre>
       *更多样式背景图	
       * </pre>
       *
       * <code>optional string m_moreStyleImage = 3;</code>
       */
      public boolean hasMMoreStyleImage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *更多样式背景图	
       * </pre>
       *
       * <code>optional string m_moreStyleImage = 3;</code>
       */
      public java.lang.String getMMoreStyleImage() {
        java.lang.Object ref = mMoreStyleImage_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mMoreStyleImage_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *更多样式背景图	
       * </pre>
       *
       * <code>optional string m_moreStyleImage = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMMoreStyleImageBytes() {
        java.lang.Object ref = mMoreStyleImage_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mMoreStyleImage_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *更多样式背景图	
       * </pre>
       *
       * <code>optional string m_moreStyleImage = 3;</code>
       */
      public Builder setMMoreStyleImage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mMoreStyleImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *更多样式背景图	
       * </pre>
       *
       * <code>optional string m_moreStyleImage = 3;</code>
       */
      public Builder clearMMoreStyleImage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mMoreStyleImage_ = getDefaultInstance().getMMoreStyleImage();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *更多样式背景图	
       * </pre>
       *
       * <code>optional string m_moreStyleImage = 3;</code>
       */
      public Builder setMMoreStyleImageBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mMoreStyleImage_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> mSelectors_ =
        java.util.Collections.emptyList();
      private void ensureMSelectorsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          mSelectors_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute>(mSelectors_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder> mSelectorsBuilder_;

      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> getMSelectorsList() {
        if (mSelectorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mSelectors_);
        } else {
          return mSelectorsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public int getMSelectorsCount() {
        if (mSelectorsBuilder_ == null) {
          return mSelectors_.size();
        } else {
          return mSelectorsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute getMSelectors(int index) {
        if (mSelectorsBuilder_ == null) {
          return mSelectors_.get(index);
        } else {
          return mSelectorsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public Builder setMSelectors(
          int index, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute value) {
        if (mSelectorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSelectorsIsMutable();
          mSelectors_.set(index, value);
          onChanged();
        } else {
          mSelectorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public Builder setMSelectors(
          int index, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder builderForValue) {
        if (mSelectorsBuilder_ == null) {
          ensureMSelectorsIsMutable();
          mSelectors_.set(index, builderForValue.build());
          onChanged();
        } else {
          mSelectorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public Builder addMSelectors(com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute value) {
        if (mSelectorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSelectorsIsMutable();
          mSelectors_.add(value);
          onChanged();
        } else {
          mSelectorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public Builder addMSelectors(
          int index, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute value) {
        if (mSelectorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSelectorsIsMutable();
          mSelectors_.add(index, value);
          onChanged();
        } else {
          mSelectorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public Builder addMSelectors(
          com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder builderForValue) {
        if (mSelectorsBuilder_ == null) {
          ensureMSelectorsIsMutable();
          mSelectors_.add(builderForValue.build());
          onChanged();
        } else {
          mSelectorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public Builder addMSelectors(
          int index, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder builderForValue) {
        if (mSelectorsBuilder_ == null) {
          ensureMSelectorsIsMutable();
          mSelectors_.add(index, builderForValue.build());
          onChanged();
        } else {
          mSelectorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public Builder addAllMSelectors(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> values) {
        if (mSelectorsBuilder_ == null) {
          ensureMSelectorsIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mSelectors_);
          onChanged();
        } else {
          mSelectorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public Builder clearMSelectors() {
        if (mSelectorsBuilder_ == null) {
          mSelectors_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          mSelectorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public Builder removeMSelectors(int index) {
        if (mSelectorsBuilder_ == null) {
          ensureMSelectorsIsMutable();
          mSelectors_.remove(index);
          onChanged();
        } else {
          mSelectorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder getMSelectorsBuilder(
          int index) {
        return getMSelectorsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder getMSelectorsOrBuilder(
          int index) {
        if (mSelectorsBuilder_ == null) {
          return mSelectors_.get(index);  } else {
          return mSelectorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder> 
           getMSelectorsOrBuilderList() {
        if (mSelectorsBuilder_ != null) {
          return mSelectorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mSelectors_);
        }
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder addMSelectorsBuilder() {
        return getMSelectorsFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.getDefaultInstance());
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder addMSelectorsBuilder(
          int index) {
        return getMSelectorsFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.getDefaultInstance());
      }
      /**
       * <pre>
       *通用选择器  m_selectorFlag  0 (不用)   1 店铺活动 ，2店铺详情， 3 更多商品
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_selectors = 4;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder> 
           getMSelectorsBuilderList() {
        return getMSelectorsFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder> 
          getMSelectorsFieldBuilder() {
        if (mSelectorsBuilder_ == null) {
          mSelectorsBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder>(
                  mSelectors_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          mSelectors_ = null;
        }
        return mSelectorsBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.SubCategory mBackto_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SubCategory, com.nibiru.creator.data.HotPotData.SubCategory.Builder, com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder> mBacktoBuilder_;
      /**
       * <pre>
       *设置返回
       * </pre>
       *
       * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
       */
      public boolean hasMBackto() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *设置返回
       * </pre>
       *
       * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.SubCategory getMBackto() {
        if (mBacktoBuilder_ == null) {
          return mBackto_ == null ? com.nibiru.creator.data.HotPotData.SubCategory.getDefaultInstance() : mBackto_;
        } else {
          return mBacktoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *设置返回
       * </pre>
       *
       * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
       */
      public Builder setMBackto(com.nibiru.creator.data.HotPotData.SubCategory value) {
        if (mBacktoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mBackto_ = value;
          onChanged();
        } else {
          mBacktoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *设置返回
       * </pre>
       *
       * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
       */
      public Builder setMBackto(
          com.nibiru.creator.data.HotPotData.SubCategory.Builder builderForValue) {
        if (mBacktoBuilder_ == null) {
          mBackto_ = builderForValue.build();
          onChanged();
        } else {
          mBacktoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *设置返回
       * </pre>
       *
       * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
       */
      public Builder mergeMBackto(com.nibiru.creator.data.HotPotData.SubCategory value) {
        if (mBacktoBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              mBackto_ != null &&
              mBackto_ != com.nibiru.creator.data.HotPotData.SubCategory.getDefaultInstance()) {
            mBackto_ =
              com.nibiru.creator.data.HotPotData.SubCategory.newBuilder(mBackto_).mergeFrom(value).buildPartial();
          } else {
            mBackto_ = value;
          }
          onChanged();
        } else {
          mBacktoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *设置返回
       * </pre>
       *
       * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
       */
      public Builder clearMBackto() {
        if (mBacktoBuilder_ == null) {
          mBackto_ = null;
          onChanged();
        } else {
          mBacktoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       *设置返回
       * </pre>
       *
       * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.SubCategory.Builder getMBacktoBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMBacktoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *设置返回
       * </pre>
       *
       * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder getMBacktoOrBuilder() {
        if (mBacktoBuilder_ != null) {
          return mBacktoBuilder_.getMessageOrBuilder();
        } else {
          return mBackto_ == null ?
              com.nibiru.creator.data.HotPotData.SubCategory.getDefaultInstance() : mBackto_;
        }
      }
      /**
       * <pre>
       *设置返回
       * </pre>
       *
       * <code>optional .DataFactory.SubCategory m_backto = 5;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SubCategory, com.nibiru.creator.data.HotPotData.SubCategory.Builder, com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder> 
          getMBacktoFieldBuilder() {
        if (mBacktoBuilder_ == null) {
          mBacktoBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.SubCategory, com.nibiru.creator.data.HotPotData.SubCategory.Builder, com.nibiru.creator.data.HotPotData.SubCategoryOrBuilder>(
                  getMBackto(),
                  getParentForChildren(),
                  isClean());
          mBackto_ = null;
        }
        return mBacktoBuilder_;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.HotPot> mHotPots_ =
        java.util.Collections.emptyList();
      private void ensureMHotPotsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          mHotPots_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.HotPot>(mHotPots_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder> mHotPotsBuilder_;

      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.HotPot> getMHotPotsList() {
        if (mHotPotsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mHotPots_);
        } else {
          return mHotPotsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public int getMHotPotsCount() {
        if (mHotPotsBuilder_ == null) {
          return mHotPots_.size();
        } else {
          return mHotPotsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot getMHotPots(int index) {
        if (mHotPotsBuilder_ == null) {
          return mHotPots_.get(index);
        } else {
          return mHotPotsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public Builder setMHotPots(
          int index, com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mHotPotsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMHotPotsIsMutable();
          mHotPots_.set(index, value);
          onChanged();
        } else {
          mHotPotsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public Builder setMHotPots(
          int index, com.nibiru.creator.data.HotPotData.HotPot.Builder builderForValue) {
        if (mHotPotsBuilder_ == null) {
          ensureMHotPotsIsMutable();
          mHotPots_.set(index, builderForValue.build());
          onChanged();
        } else {
          mHotPotsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public Builder addMHotPots(com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mHotPotsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMHotPotsIsMutable();
          mHotPots_.add(value);
          onChanged();
        } else {
          mHotPotsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public Builder addMHotPots(
          int index, com.nibiru.creator.data.HotPotData.HotPot value) {
        if (mHotPotsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMHotPotsIsMutable();
          mHotPots_.add(index, value);
          onChanged();
        } else {
          mHotPotsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public Builder addMHotPots(
          com.nibiru.creator.data.HotPotData.HotPot.Builder builderForValue) {
        if (mHotPotsBuilder_ == null) {
          ensureMHotPotsIsMutable();
          mHotPots_.add(builderForValue.build());
          onChanged();
        } else {
          mHotPotsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public Builder addMHotPots(
          int index, com.nibiru.creator.data.HotPotData.HotPot.Builder builderForValue) {
        if (mHotPotsBuilder_ == null) {
          ensureMHotPotsIsMutable();
          mHotPots_.add(index, builderForValue.build());
          onChanged();
        } else {
          mHotPotsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public Builder addAllMHotPots(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.HotPot> values) {
        if (mHotPotsBuilder_ == null) {
          ensureMHotPotsIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mHotPots_);
          onChanged();
        } else {
          mHotPotsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public Builder clearMHotPots() {
        if (mHotPotsBuilder_ == null) {
          mHotPots_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          mHotPotsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public Builder removeMHotPots(int index) {
        if (mHotPotsBuilder_ == null) {
          ensureMHotPotsIsMutable();
          mHotPots_.remove(index);
          onChanged();
        } else {
          mHotPotsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot.Builder getMHotPotsBuilder(
          int index) {
        return getMHotPotsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPotOrBuilder getMHotPotsOrBuilder(
          int index) {
        if (mHotPotsBuilder_ == null) {
          return mHotPots_.get(index);  } else {
          return mHotPotsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
           getMHotPotsOrBuilderList() {
        if (mHotPotsBuilder_ != null) {
          return mHotPotsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mHotPots_);
        }
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot.Builder addMHotPotsBuilder() {
        return getMHotPotsFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance());
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public com.nibiru.creator.data.HotPotData.HotPot.Builder addMHotPotsBuilder(
          int index) {
        return getMHotPotsFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.HotPot.getDefaultInstance());
      }
      /**
       * <pre>
       *所有全局热点	
       * </pre>
       *
       * <code>repeated .DataFactory.HotPot m_HotPots = 6;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.HotPot.Builder> 
           getMHotPotsBuilderList() {
        return getMHotPotsFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder> 
          getMHotPotsFieldBuilder() {
        if (mHotPotsBuilder_ == null) {
          mHotPotsBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.HotPot, com.nibiru.creator.data.HotPotData.HotPot.Builder, com.nibiru.creator.data.HotPotData.HotPotOrBuilder>(
                  mHotPots_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          mHotPots_ = null;
        }
        return mHotPotsBuilder_;
      }

      private long mClickLarger_ ;
      /**
       * <pre>
       *全局热点点击放大
       * </pre>
       *
       * <code>optional int64 m_ClickLarger = 7;</code>
       */
      public boolean hasMClickLarger() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       *全局热点点击放大
       * </pre>
       *
       * <code>optional int64 m_ClickLarger = 7;</code>
       */
      public long getMClickLarger() {
        return mClickLarger_;
      }
      /**
       * <pre>
       *全局热点点击放大
       * </pre>
       *
       * <code>optional int64 m_ClickLarger = 7;</code>
       */
      public Builder setMClickLarger(long value) {
        bitField0_ |= 0x00000040;
        mClickLarger_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *全局热点点击放大
       * </pre>
       *
       * <code>optional int64 m_ClickLarger = 7;</code>
       */
      public Builder clearMClickLarger() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mClickLarger_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object mClickAudioPath_ = "";
      /**
       * <pre>
       *全局热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 8;</code>
       */
      public boolean hasMClickAudioPath() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       *全局热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 8;</code>
       */
      public java.lang.String getMClickAudioPath() {
        java.lang.Object ref = mClickAudioPath_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mClickAudioPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *全局热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 8;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMClickAudioPathBytes() {
        java.lang.Object ref = mClickAudioPath_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mClickAudioPath_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *全局热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 8;</code>
       */
      public Builder setMClickAudioPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        mClickAudioPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *全局热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 8;</code>
       */
      public Builder clearMClickAudioPath() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mClickAudioPath_ = getDefaultInstance().getMClickAudioPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *全局热点点击音效
       * </pre>
       *
       * <code>optional string m_ClickAudioPath = 8;</code>
       */
      public Builder setMClickAudioPathBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        mClickAudioPath_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.Navigation)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.Navigation)
    private static final com.nibiru.creator.data.HotPotData.Navigation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.Navigation();
    }

    public static com.nibiru.creator.data.HotPotData.Navigation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<Navigation>
        PARSER = new com.nibiru.protobuf.AbstractParser<Navigation>() {
      public Navigation parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new Navigation(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<Navigation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<Navigation> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.Navigation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ToolInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.ToolInfo)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    boolean hasMName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    java.lang.String getMName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMNameBytes();

    /**
     * <pre>
     *图片url
     * </pre>
     *
     * <code>optional string m_imgUrl = 2;</code>
     */
    boolean hasMImgUrl();
    /**
     * <pre>
     *图片url
     * </pre>
     *
     * <code>optional string m_imgUrl = 2;</code>
     */
    java.lang.String getMImgUrl();
    /**
     * <pre>
     *图片url
     * </pre>
     *
     * <code>optional string m_imgUrl = 2;</code>
     */
    com.nibiru.protobuf.ByteString
        getMImgUrlBytes();

    /**
     * <pre>
     *link url
     * </pre>
     *
     * <code>optional string m_linkUrl = 3;</code>
     */
    boolean hasMLinkUrl();
    /**
     * <pre>
     *link url
     * </pre>
     *
     * <code>optional string m_linkUrl = 3;</code>
     */
    java.lang.String getMLinkUrl();
    /**
     * <pre>
     *link url
     * </pre>
     *
     * <code>optional string m_linkUrl = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMLinkUrlBytes();
  }
  /**
   * <pre>
   *建行查询工具信息
   * </pre>
   *
   * Protobuf type {@code DataFactory.ToolInfo}
   */
  public  static final class ToolInfo extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.ToolInfo)
      ToolInfoOrBuilder {
    // Use ToolInfo.newBuilder() to construct.
    private ToolInfo(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ToolInfo() {
      mName_ = "";
      mImgUrl_ = "";
      mLinkUrl_ = "";
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ToolInfo(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mName_ = bs;
              break;
            }
            case 18: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              mImgUrl_ = bs;
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mLinkUrl_ = bs;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ToolInfo_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ToolInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.ToolInfo.class, com.nibiru.creator.data.HotPotData.ToolInfo.Builder.class);
    }

    private int bitField0_;
    public static final int M_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object mName_;
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public boolean hasMName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public java.lang.String getMName() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>optional string m_name = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMNameBytes() {
      java.lang.Object ref = mName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_IMGURL_FIELD_NUMBER = 2;
    private volatile java.lang.Object mImgUrl_;
    /**
     * <pre>
     *图片url
     * </pre>
     *
     * <code>optional string m_imgUrl = 2;</code>
     */
    public boolean hasMImgUrl() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *图片url
     * </pre>
     *
     * <code>optional string m_imgUrl = 2;</code>
     */
    public java.lang.String getMImgUrl() {
      java.lang.Object ref = mImgUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mImgUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *图片url
     * </pre>
     *
     * <code>optional string m_imgUrl = 2;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMImgUrlBytes() {
      java.lang.Object ref = mImgUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mImgUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_LINKURL_FIELD_NUMBER = 3;
    private volatile java.lang.Object mLinkUrl_;
    /**
     * <pre>
     *link url
     * </pre>
     *
     * <code>optional string m_linkUrl = 3;</code>
     */
    public boolean hasMLinkUrl() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *link url
     * </pre>
     *
     * <code>optional string m_linkUrl = 3;</code>
     */
    public java.lang.String getMLinkUrl() {
      java.lang.Object ref = mLinkUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mLinkUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *link url
     * </pre>
     *
     * <code>optional string m_linkUrl = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMLinkUrlBytes() {
      java.lang.Object ref = mLinkUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mLinkUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 2, mImgUrl_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mLinkUrl_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(2, mImgUrl_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mLinkUrl_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.ToolInfo)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.ToolInfo other = (com.nibiru.creator.data.HotPotData.ToolInfo) obj;

      boolean result = true;
      result = result && (hasMName() == other.hasMName());
      if (hasMName()) {
        result = result && getMName()
            .equals(other.getMName());
      }
      result = result && (hasMImgUrl() == other.hasMImgUrl());
      if (hasMImgUrl()) {
        result = result && getMImgUrl()
            .equals(other.getMImgUrl());
      }
      result = result && (hasMLinkUrl() == other.hasMLinkUrl());
      if (hasMLinkUrl()) {
        result = result && getMLinkUrl()
            .equals(other.getMLinkUrl());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMName()) {
        hash = (37 * hash) + M_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getMName().hashCode();
      }
      if (hasMImgUrl()) {
        hash = (37 * hash) + M_IMGURL_FIELD_NUMBER;
        hash = (53 * hash) + getMImgUrl().hashCode();
      }
      if (hasMLinkUrl()) {
        hash = (37 * hash) + M_LINKURL_FIELD_NUMBER;
        hash = (53 * hash) + getMLinkUrl().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.ToolInfo parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ToolInfo parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ToolInfo parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ToolInfo parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ToolInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ToolInfo parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ToolInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ToolInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ToolInfo parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ToolInfo parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.ToolInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * Protobuf type {@code DataFactory.ToolInfo}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.ToolInfo)
        com.nibiru.creator.data.HotPotData.ToolInfoOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ToolInfo_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ToolInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.ToolInfo.class, com.nibiru.creator.data.HotPotData.ToolInfo.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.ToolInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        mName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mImgUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        mLinkUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ToolInfo_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.ToolInfo getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.ToolInfo.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.ToolInfo build() {
        com.nibiru.creator.data.HotPotData.ToolInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.ToolInfo buildPartial() {
        com.nibiru.creator.data.HotPotData.ToolInfo result = new com.nibiru.creator.data.HotPotData.ToolInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mName_ = mName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mImgUrl_ = mImgUrl_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mLinkUrl_ = mLinkUrl_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.ToolInfo) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.ToolInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.ToolInfo other) {
        if (other == com.nibiru.creator.data.HotPotData.ToolInfo.getDefaultInstance()) return this;
        if (other.hasMName()) {
          bitField0_ |= 0x00000001;
          mName_ = other.mName_;
          onChanged();
        }
        if (other.hasMImgUrl()) {
          bitField0_ |= 0x00000002;
          mImgUrl_ = other.mImgUrl_;
          onChanged();
        }
        if (other.hasMLinkUrl()) {
          bitField0_ |= 0x00000004;
          mLinkUrl_ = other.mLinkUrl_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.ToolInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.ToolInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mName_ = "";
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public boolean hasMName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public java.lang.String getMName() {
        java.lang.Object ref = mName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMNameBytes() {
        java.lang.Object ref = mName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder setMName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder clearMName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mName_ = getDefaultInstance().getMName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>optional string m_name = 1;</code>
       */
      public Builder setMNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mImgUrl_ = "";
      /**
       * <pre>
       *图片url
       * </pre>
       *
       * <code>optional string m_imgUrl = 2;</code>
       */
      public boolean hasMImgUrl() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *图片url
       * </pre>
       *
       * <code>optional string m_imgUrl = 2;</code>
       */
      public java.lang.String getMImgUrl() {
        java.lang.Object ref = mImgUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mImgUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *图片url
       * </pre>
       *
       * <code>optional string m_imgUrl = 2;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMImgUrlBytes() {
        java.lang.Object ref = mImgUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mImgUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *图片url
       * </pre>
       *
       * <code>optional string m_imgUrl = 2;</code>
       */
      public Builder setMImgUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mImgUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片url
       * </pre>
       *
       * <code>optional string m_imgUrl = 2;</code>
       */
      public Builder clearMImgUrl() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mImgUrl_ = getDefaultInstance().getMImgUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *图片url
       * </pre>
       *
       * <code>optional string m_imgUrl = 2;</code>
       */
      public Builder setMImgUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mImgUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mLinkUrl_ = "";
      /**
       * <pre>
       *link url
       * </pre>
       *
       * <code>optional string m_linkUrl = 3;</code>
       */
      public boolean hasMLinkUrl() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *link url
       * </pre>
       *
       * <code>optional string m_linkUrl = 3;</code>
       */
      public java.lang.String getMLinkUrl() {
        java.lang.Object ref = mLinkUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mLinkUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *link url
       * </pre>
       *
       * <code>optional string m_linkUrl = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMLinkUrlBytes() {
        java.lang.Object ref = mLinkUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mLinkUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *link url
       * </pre>
       *
       * <code>optional string m_linkUrl = 3;</code>
       */
      public Builder setMLinkUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mLinkUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *link url
       * </pre>
       *
       * <code>optional string m_linkUrl = 3;</code>
       */
      public Builder clearMLinkUrl() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mLinkUrl_ = getDefaultInstance().getMLinkUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *link url
       * </pre>
       *
       * <code>optional string m_linkUrl = 3;</code>
       */
      public Builder setMLinkUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mLinkUrl_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.ToolInfo)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.ToolInfo)
    private static final com.nibiru.creator.data.HotPotData.ToolInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.ToolInfo();
    }

    public static com.nibiru.creator.data.HotPotData.ToolInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<ToolInfo>
        PARSER = new com.nibiru.protobuf.AbstractParser<ToolInfo>() {
      public ToolInfo parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new ToolInfo(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<ToolInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<ToolInfo> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.ToolInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProjectInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.ProjectInfo)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *展厅id
     * </pre>
     *
     * <code>optional string m_ehallId = 1;</code>
     */
    boolean hasMEhallId();
    /**
     * <pre>
     *展厅id
     * </pre>
     *
     * <code>optional string m_ehallId = 1;</code>
     */
    java.lang.String getMEhallId();
    /**
     * <pre>
     *展厅id
     * </pre>
     *
     * <code>optional string m_ehallId = 1;</code>
     */
    com.nibiru.protobuf.ByteString
        getMEhallIdBytes();

    /**
     * <pre>
     *展厅url
     * </pre>
     *
     * <code>optional string m_ehallUrl = 2;</code>
     */
    boolean hasMEhallUrl();
    /**
     * <pre>
     *展厅url
     * </pre>
     *
     * <code>optional string m_ehallUrl = 2;</code>
     */
    java.lang.String getMEhallUrl();
    /**
     * <pre>
     *展厅url
     * </pre>
     *
     * <code>optional string m_ehallUrl = 2;</code>
     */
    com.nibiru.protobuf.ByteString
        getMEhallUrlBytes();

    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_ehallChoosenTime = 3;</code>
     */
    boolean hasMEhallChoosenTime();
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_ehallChoosenTime = 3;</code>
     */
    java.lang.String getMEhallChoosenTime();
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_ehallChoosenTime = 3;</code>
     */
    com.nibiru.protobuf.ByteString
        getMEhallChoosenTimeBytes();

    /**
     * <pre>
     *展厅名称
     * </pre>
     *
     * <code>optional string m_ehallName = 4;</code>
     */
    boolean hasMEhallName();
    /**
     * <pre>
     *展厅名称
     * </pre>
     *
     * <code>optional string m_ehallName = 4;</code>
     */
    java.lang.String getMEhallName();
    /**
     * <pre>
     *展厅名称
     * </pre>
     *
     * <code>optional string m_ehallName = 4;</code>
     */
    com.nibiru.protobuf.ByteString
        getMEhallNameBytes();

    /**
     * <pre>
     *head标签中的js的url
     * </pre>
     *
     * <code>optional string m_jsHeadUrl = 5;</code>
     */
    boolean hasMJsHeadUrl();
    /**
     * <pre>
     *head标签中的js的url
     * </pre>
     *
     * <code>optional string m_jsHeadUrl = 5;</code>
     */
    java.lang.String getMJsHeadUrl();
    /**
     * <pre>
     *head标签中的js的url
     * </pre>
     *
     * <code>optional string m_jsHeadUrl = 5;</code>
     */
    com.nibiru.protobuf.ByteString
        getMJsHeadUrlBytes();

    /**
     * <pre>
     *尾部标签的js的url
     * </pre>
     *
     * <code>optional string m_jsTailUrl = 6;</code>
     */
    boolean hasMJsTailUrl();
    /**
     * <pre>
     *尾部标签的js的url
     * </pre>
     *
     * <code>optional string m_jsTailUrl = 6;</code>
     */
    java.lang.String getMJsTailUrl();
    /**
     * <pre>
     *尾部标签的js的url
     * </pre>
     *
     * <code>optional string m_jsTailUrl = 6;</code>
     */
    com.nibiru.protobuf.ByteString
        getMJsTailUrlBytes();

    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.ToolInfo> 
        getMToolInfoList();
    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.ToolInfo getMToolInfo(int index);
    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
     */
    int getMToolInfoCount();
    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.ToolInfoOrBuilder> 
        getMToolInfoOrBuilderList();
    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.ToolInfoOrBuilder getMToolInfoOrBuilder(
        int index);
  }
  /**
   * <pre>
   *建行信息
   * </pre>
   *
   * Protobuf type {@code DataFactory.ProjectInfo}
   */
  public  static final class ProjectInfo extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.ProjectInfo)
      ProjectInfoOrBuilder {
    // Use ProjectInfo.newBuilder() to construct.
    private ProjectInfo(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProjectInfo() {
      mEhallId_ = "";
      mEhallUrl_ = "";
      mEhallChoosenTime_ = "";
      mEhallName_ = "";
      mJsHeadUrl_ = "";
      mJsTailUrl_ = "";
      mToolInfo_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProjectInfo(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              mEhallId_ = bs;
              break;
            }
            case 18: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              mEhallUrl_ = bs;
              break;
            }
            case 26: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              mEhallChoosenTime_ = bs;
              break;
            }
            case 34: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              mEhallName_ = bs;
              break;
            }
            case 42: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              mJsHeadUrl_ = bs;
              break;
            }
            case 50: {
              com.nibiru.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              mJsTailUrl_ = bs;
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                mToolInfo_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.ToolInfo>();
                mutable_bitField0_ |= 0x00000040;
              }
              mToolInfo_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.ToolInfo.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          mToolInfo_ = java.util.Collections.unmodifiableList(mToolInfo_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ProjectInfo_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ProjectInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.ProjectInfo.class, com.nibiru.creator.data.HotPotData.ProjectInfo.Builder.class);
    }

    private int bitField0_;
    public static final int M_EHALLID_FIELD_NUMBER = 1;
    private volatile java.lang.Object mEhallId_;
    /**
     * <pre>
     *展厅id
     * </pre>
     *
     * <code>optional string m_ehallId = 1;</code>
     */
    public boolean hasMEhallId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *展厅id
     * </pre>
     *
     * <code>optional string m_ehallId = 1;</code>
     */
    public java.lang.String getMEhallId() {
      java.lang.Object ref = mEhallId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mEhallId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *展厅id
     * </pre>
     *
     * <code>optional string m_ehallId = 1;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMEhallIdBytes() {
      java.lang.Object ref = mEhallId_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mEhallId_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_EHALLURL_FIELD_NUMBER = 2;
    private volatile java.lang.Object mEhallUrl_;
    /**
     * <pre>
     *展厅url
     * </pre>
     *
     * <code>optional string m_ehallUrl = 2;</code>
     */
    public boolean hasMEhallUrl() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *展厅url
     * </pre>
     *
     * <code>optional string m_ehallUrl = 2;</code>
     */
    public java.lang.String getMEhallUrl() {
      java.lang.Object ref = mEhallUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mEhallUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *展厅url
     * </pre>
     *
     * <code>optional string m_ehallUrl = 2;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMEhallUrlBytes() {
      java.lang.Object ref = mEhallUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mEhallUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_EHALLCHOOSENTIME_FIELD_NUMBER = 3;
    private volatile java.lang.Object mEhallChoosenTime_;
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_ehallChoosenTime = 3;</code>
     */
    public boolean hasMEhallChoosenTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_ehallChoosenTime = 3;</code>
     */
    public java.lang.String getMEhallChoosenTime() {
      java.lang.Object ref = mEhallChoosenTime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mEhallChoosenTime_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *被选中的时间
     * </pre>
     *
     * <code>optional string m_ehallChoosenTime = 3;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMEhallChoosenTimeBytes() {
      java.lang.Object ref = mEhallChoosenTime_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mEhallChoosenTime_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_EHALLNAME_FIELD_NUMBER = 4;
    private volatile java.lang.Object mEhallName_;
    /**
     * <pre>
     *展厅名称
     * </pre>
     *
     * <code>optional string m_ehallName = 4;</code>
     */
    public boolean hasMEhallName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *展厅名称
     * </pre>
     *
     * <code>optional string m_ehallName = 4;</code>
     */
    public java.lang.String getMEhallName() {
      java.lang.Object ref = mEhallName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mEhallName_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *展厅名称
     * </pre>
     *
     * <code>optional string m_ehallName = 4;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMEhallNameBytes() {
      java.lang.Object ref = mEhallName_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mEhallName_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_JSHEADURL_FIELD_NUMBER = 5;
    private volatile java.lang.Object mJsHeadUrl_;
    /**
     * <pre>
     *head标签中的js的url
     * </pre>
     *
     * <code>optional string m_jsHeadUrl = 5;</code>
     */
    public boolean hasMJsHeadUrl() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *head标签中的js的url
     * </pre>
     *
     * <code>optional string m_jsHeadUrl = 5;</code>
     */
    public java.lang.String getMJsHeadUrl() {
      java.lang.Object ref = mJsHeadUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mJsHeadUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *head标签中的js的url
     * </pre>
     *
     * <code>optional string m_jsHeadUrl = 5;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMJsHeadUrlBytes() {
      java.lang.Object ref = mJsHeadUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mJsHeadUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_JSTAILURL_FIELD_NUMBER = 6;
    private volatile java.lang.Object mJsTailUrl_;
    /**
     * <pre>
     *尾部标签的js的url
     * </pre>
     *
     * <code>optional string m_jsTailUrl = 6;</code>
     */
    public boolean hasMJsTailUrl() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *尾部标签的js的url
     * </pre>
     *
     * <code>optional string m_jsTailUrl = 6;</code>
     */
    public java.lang.String getMJsTailUrl() {
      java.lang.Object ref = mJsTailUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.nibiru.protobuf.ByteString bs = 
            (com.nibiru.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mJsTailUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *尾部标签的js的url
     * </pre>
     *
     * <code>optional string m_jsTailUrl = 6;</code>
     */
    public com.nibiru.protobuf.ByteString
        getMJsTailUrlBytes() {
      java.lang.Object ref = mJsTailUrl_;
      if (ref instanceof java.lang.String) {
        com.nibiru.protobuf.ByteString b = 
            com.nibiru.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mJsTailUrl_ = b;
        return b;
      } else {
        return (com.nibiru.protobuf.ByteString) ref;
      }
    }

    public static final int M_TOOLINFO_FIELD_NUMBER = 7;
    private java.util.List<com.nibiru.creator.data.HotPotData.ToolInfo> mToolInfo_;
    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.ToolInfo> getMToolInfoList() {
      return mToolInfo_;
    }
    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.ToolInfoOrBuilder> 
        getMToolInfoOrBuilderList() {
      return mToolInfo_;
    }
    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
     */
    public int getMToolInfoCount() {
      return mToolInfo_.size();
    }
    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.ToolInfo getMToolInfo(int index) {
      return mToolInfo_.get(index);
    }
    /**
     * <pre>
     *建行查询工具信息
     * </pre>
     *
     * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.ToolInfoOrBuilder getMToolInfoOrBuilder(
        int index) {
      return mToolInfo_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 1, mEhallId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 2, mEhallUrl_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 3, mEhallChoosenTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 4, mEhallName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 5, mJsHeadUrl_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        com.nibiru.protobuf.GeneratedMessageV3.writeString(output, 6, mJsTailUrl_);
      }
      for (int i = 0; i < mToolInfo_.size(); i++) {
        output.writeMessage(7, mToolInfo_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(1, mEhallId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(2, mEhallUrl_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(3, mEhallChoosenTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(4, mEhallName_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(5, mJsHeadUrl_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.GeneratedMessageV3.computeStringSize(6, mJsTailUrl_);
      }
      for (int i = 0; i < mToolInfo_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(7, mToolInfo_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.ProjectInfo)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.ProjectInfo other = (com.nibiru.creator.data.HotPotData.ProjectInfo) obj;

      boolean result = true;
      result = result && (hasMEhallId() == other.hasMEhallId());
      if (hasMEhallId()) {
        result = result && getMEhallId()
            .equals(other.getMEhallId());
      }
      result = result && (hasMEhallUrl() == other.hasMEhallUrl());
      if (hasMEhallUrl()) {
        result = result && getMEhallUrl()
            .equals(other.getMEhallUrl());
      }
      result = result && (hasMEhallChoosenTime() == other.hasMEhallChoosenTime());
      if (hasMEhallChoosenTime()) {
        result = result && getMEhallChoosenTime()
            .equals(other.getMEhallChoosenTime());
      }
      result = result && (hasMEhallName() == other.hasMEhallName());
      if (hasMEhallName()) {
        result = result && getMEhallName()
            .equals(other.getMEhallName());
      }
      result = result && (hasMJsHeadUrl() == other.hasMJsHeadUrl());
      if (hasMJsHeadUrl()) {
        result = result && getMJsHeadUrl()
            .equals(other.getMJsHeadUrl());
      }
      result = result && (hasMJsTailUrl() == other.hasMJsTailUrl());
      if (hasMJsTailUrl()) {
        result = result && getMJsTailUrl()
            .equals(other.getMJsTailUrl());
      }
      result = result && getMToolInfoList()
          .equals(other.getMToolInfoList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasMEhallId()) {
        hash = (37 * hash) + M_EHALLID_FIELD_NUMBER;
        hash = (53 * hash) + getMEhallId().hashCode();
      }
      if (hasMEhallUrl()) {
        hash = (37 * hash) + M_EHALLURL_FIELD_NUMBER;
        hash = (53 * hash) + getMEhallUrl().hashCode();
      }
      if (hasMEhallChoosenTime()) {
        hash = (37 * hash) + M_EHALLCHOOSENTIME_FIELD_NUMBER;
        hash = (53 * hash) + getMEhallChoosenTime().hashCode();
      }
      if (hasMEhallName()) {
        hash = (37 * hash) + M_EHALLNAME_FIELD_NUMBER;
        hash = (53 * hash) + getMEhallName().hashCode();
      }
      if (hasMJsHeadUrl()) {
        hash = (37 * hash) + M_JSHEADURL_FIELD_NUMBER;
        hash = (53 * hash) + getMJsHeadUrl().hashCode();
      }
      if (hasMJsTailUrl()) {
        hash = (37 * hash) + M_JSTAILURL_FIELD_NUMBER;
        hash = (53 * hash) + getMJsTailUrl().hashCode();
      }
      if (getMToolInfoCount() > 0) {
        hash = (37 * hash) + M_TOOLINFO_FIELD_NUMBER;
        hash = (53 * hash) + getMToolInfoList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.ProjectInfo parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ProjectInfo parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ProjectInfo parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.ProjectInfo parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ProjectInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ProjectInfo parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ProjectInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ProjectInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.ProjectInfo parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.ProjectInfo parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.ProjectInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *建行信息
     * </pre>
     *
     * Protobuf type {@code DataFactory.ProjectInfo}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.ProjectInfo)
        com.nibiru.creator.data.HotPotData.ProjectInfoOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ProjectInfo_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ProjectInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.ProjectInfo.class, com.nibiru.creator.data.HotPotData.ProjectInfo.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.ProjectInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMToolInfoFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        mEhallId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        mEhallUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        mEhallChoosenTime_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        mEhallName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        mJsHeadUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        mJsTailUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        if (mToolInfoBuilder_ == null) {
          mToolInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          mToolInfoBuilder_.clear();
        }
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_ProjectInfo_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.ProjectInfo getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.ProjectInfo.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.ProjectInfo build() {
        com.nibiru.creator.data.HotPotData.ProjectInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.ProjectInfo buildPartial() {
        com.nibiru.creator.data.HotPotData.ProjectInfo result = new com.nibiru.creator.data.HotPotData.ProjectInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mEhallId_ = mEhallId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mEhallUrl_ = mEhallUrl_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mEhallChoosenTime_ = mEhallChoosenTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mEhallName_ = mEhallName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mJsHeadUrl_ = mJsHeadUrl_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mJsTailUrl_ = mJsTailUrl_;
        if (mToolInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            mToolInfo_ = java.util.Collections.unmodifiableList(mToolInfo_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.mToolInfo_ = mToolInfo_;
        } else {
          result.mToolInfo_ = mToolInfoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.ProjectInfo) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.ProjectInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.ProjectInfo other) {
        if (other == com.nibiru.creator.data.HotPotData.ProjectInfo.getDefaultInstance()) return this;
        if (other.hasMEhallId()) {
          bitField0_ |= 0x00000001;
          mEhallId_ = other.mEhallId_;
          onChanged();
        }
        if (other.hasMEhallUrl()) {
          bitField0_ |= 0x00000002;
          mEhallUrl_ = other.mEhallUrl_;
          onChanged();
        }
        if (other.hasMEhallChoosenTime()) {
          bitField0_ |= 0x00000004;
          mEhallChoosenTime_ = other.mEhallChoosenTime_;
          onChanged();
        }
        if (other.hasMEhallName()) {
          bitField0_ |= 0x00000008;
          mEhallName_ = other.mEhallName_;
          onChanged();
        }
        if (other.hasMJsHeadUrl()) {
          bitField0_ |= 0x00000010;
          mJsHeadUrl_ = other.mJsHeadUrl_;
          onChanged();
        }
        if (other.hasMJsTailUrl()) {
          bitField0_ |= 0x00000020;
          mJsTailUrl_ = other.mJsTailUrl_;
          onChanged();
        }
        if (mToolInfoBuilder_ == null) {
          if (!other.mToolInfo_.isEmpty()) {
            if (mToolInfo_.isEmpty()) {
              mToolInfo_ = other.mToolInfo_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureMToolInfoIsMutable();
              mToolInfo_.addAll(other.mToolInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.mToolInfo_.isEmpty()) {
            if (mToolInfoBuilder_.isEmpty()) {
              mToolInfoBuilder_.dispose();
              mToolInfoBuilder_ = null;
              mToolInfo_ = other.mToolInfo_;
              bitField0_ = (bitField0_ & ~0x00000040);
              mToolInfoBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMToolInfoFieldBuilder() : null;
            } else {
              mToolInfoBuilder_.addAllMessages(other.mToolInfo_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.ProjectInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.ProjectInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object mEhallId_ = "";
      /**
       * <pre>
       *展厅id
       * </pre>
       *
       * <code>optional string m_ehallId = 1;</code>
       */
      public boolean hasMEhallId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       *展厅id
       * </pre>
       *
       * <code>optional string m_ehallId = 1;</code>
       */
      public java.lang.String getMEhallId() {
        java.lang.Object ref = mEhallId_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mEhallId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *展厅id
       * </pre>
       *
       * <code>optional string m_ehallId = 1;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMEhallIdBytes() {
        java.lang.Object ref = mEhallId_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mEhallId_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *展厅id
       * </pre>
       *
       * <code>optional string m_ehallId = 1;</code>
       */
      public Builder setMEhallId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mEhallId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *展厅id
       * </pre>
       *
       * <code>optional string m_ehallId = 1;</code>
       */
      public Builder clearMEhallId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mEhallId_ = getDefaultInstance().getMEhallId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *展厅id
       * </pre>
       *
       * <code>optional string m_ehallId = 1;</code>
       */
      public Builder setMEhallIdBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        mEhallId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mEhallUrl_ = "";
      /**
       * <pre>
       *展厅url
       * </pre>
       *
       * <code>optional string m_ehallUrl = 2;</code>
       */
      public boolean hasMEhallUrl() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *展厅url
       * </pre>
       *
       * <code>optional string m_ehallUrl = 2;</code>
       */
      public java.lang.String getMEhallUrl() {
        java.lang.Object ref = mEhallUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mEhallUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *展厅url
       * </pre>
       *
       * <code>optional string m_ehallUrl = 2;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMEhallUrlBytes() {
        java.lang.Object ref = mEhallUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mEhallUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *展厅url
       * </pre>
       *
       * <code>optional string m_ehallUrl = 2;</code>
       */
      public Builder setMEhallUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mEhallUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *展厅url
       * </pre>
       *
       * <code>optional string m_ehallUrl = 2;</code>
       */
      public Builder clearMEhallUrl() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mEhallUrl_ = getDefaultInstance().getMEhallUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *展厅url
       * </pre>
       *
       * <code>optional string m_ehallUrl = 2;</code>
       */
      public Builder setMEhallUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        mEhallUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mEhallChoosenTime_ = "";
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_ehallChoosenTime = 3;</code>
       */
      public boolean hasMEhallChoosenTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_ehallChoosenTime = 3;</code>
       */
      public java.lang.String getMEhallChoosenTime() {
        java.lang.Object ref = mEhallChoosenTime_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mEhallChoosenTime_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_ehallChoosenTime = 3;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMEhallChoosenTimeBytes() {
        java.lang.Object ref = mEhallChoosenTime_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mEhallChoosenTime_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_ehallChoosenTime = 3;</code>
       */
      public Builder setMEhallChoosenTime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mEhallChoosenTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_ehallChoosenTime = 3;</code>
       */
      public Builder clearMEhallChoosenTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mEhallChoosenTime_ = getDefaultInstance().getMEhallChoosenTime();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *被选中的时间
       * </pre>
       *
       * <code>optional string m_ehallChoosenTime = 3;</code>
       */
      public Builder setMEhallChoosenTimeBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mEhallChoosenTime_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mEhallName_ = "";
      /**
       * <pre>
       *展厅名称
       * </pre>
       *
       * <code>optional string m_ehallName = 4;</code>
       */
      public boolean hasMEhallName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *展厅名称
       * </pre>
       *
       * <code>optional string m_ehallName = 4;</code>
       */
      public java.lang.String getMEhallName() {
        java.lang.Object ref = mEhallName_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mEhallName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *展厅名称
       * </pre>
       *
       * <code>optional string m_ehallName = 4;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMEhallNameBytes() {
        java.lang.Object ref = mEhallName_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mEhallName_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *展厅名称
       * </pre>
       *
       * <code>optional string m_ehallName = 4;</code>
       */
      public Builder setMEhallName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mEhallName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *展厅名称
       * </pre>
       *
       * <code>optional string m_ehallName = 4;</code>
       */
      public Builder clearMEhallName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mEhallName_ = getDefaultInstance().getMEhallName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *展厅名称
       * </pre>
       *
       * <code>optional string m_ehallName = 4;</code>
       */
      public Builder setMEhallNameBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        mEhallName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mJsHeadUrl_ = "";
      /**
       * <pre>
       *head标签中的js的url
       * </pre>
       *
       * <code>optional string m_jsHeadUrl = 5;</code>
       */
      public boolean hasMJsHeadUrl() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *head标签中的js的url
       * </pre>
       *
       * <code>optional string m_jsHeadUrl = 5;</code>
       */
      public java.lang.String getMJsHeadUrl() {
        java.lang.Object ref = mJsHeadUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mJsHeadUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *head标签中的js的url
       * </pre>
       *
       * <code>optional string m_jsHeadUrl = 5;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMJsHeadUrlBytes() {
        java.lang.Object ref = mJsHeadUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mJsHeadUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *head标签中的js的url
       * </pre>
       *
       * <code>optional string m_jsHeadUrl = 5;</code>
       */
      public Builder setMJsHeadUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mJsHeadUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *head标签中的js的url
       * </pre>
       *
       * <code>optional string m_jsHeadUrl = 5;</code>
       */
      public Builder clearMJsHeadUrl() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mJsHeadUrl_ = getDefaultInstance().getMJsHeadUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *head标签中的js的url
       * </pre>
       *
       * <code>optional string m_jsHeadUrl = 5;</code>
       */
      public Builder setMJsHeadUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mJsHeadUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object mJsTailUrl_ = "";
      /**
       * <pre>
       *尾部标签的js的url
       * </pre>
       *
       * <code>optional string m_jsTailUrl = 6;</code>
       */
      public boolean hasMJsTailUrl() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *尾部标签的js的url
       * </pre>
       *
       * <code>optional string m_jsTailUrl = 6;</code>
       */
      public java.lang.String getMJsTailUrl() {
        java.lang.Object ref = mJsTailUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.nibiru.protobuf.ByteString bs =
              (com.nibiru.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            mJsTailUrl_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *尾部标签的js的url
       * </pre>
       *
       * <code>optional string m_jsTailUrl = 6;</code>
       */
      public com.nibiru.protobuf.ByteString
          getMJsTailUrlBytes() {
        java.lang.Object ref = mJsTailUrl_;
        if (ref instanceof String) {
          com.nibiru.protobuf.ByteString b = 
              com.nibiru.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mJsTailUrl_ = b;
          return b;
        } else {
          return (com.nibiru.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *尾部标签的js的url
       * </pre>
       *
       * <code>optional string m_jsTailUrl = 6;</code>
       */
      public Builder setMJsTailUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mJsTailUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *尾部标签的js的url
       * </pre>
       *
       * <code>optional string m_jsTailUrl = 6;</code>
       */
      public Builder clearMJsTailUrl() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mJsTailUrl_ = getDefaultInstance().getMJsTailUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *尾部标签的js的url
       * </pre>
       *
       * <code>optional string m_jsTailUrl = 6;</code>
       */
      public Builder setMJsTailUrlBytes(
          com.nibiru.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        mJsTailUrl_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.ToolInfo> mToolInfo_ =
        java.util.Collections.emptyList();
      private void ensureMToolInfoIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          mToolInfo_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.ToolInfo>(mToolInfo_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ToolInfo, com.nibiru.creator.data.HotPotData.ToolInfo.Builder, com.nibiru.creator.data.HotPotData.ToolInfoOrBuilder> mToolInfoBuilder_;

      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.ToolInfo> getMToolInfoList() {
        if (mToolInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mToolInfo_);
        } else {
          return mToolInfoBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public int getMToolInfoCount() {
        if (mToolInfoBuilder_ == null) {
          return mToolInfo_.size();
        } else {
          return mToolInfoBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.ToolInfo getMToolInfo(int index) {
        if (mToolInfoBuilder_ == null) {
          return mToolInfo_.get(index);
        } else {
          return mToolInfoBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public Builder setMToolInfo(
          int index, com.nibiru.creator.data.HotPotData.ToolInfo value) {
        if (mToolInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMToolInfoIsMutable();
          mToolInfo_.set(index, value);
          onChanged();
        } else {
          mToolInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public Builder setMToolInfo(
          int index, com.nibiru.creator.data.HotPotData.ToolInfo.Builder builderForValue) {
        if (mToolInfoBuilder_ == null) {
          ensureMToolInfoIsMutable();
          mToolInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          mToolInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public Builder addMToolInfo(com.nibiru.creator.data.HotPotData.ToolInfo value) {
        if (mToolInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMToolInfoIsMutable();
          mToolInfo_.add(value);
          onChanged();
        } else {
          mToolInfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public Builder addMToolInfo(
          int index, com.nibiru.creator.data.HotPotData.ToolInfo value) {
        if (mToolInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMToolInfoIsMutable();
          mToolInfo_.add(index, value);
          onChanged();
        } else {
          mToolInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public Builder addMToolInfo(
          com.nibiru.creator.data.HotPotData.ToolInfo.Builder builderForValue) {
        if (mToolInfoBuilder_ == null) {
          ensureMToolInfoIsMutable();
          mToolInfo_.add(builderForValue.build());
          onChanged();
        } else {
          mToolInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public Builder addMToolInfo(
          int index, com.nibiru.creator.data.HotPotData.ToolInfo.Builder builderForValue) {
        if (mToolInfoBuilder_ == null) {
          ensureMToolInfoIsMutable();
          mToolInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          mToolInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public Builder addAllMToolInfo(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.ToolInfo> values) {
        if (mToolInfoBuilder_ == null) {
          ensureMToolInfoIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mToolInfo_);
          onChanged();
        } else {
          mToolInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public Builder clearMToolInfo() {
        if (mToolInfoBuilder_ == null) {
          mToolInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          mToolInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public Builder removeMToolInfo(int index) {
        if (mToolInfoBuilder_ == null) {
          ensureMToolInfoIsMutable();
          mToolInfo_.remove(index);
          onChanged();
        } else {
          mToolInfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.ToolInfo.Builder getMToolInfoBuilder(
          int index) {
        return getMToolInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.ToolInfoOrBuilder getMToolInfoOrBuilder(
          int index) {
        if (mToolInfoBuilder_ == null) {
          return mToolInfo_.get(index);  } else {
          return mToolInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.ToolInfoOrBuilder> 
           getMToolInfoOrBuilderList() {
        if (mToolInfoBuilder_ != null) {
          return mToolInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mToolInfo_);
        }
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.ToolInfo.Builder addMToolInfoBuilder() {
        return getMToolInfoFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.ToolInfo.getDefaultInstance());
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.ToolInfo.Builder addMToolInfoBuilder(
          int index) {
        return getMToolInfoFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.ToolInfo.getDefaultInstance());
      }
      /**
       * <pre>
       *建行查询工具信息
       * </pre>
       *
       * <code>repeated .DataFactory.ToolInfo m_toolInfo = 7;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.ToolInfo.Builder> 
           getMToolInfoBuilderList() {
        return getMToolInfoFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ToolInfo, com.nibiru.creator.data.HotPotData.ToolInfo.Builder, com.nibiru.creator.data.HotPotData.ToolInfoOrBuilder> 
          getMToolInfoFieldBuilder() {
        if (mToolInfoBuilder_ == null) {
          mToolInfoBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.ToolInfo, com.nibiru.creator.data.HotPotData.ToolInfo.Builder, com.nibiru.creator.data.HotPotData.ToolInfoOrBuilder>(
                  mToolInfo_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          mToolInfo_ = null;
        }
        return mToolInfoBuilder_;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.ProjectInfo)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.ProjectInfo)
    private static final com.nibiru.creator.data.HotPotData.ProjectInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.ProjectInfo();
    }

    public static com.nibiru.creator.data.HotPotData.ProjectInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<ProjectInfo>
        PARSER = new com.nibiru.protobuf.AbstractParser<ProjectInfo>() {
      public ProjectInfo parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new ProjectInfo(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<ProjectInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<ProjectInfo> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.ProjectInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SkyBoxSceneGroupOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataFactory.SkyBoxSceneGroup)
      com.nibiru.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> 
        getMScenesList();
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
     */
    com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute getMScenes(int index);
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
     */
    int getMScenesCount();
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder> 
        getMScenesOrBuilderList();
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
     */
    com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder getMScenesOrBuilder(
        int index);

    /**
     * <pre>
     *主场景ID
     * </pre>
     *
     * <code>required int32 m_FirstSceneID = 2;</code>
     */
    boolean hasMFirstSceneID();
    /**
     * <pre>
     *主场景ID
     * </pre>
     *
     * <code>required int32 m_FirstSceneID = 2;</code>
     */
    int getMFirstSceneID();

    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
     */
    boolean hasMAllBackGroundAudio();
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.BackGroundAudio getMAllBackGroundAudio();
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
     */
    com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder getMAllBackGroundAudioOrBuilder();

    /**
     * <pre>
     *工程对应软件版本号
     * </pre>
     *
     * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
     */
    boolean hasProjVersion();
    /**
     * <pre>
     *工程对应软件版本号
     * </pre>
     *
     * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.ProjVersion getProjVersion();
    /**
     * <pre>
     *工程对应软件版本号
     * </pre>
     *
     * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
     */
    com.nibiru.creator.data.HotPotData.ProjVersionOrBuilder getProjVersionOrBuilder();

    /**
     * <pre>
     *微信分享内容  	
     * </pre>
     *
     * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
     */
    boolean hasMWeChatshare();
    /**
     * <pre>
     *微信分享内容  	
     * </pre>
     *
     * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.WeChatShare getMWeChatshare();
    /**
     * <pre>
     *微信分享内容  	
     * </pre>
     *
     * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
     */
    com.nibiru.creator.data.HotPotData.WeChatShareOrBuilder getMWeChatshareOrBuilder();

    /**
     * <pre>
     *全局背景音乐标志，0应用到图片场景，1应用到所有场景
     * </pre>
     *
     * <code>optional int32 m_allBackGroundAudioFlag = 6;</code>
     */
    boolean hasMAllBackGroundAudioFlag();
    /**
     * <pre>
     *全局背景音乐标志，0应用到图片场景，1应用到所有场景
     * </pre>
     *
     * <code>optional int32 m_allBackGroundAudioFlag = 6;</code>
     */
    int getMAllBackGroundAudioFlag();

    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.sceneGroup> 
        getMSceneGroupsList();
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.sceneGroup getMSceneGroups(int index);
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
     */
    int getMSceneGroupsCount();
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.sceneGroupOrBuilder> 
        getMSceneGroupsOrBuilderList();
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
     */
    com.nibiru.creator.data.HotPotData.sceneGroupOrBuilder getMSceneGroupsOrBuilder(
        int index);

    /**
     * <pre>
     *导览分类
     * </pre>
     *
     * <code>repeated .DataFactory.Category m_category = 8;</code>
     */
    java.util.List<com.nibiru.creator.data.HotPotData.Category> 
        getMCategoryList();
    /**
     * <pre>
     *导览分类
     * </pre>
     *
     * <code>repeated .DataFactory.Category m_category = 8;</code>
     */
    com.nibiru.creator.data.HotPotData.Category getMCategory(int index);
    /**
     * <pre>
     *导览分类
     * </pre>
     *
     * <code>repeated .DataFactory.Category m_category = 8;</code>
     */
    int getMCategoryCount();
    /**
     * <pre>
     *导览分类
     * </pre>
     *
     * <code>repeated .DataFactory.Category m_category = 8;</code>
     */
    java.util.List<? extends com.nibiru.creator.data.HotPotData.CategoryOrBuilder> 
        getMCategoryOrBuilderList();
    /**
     * <pre>
     *导览分类
     * </pre>
     *
     * <code>repeated .DataFactory.Category m_category = 8;</code>
     */
    com.nibiru.creator.data.HotPotData.CategoryOrBuilder getMCategoryOrBuilder(
        int index);

    /**
     * <pre>
     *导览配置项
     * </pre>
     *
     * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
     */
    boolean hasMNavigationOption();
    /**
     * <pre>
     *导览配置项
     * </pre>
     *
     * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
     */
    com.nibiru.creator.data.HotPotData.Navigation getMNavigationOption();
    /**
     * <pre>
     *导览配置项
     * </pre>
     *
     * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
     */
    com.nibiru.creator.data.HotPotData.NavigationOrBuilder getMNavigationOptionOrBuilder();

    /**
     * <pre>
     *全局资源id 导览分类用
     * </pre>
     *
     * <code>optional int32 g_id = 10;</code>
     */
    boolean hasGId();
    /**
     * <pre>
     *全局资源id 导览分类用
     * </pre>
     *
     * <code>optional int32 g_id = 10;</code>
     */
    int getGId();

    /**
     * <pre>
     *建行信息
     * </pre>
     *
     * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
     */
    boolean hasMProjectInfo();
    /**
     * <pre>
     *建行信息
     * </pre>
     *
     * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
     */
    com.nibiru.creator.data.HotPotData.ProjectInfo getMProjectInfo();
    /**
     * <pre>
     *建行信息
     * </pre>
     *
     * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
     */
    com.nibiru.creator.data.HotPotData.ProjectInfoOrBuilder getMProjectInfoOrBuilder();
  }
  /**
   * <pre>
   * 场景组
   * </pre>
   *
   * Protobuf type {@code DataFactory.SkyBoxSceneGroup}
   */
  public  static final class SkyBoxSceneGroup extends
      com.nibiru.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataFactory.SkyBoxSceneGroup)
      SkyBoxSceneGroupOrBuilder {
    // Use SkyBoxSceneGroup.newBuilder() to construct.
    private SkyBoxSceneGroup(com.nibiru.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SkyBoxSceneGroup() {
      mScenes_ = java.util.Collections.emptyList();
      mFirstSceneID_ = 0;
      mAllBackGroundAudioFlag_ = 0;
      mSceneGroups_ = java.util.Collections.emptyList();
      mCategory_ = java.util.Collections.emptyList();
      gId_ = 0;
    }

    @java.lang.Override
    public final com.nibiru.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SkyBoxSceneGroup(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.nibiru.protobuf.UnknownFieldSet.Builder unknownFields =
          com.nibiru.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                mScenes_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute>();
                mutable_bitField0_ |= 0x00000001;
              }
              mScenes_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              mFirstSceneID_ = input.readInt32();
              break;
            }
            case 26: {
              com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mAllBackGroundAudio_.toBuilder();
              }
              mAllBackGroundAudio_ = input.readMessage(com.nibiru.creator.data.HotPotData.BackGroundAudio.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mAllBackGroundAudio_);
                mAllBackGroundAudio_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 34: {
              com.nibiru.creator.data.HotPotData.ProjVersion.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = projVersion_.toBuilder();
              }
              projVersion_ = input.readMessage(com.nibiru.creator.data.HotPotData.ProjVersion.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(projVersion_);
                projVersion_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 42: {
              com.nibiru.creator.data.HotPotData.WeChatShare.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = mWeChatshare_.toBuilder();
              }
              mWeChatshare_ = input.readMessage(com.nibiru.creator.data.HotPotData.WeChatShare.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mWeChatshare_);
                mWeChatshare_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              mAllBackGroundAudioFlag_ = input.readInt32();
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                mSceneGroups_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.sceneGroup>();
                mutable_bitField0_ |= 0x00000040;
              }
              mSceneGroups_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.sceneGroup.PARSER, extensionRegistry));
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                mCategory_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.Category>();
                mutable_bitField0_ |= 0x00000080;
              }
              mCategory_.add(
                  input.readMessage(com.nibiru.creator.data.HotPotData.Category.PARSER, extensionRegistry));
              break;
            }
            case 74: {
              com.nibiru.creator.data.HotPotData.Navigation.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = mNavigationOption_.toBuilder();
              }
              mNavigationOption_ = input.readMessage(com.nibiru.creator.data.HotPotData.Navigation.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mNavigationOption_);
                mNavigationOption_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000040;
              gId_ = input.readInt32();
              break;
            }
            case 90: {
              com.nibiru.creator.data.HotPotData.ProjectInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = mProjectInfo_.toBuilder();
              }
              mProjectInfo_ = input.readMessage(com.nibiru.creator.data.HotPotData.ProjectInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mProjectInfo_);
                mProjectInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.nibiru.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          mScenes_ = java.util.Collections.unmodifiableList(mScenes_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          mSceneGroups_ = java.util.Collections.unmodifiableList(mSceneGroups_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          mCategory_ = java.util.Collections.unmodifiableList(mCategory_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.nibiru.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkyBoxSceneGroup_descriptor;
    }

    protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkyBoxSceneGroup_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup.class, com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup.Builder.class);
    }

    private int bitField0_;
    public static final int M_SCENES_FIELD_NUMBER = 1;
    private java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> mScenes_;
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> getMScenesList() {
      return mScenes_;
    }
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder> 
        getMScenesOrBuilderList() {
      return mScenes_;
    }
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
     */
    public int getMScenesCount() {
      return mScenes_.size();
    }
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
     */
    public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute getMScenes(int index) {
      return mScenes_.get(index);
    }
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
     */
    public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder getMScenesOrBuilder(
        int index) {
      return mScenes_.get(index);
    }

    public static final int M_FIRSTSCENEID_FIELD_NUMBER = 2;
    private int mFirstSceneID_;
    /**
     * <pre>
     *主场景ID
     * </pre>
     *
     * <code>required int32 m_FirstSceneID = 2;</code>
     */
    public boolean hasMFirstSceneID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     *主场景ID
     * </pre>
     *
     * <code>required int32 m_FirstSceneID = 2;</code>
     */
    public int getMFirstSceneID() {
      return mFirstSceneID_;
    }

    public static final int M_ALLBACKGROUNDAUDIO_FIELD_NUMBER = 3;
    private com.nibiru.creator.data.HotPotData.BackGroundAudio mAllBackGroundAudio_;
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
     */
    public boolean hasMAllBackGroundAudio() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.BackGroundAudio getMAllBackGroundAudio() {
      return mAllBackGroundAudio_ == null ? com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance() : mAllBackGroundAudio_;
    }
    /**
     * <pre>
     *背景音乐
     * </pre>
     *
     * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
     */
    public com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder getMAllBackGroundAudioOrBuilder() {
      return mAllBackGroundAudio_ == null ? com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance() : mAllBackGroundAudio_;
    }

    public static final int PROJVERSION_FIELD_NUMBER = 4;
    private com.nibiru.creator.data.HotPotData.ProjVersion projVersion_;
    /**
     * <pre>
     *工程对应软件版本号
     * </pre>
     *
     * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
     */
    public boolean hasProjVersion() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     *工程对应软件版本号
     * </pre>
     *
     * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.ProjVersion getProjVersion() {
      return projVersion_ == null ? com.nibiru.creator.data.HotPotData.ProjVersion.getDefaultInstance() : projVersion_;
    }
    /**
     * <pre>
     *工程对应软件版本号
     * </pre>
     *
     * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
     */
    public com.nibiru.creator.data.HotPotData.ProjVersionOrBuilder getProjVersionOrBuilder() {
      return projVersion_ == null ? com.nibiru.creator.data.HotPotData.ProjVersion.getDefaultInstance() : projVersion_;
    }

    public static final int M_WECHATSHARE_FIELD_NUMBER = 5;
    private com.nibiru.creator.data.HotPotData.WeChatShare mWeChatshare_;
    /**
     * <pre>
     *微信分享内容  	
     * </pre>
     *
     * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
     */
    public boolean hasMWeChatshare() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     *微信分享内容  	
     * </pre>
     *
     * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.WeChatShare getMWeChatshare() {
      return mWeChatshare_ == null ? com.nibiru.creator.data.HotPotData.WeChatShare.getDefaultInstance() : mWeChatshare_;
    }
    /**
     * <pre>
     *微信分享内容  	
     * </pre>
     *
     * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
     */
    public com.nibiru.creator.data.HotPotData.WeChatShareOrBuilder getMWeChatshareOrBuilder() {
      return mWeChatshare_ == null ? com.nibiru.creator.data.HotPotData.WeChatShare.getDefaultInstance() : mWeChatshare_;
    }

    public static final int M_ALLBACKGROUNDAUDIOFLAG_FIELD_NUMBER = 6;
    private int mAllBackGroundAudioFlag_;
    /**
     * <pre>
     *全局背景音乐标志，0应用到图片场景，1应用到所有场景
     * </pre>
     *
     * <code>optional int32 m_allBackGroundAudioFlag = 6;</code>
     */
    public boolean hasMAllBackGroundAudioFlag() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     *全局背景音乐标志，0应用到图片场景，1应用到所有场景
     * </pre>
     *
     * <code>optional int32 m_allBackGroundAudioFlag = 6;</code>
     */
    public int getMAllBackGroundAudioFlag() {
      return mAllBackGroundAudioFlag_;
    }

    public static final int M_SCENEGROUPS_FIELD_NUMBER = 7;
    private java.util.List<com.nibiru.creator.data.HotPotData.sceneGroup> mSceneGroups_;
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.sceneGroup> getMSceneGroupsList() {
      return mSceneGroups_;
    }
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.sceneGroupOrBuilder> 
        getMSceneGroupsOrBuilderList() {
      return mSceneGroups_;
    }
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
     */
    public int getMSceneGroupsCount() {
      return mSceneGroups_.size();
    }
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.sceneGroup getMSceneGroups(int index) {
      return mSceneGroups_.get(index);
    }
    /**
     * <pre>
     *工程中所有场景
     * </pre>
     *
     * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
     */
    public com.nibiru.creator.data.HotPotData.sceneGroupOrBuilder getMSceneGroupsOrBuilder(
        int index) {
      return mSceneGroups_.get(index);
    }

    public static final int M_CATEGORY_FIELD_NUMBER = 8;
    private java.util.List<com.nibiru.creator.data.HotPotData.Category> mCategory_;
    /**
     * <pre>
     *导览分类
     * </pre>
     *
     * <code>repeated .DataFactory.Category m_category = 8;</code>
     */
    public java.util.List<com.nibiru.creator.data.HotPotData.Category> getMCategoryList() {
      return mCategory_;
    }
    /**
     * <pre>
     *导览分类
     * </pre>
     *
     * <code>repeated .DataFactory.Category m_category = 8;</code>
     */
    public java.util.List<? extends com.nibiru.creator.data.HotPotData.CategoryOrBuilder> 
        getMCategoryOrBuilderList() {
      return mCategory_;
    }
    /**
     * <pre>
     *导览分类
     * </pre>
     *
     * <code>repeated .DataFactory.Category m_category = 8;</code>
     */
    public int getMCategoryCount() {
      return mCategory_.size();
    }
    /**
     * <pre>
     *导览分类
     * </pre>
     *
     * <code>repeated .DataFactory.Category m_category = 8;</code>
     */
    public com.nibiru.creator.data.HotPotData.Category getMCategory(int index) {
      return mCategory_.get(index);
    }
    /**
     * <pre>
     *导览分类
     * </pre>
     *
     * <code>repeated .DataFactory.Category m_category = 8;</code>
     */
    public com.nibiru.creator.data.HotPotData.CategoryOrBuilder getMCategoryOrBuilder(
        int index) {
      return mCategory_.get(index);
    }

    public static final int M_NAVIGATIONOPTION_FIELD_NUMBER = 9;
    private com.nibiru.creator.data.HotPotData.Navigation mNavigationOption_;
    /**
     * <pre>
     *导览配置项
     * </pre>
     *
     * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
     */
    public boolean hasMNavigationOption() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     *导览配置项
     * </pre>
     *
     * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
     */
    public com.nibiru.creator.data.HotPotData.Navigation getMNavigationOption() {
      return mNavigationOption_ == null ? com.nibiru.creator.data.HotPotData.Navigation.getDefaultInstance() : mNavigationOption_;
    }
    /**
     * <pre>
     *导览配置项
     * </pre>
     *
     * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
     */
    public com.nibiru.creator.data.HotPotData.NavigationOrBuilder getMNavigationOptionOrBuilder() {
      return mNavigationOption_ == null ? com.nibiru.creator.data.HotPotData.Navigation.getDefaultInstance() : mNavigationOption_;
    }

    public static final int G_ID_FIELD_NUMBER = 10;
    private int gId_;
    /**
     * <pre>
     *全局资源id 导览分类用
     * </pre>
     *
     * <code>optional int32 g_id = 10;</code>
     */
    public boolean hasGId() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *全局资源id 导览分类用
     * </pre>
     *
     * <code>optional int32 g_id = 10;</code>
     */
    public int getGId() {
      return gId_;
    }

    public static final int M_PROJECTINFO_FIELD_NUMBER = 11;
    private com.nibiru.creator.data.HotPotData.ProjectInfo mProjectInfo_;
    /**
     * <pre>
     *建行信息
     * </pre>
     *
     * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
     */
    public boolean hasMProjectInfo() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     *建行信息
     * </pre>
     *
     * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
     */
    public com.nibiru.creator.data.HotPotData.ProjectInfo getMProjectInfo() {
      return mProjectInfo_ == null ? com.nibiru.creator.data.HotPotData.ProjectInfo.getDefaultInstance() : mProjectInfo_;
    }
    /**
     * <pre>
     *建行信息
     * </pre>
     *
     * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
     */
    public com.nibiru.creator.data.HotPotData.ProjectInfoOrBuilder getMProjectInfoOrBuilder() {
      return mProjectInfo_ == null ? com.nibiru.creator.data.HotPotData.ProjectInfo.getDefaultInstance() : mProjectInfo_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMFirstSceneID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAllBackGroundAudio()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getMScenesCount(); i++) {
        if (!getMScenes(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getMAllBackGroundAudio().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasProjVersion()) {
        if (!getProjVersion().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMNavigationOption()) {
        if (!getMNavigationOption().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.nibiru.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < mScenes_.size(); i++) {
        output.writeMessage(1, mScenes_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, mFirstSceneID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, getMAllBackGroundAudio());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, getProjVersion());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, getMWeChatshare());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, mAllBackGroundAudioFlag_);
      }
      for (int i = 0; i < mSceneGroups_.size(); i++) {
        output.writeMessage(7, mSceneGroups_.get(i));
      }
      for (int i = 0; i < mCategory_.size(); i++) {
        output.writeMessage(8, mCategory_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(9, getMNavigationOption());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(10, gId_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(11, getMProjectInfo());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < mScenes_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(1, mScenes_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(2, mFirstSceneID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(3, getMAllBackGroundAudio());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(4, getProjVersion());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(5, getMWeChatshare());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(6, mAllBackGroundAudioFlag_);
      }
      for (int i = 0; i < mSceneGroups_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(7, mSceneGroups_.get(i));
      }
      for (int i = 0; i < mCategory_.size(); i++) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(8, mCategory_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(9, getMNavigationOption());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeInt32Size(10, gId_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.nibiru.protobuf.CodedOutputStream
          .computeMessageSize(11, getMProjectInfo());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup)) {
        return super.equals(obj);
      }
      com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup other = (com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup) obj;

      boolean result = true;
      result = result && getMScenesList()
          .equals(other.getMScenesList());
      result = result && (hasMFirstSceneID() == other.hasMFirstSceneID());
      if (hasMFirstSceneID()) {
        result = result && (getMFirstSceneID()
            == other.getMFirstSceneID());
      }
      result = result && (hasMAllBackGroundAudio() == other.hasMAllBackGroundAudio());
      if (hasMAllBackGroundAudio()) {
        result = result && getMAllBackGroundAudio()
            .equals(other.getMAllBackGroundAudio());
      }
      result = result && (hasProjVersion() == other.hasProjVersion());
      if (hasProjVersion()) {
        result = result && getProjVersion()
            .equals(other.getProjVersion());
      }
      result = result && (hasMWeChatshare() == other.hasMWeChatshare());
      if (hasMWeChatshare()) {
        result = result && getMWeChatshare()
            .equals(other.getMWeChatshare());
      }
      result = result && (hasMAllBackGroundAudioFlag() == other.hasMAllBackGroundAudioFlag());
      if (hasMAllBackGroundAudioFlag()) {
        result = result && (getMAllBackGroundAudioFlag()
            == other.getMAllBackGroundAudioFlag());
      }
      result = result && getMSceneGroupsList()
          .equals(other.getMSceneGroupsList());
      result = result && getMCategoryList()
          .equals(other.getMCategoryList());
      result = result && (hasMNavigationOption() == other.hasMNavigationOption());
      if (hasMNavigationOption()) {
        result = result && getMNavigationOption()
            .equals(other.getMNavigationOption());
      }
      result = result && (hasGId() == other.hasGId());
      if (hasGId()) {
        result = result && (getGId()
            == other.getGId());
      }
      result = result && (hasMProjectInfo() == other.hasMProjectInfo());
      if (hasMProjectInfo()) {
        result = result && getMProjectInfo()
            .equals(other.getMProjectInfo());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getMScenesCount() > 0) {
        hash = (37 * hash) + M_SCENES_FIELD_NUMBER;
        hash = (53 * hash) + getMScenesList().hashCode();
      }
      if (hasMFirstSceneID()) {
        hash = (37 * hash) + M_FIRSTSCENEID_FIELD_NUMBER;
        hash = (53 * hash) + getMFirstSceneID();
      }
      if (hasMAllBackGroundAudio()) {
        hash = (37 * hash) + M_ALLBACKGROUNDAUDIO_FIELD_NUMBER;
        hash = (53 * hash) + getMAllBackGroundAudio().hashCode();
      }
      if (hasProjVersion()) {
        hash = (37 * hash) + PROJVERSION_FIELD_NUMBER;
        hash = (53 * hash) + getProjVersion().hashCode();
      }
      if (hasMWeChatshare()) {
        hash = (37 * hash) + M_WECHATSHARE_FIELD_NUMBER;
        hash = (53 * hash) + getMWeChatshare().hashCode();
      }
      if (hasMAllBackGroundAudioFlag()) {
        hash = (37 * hash) + M_ALLBACKGROUNDAUDIOFLAG_FIELD_NUMBER;
        hash = (53 * hash) + getMAllBackGroundAudioFlag();
      }
      if (getMSceneGroupsCount() > 0) {
        hash = (37 * hash) + M_SCENEGROUPS_FIELD_NUMBER;
        hash = (53 * hash) + getMSceneGroupsList().hashCode();
      }
      if (getMCategoryCount() > 0) {
        hash = (37 * hash) + M_CATEGORY_FIELD_NUMBER;
        hash = (53 * hash) + getMCategoryList().hashCode();
      }
      if (hasMNavigationOption()) {
        hash = (37 * hash) + M_NAVIGATIONOPTION_FIELD_NUMBER;
        hash = (53 * hash) + getMNavigationOption().hashCode();
      }
      if (hasGId()) {
        hash = (37 * hash) + G_ID_FIELD_NUMBER;
        hash = (53 * hash) + getGId();
      }
      if (hasMProjectInfo()) {
        hash = (37 * hash) + M_PROJECTINFO_FIELD_NUMBER;
        hash = (53 * hash) + getMProjectInfo().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parseFrom(
        com.nibiru.protobuf.ByteString data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parseFrom(
        com.nibiru.protobuf.ByteString data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parseFrom(byte[] data)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parseFrom(
        byte[] data,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.nibiru.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parseFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parseDelimitedFrom(
        java.io.InputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parseFrom(
        com.nibiru.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parseFrom(
        com.nibiru.protobuf.CodedInputStream input,
        com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.nibiru.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 场景组
     * </pre>
     *
     * Protobuf type {@code DataFactory.SkyBoxSceneGroup}
     */
    public static final class Builder extends
        com.nibiru.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataFactory.SkyBoxSceneGroup)
        com.nibiru.creator.data.HotPotData.SkyBoxSceneGroupOrBuilder {
      public static final com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkyBoxSceneGroup_descriptor;
      }

      protected com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkyBoxSceneGroup_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup.class, com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup.Builder.class);
      }

      // Construct using com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.nibiru.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.nibiru.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMScenesFieldBuilder();
          getMAllBackGroundAudioFieldBuilder();
          getProjVersionFieldBuilder();
          getMWeChatshareFieldBuilder();
          getMSceneGroupsFieldBuilder();
          getMCategoryFieldBuilder();
          getMNavigationOptionFieldBuilder();
          getMProjectInfoFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (mScenesBuilder_ == null) {
          mScenes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          mScenesBuilder_.clear();
        }
        mFirstSceneID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (mAllBackGroundAudioBuilder_ == null) {
          mAllBackGroundAudio_ = null;
        } else {
          mAllBackGroundAudioBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (projVersionBuilder_ == null) {
          projVersion_ = null;
        } else {
          projVersionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (mWeChatshareBuilder_ == null) {
          mWeChatshare_ = null;
        } else {
          mWeChatshareBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        mAllBackGroundAudioFlag_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (mSceneGroupsBuilder_ == null) {
          mSceneGroups_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          mSceneGroupsBuilder_.clear();
        }
        if (mCategoryBuilder_ == null) {
          mCategory_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          mCategoryBuilder_.clear();
        }
        if (mNavigationOptionBuilder_ == null) {
          mNavigationOption_ = null;
        } else {
          mNavigationOptionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        gId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        if (mProjectInfoBuilder_ == null) {
          mProjectInfo_ = null;
        } else {
          mProjectInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public com.nibiru.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nibiru.creator.data.HotPotData.internal_static_DataFactory_SkyBoxSceneGroup_descriptor;
      }

      public com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup getDefaultInstanceForType() {
        return com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup.getDefaultInstance();
      }

      public com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup build() {
        com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup buildPartial() {
        com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup result = new com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (mScenesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            mScenes_ = java.util.Collections.unmodifiableList(mScenes_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.mScenes_ = mScenes_;
        } else {
          result.mScenes_ = mScenesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mFirstSceneID_ = mFirstSceneID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        if (mAllBackGroundAudioBuilder_ == null) {
          result.mAllBackGroundAudio_ = mAllBackGroundAudio_;
        } else {
          result.mAllBackGroundAudio_ = mAllBackGroundAudioBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (projVersionBuilder_ == null) {
          result.projVersion_ = projVersion_;
        } else {
          result.projVersion_ = projVersionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        if (mWeChatshareBuilder_ == null) {
          result.mWeChatshare_ = mWeChatshare_;
        } else {
          result.mWeChatshare_ = mWeChatshareBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mAllBackGroundAudioFlag_ = mAllBackGroundAudioFlag_;
        if (mSceneGroupsBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            mSceneGroups_ = java.util.Collections.unmodifiableList(mSceneGroups_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.mSceneGroups_ = mSceneGroups_;
        } else {
          result.mSceneGroups_ = mSceneGroupsBuilder_.build();
        }
        if (mCategoryBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            mCategory_ = java.util.Collections.unmodifiableList(mCategory_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.mCategory_ = mCategory_;
        } else {
          result.mCategory_ = mCategoryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000020;
        }
        if (mNavigationOptionBuilder_ == null) {
          result.mNavigationOption_ = mNavigationOption_;
        } else {
          result.mNavigationOption_ = mNavigationOptionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000040;
        }
        result.gId_ = gId_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000080;
        }
        if (mProjectInfoBuilder_ == null) {
          result.mProjectInfo_ = mProjectInfo_;
        } else {
          result.mProjectInfo_ = mProjectInfoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.nibiru.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.nibiru.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.nibiru.protobuf.Message other) {
        if (other instanceof com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup) {
          return mergeFrom((com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup other) {
        if (other == com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup.getDefaultInstance()) return this;
        if (mScenesBuilder_ == null) {
          if (!other.mScenes_.isEmpty()) {
            if (mScenes_.isEmpty()) {
              mScenes_ = other.mScenes_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMScenesIsMutable();
              mScenes_.addAll(other.mScenes_);
            }
            onChanged();
          }
        } else {
          if (!other.mScenes_.isEmpty()) {
            if (mScenesBuilder_.isEmpty()) {
              mScenesBuilder_.dispose();
              mScenesBuilder_ = null;
              mScenes_ = other.mScenes_;
              bitField0_ = (bitField0_ & ~0x00000001);
              mScenesBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMScenesFieldBuilder() : null;
            } else {
              mScenesBuilder_.addAllMessages(other.mScenes_);
            }
          }
        }
        if (other.hasMFirstSceneID()) {
          setMFirstSceneID(other.getMFirstSceneID());
        }
        if (other.hasMAllBackGroundAudio()) {
          mergeMAllBackGroundAudio(other.getMAllBackGroundAudio());
        }
        if (other.hasProjVersion()) {
          mergeProjVersion(other.getProjVersion());
        }
        if (other.hasMWeChatshare()) {
          mergeMWeChatshare(other.getMWeChatshare());
        }
        if (other.hasMAllBackGroundAudioFlag()) {
          setMAllBackGroundAudioFlag(other.getMAllBackGroundAudioFlag());
        }
        if (mSceneGroupsBuilder_ == null) {
          if (!other.mSceneGroups_.isEmpty()) {
            if (mSceneGroups_.isEmpty()) {
              mSceneGroups_ = other.mSceneGroups_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureMSceneGroupsIsMutable();
              mSceneGroups_.addAll(other.mSceneGroups_);
            }
            onChanged();
          }
        } else {
          if (!other.mSceneGroups_.isEmpty()) {
            if (mSceneGroupsBuilder_.isEmpty()) {
              mSceneGroupsBuilder_.dispose();
              mSceneGroupsBuilder_ = null;
              mSceneGroups_ = other.mSceneGroups_;
              bitField0_ = (bitField0_ & ~0x00000040);
              mSceneGroupsBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMSceneGroupsFieldBuilder() : null;
            } else {
              mSceneGroupsBuilder_.addAllMessages(other.mSceneGroups_);
            }
          }
        }
        if (mCategoryBuilder_ == null) {
          if (!other.mCategory_.isEmpty()) {
            if (mCategory_.isEmpty()) {
              mCategory_ = other.mCategory_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureMCategoryIsMutable();
              mCategory_.addAll(other.mCategory_);
            }
            onChanged();
          }
        } else {
          if (!other.mCategory_.isEmpty()) {
            if (mCategoryBuilder_.isEmpty()) {
              mCategoryBuilder_.dispose();
              mCategoryBuilder_ = null;
              mCategory_ = other.mCategory_;
              bitField0_ = (bitField0_ & ~0x00000080);
              mCategoryBuilder_ = 
                com.nibiru.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMCategoryFieldBuilder() : null;
            } else {
              mCategoryBuilder_.addAllMessages(other.mCategory_);
            }
          }
        }
        if (other.hasMNavigationOption()) {
          mergeMNavigationOption(other.getMNavigationOption());
        }
        if (other.hasGId()) {
          setGId(other.getGId());
        }
        if (other.hasMProjectInfo()) {
          mergeMProjectInfo(other.getMProjectInfo());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMFirstSceneID()) {
          return false;
        }
        if (!hasMAllBackGroundAudio()) {
          return false;
        }
        for (int i = 0; i < getMScenesCount(); i++) {
          if (!getMScenes(i).isInitialized()) {
            return false;
          }
        }
        if (!getMAllBackGroundAudio().isInitialized()) {
          return false;
        }
        if (hasProjVersion()) {
          if (!getProjVersion().isInitialized()) {
            return false;
          }
        }
        if (hasMNavigationOption()) {
          if (!getMNavigationOption().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.nibiru.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> mScenes_ =
        java.util.Collections.emptyList();
      private void ensureMScenesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          mScenes_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute>(mScenes_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder> mScenesBuilder_;

      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> getMScenesList() {
        if (mScenesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mScenes_);
        } else {
          return mScenesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public int getMScenesCount() {
        if (mScenesBuilder_ == null) {
          return mScenes_.size();
        } else {
          return mScenesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute getMScenes(int index) {
        if (mScenesBuilder_ == null) {
          return mScenes_.get(index);
        } else {
          return mScenesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public Builder setMScenes(
          int index, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute value) {
        if (mScenesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMScenesIsMutable();
          mScenes_.set(index, value);
          onChanged();
        } else {
          mScenesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public Builder setMScenes(
          int index, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder builderForValue) {
        if (mScenesBuilder_ == null) {
          ensureMScenesIsMutable();
          mScenes_.set(index, builderForValue.build());
          onChanged();
        } else {
          mScenesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public Builder addMScenes(com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute value) {
        if (mScenesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMScenesIsMutable();
          mScenes_.add(value);
          onChanged();
        } else {
          mScenesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public Builder addMScenes(
          int index, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute value) {
        if (mScenesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMScenesIsMutable();
          mScenes_.add(index, value);
          onChanged();
        } else {
          mScenesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public Builder addMScenes(
          com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder builderForValue) {
        if (mScenesBuilder_ == null) {
          ensureMScenesIsMutable();
          mScenes_.add(builderForValue.build());
          onChanged();
        } else {
          mScenesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public Builder addMScenes(
          int index, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder builderForValue) {
        if (mScenesBuilder_ == null) {
          ensureMScenesIsMutable();
          mScenes_.add(index, builderForValue.build());
          onChanged();
        } else {
          mScenesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public Builder addAllMScenes(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute> values) {
        if (mScenesBuilder_ == null) {
          ensureMScenesIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mScenes_);
          onChanged();
        } else {
          mScenesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public Builder clearMScenes() {
        if (mScenesBuilder_ == null) {
          mScenes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          mScenesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public Builder removeMScenes(int index) {
        if (mScenesBuilder_ == null) {
          ensureMScenesIsMutable();
          mScenes_.remove(index);
          onChanged();
        } else {
          mScenesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder getMScenesBuilder(
          int index) {
        return getMScenesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder getMScenesOrBuilder(
          int index) {
        if (mScenesBuilder_ == null) {
          return mScenes_.get(index);  } else {
          return mScenesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder> 
           getMScenesOrBuilderList() {
        if (mScenesBuilder_ != null) {
          return mScenesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mScenes_);
        }
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder addMScenesBuilder() {
        return getMScenesFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.getDefaultInstance());
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder addMScenesBuilder(
          int index) {
        return getMScenesFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.getDefaultInstance());
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.SkyBoxSceneAttribute m_Scenes = 1;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder> 
           getMScenesBuilderList() {
        return getMScenesFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder> 
          getMScenesFieldBuilder() {
        if (mScenesBuilder_ == null) {
          mScenesBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttribute.Builder, com.nibiru.creator.data.HotPotData.SkyBoxSceneAttributeOrBuilder>(
                  mScenes_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          mScenes_ = null;
        }
        return mScenesBuilder_;
      }

      private int mFirstSceneID_ ;
      /**
       * <pre>
       *主场景ID
       * </pre>
       *
       * <code>required int32 m_FirstSceneID = 2;</code>
       */
      public boolean hasMFirstSceneID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       *主场景ID
       * </pre>
       *
       * <code>required int32 m_FirstSceneID = 2;</code>
       */
      public int getMFirstSceneID() {
        return mFirstSceneID_;
      }
      /**
       * <pre>
       *主场景ID
       * </pre>
       *
       * <code>required int32 m_FirstSceneID = 2;</code>
       */
      public Builder setMFirstSceneID(int value) {
        bitField0_ |= 0x00000002;
        mFirstSceneID_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *主场景ID
       * </pre>
       *
       * <code>required int32 m_FirstSceneID = 2;</code>
       */
      public Builder clearMFirstSceneID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mFirstSceneID_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.BackGroundAudio mAllBackGroundAudio_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.BackGroundAudio, com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder, com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder> mAllBackGroundAudioBuilder_;
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
       */
      public boolean hasMAllBackGroundAudio() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.BackGroundAudio getMAllBackGroundAudio() {
        if (mAllBackGroundAudioBuilder_ == null) {
          return mAllBackGroundAudio_ == null ? com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance() : mAllBackGroundAudio_;
        } else {
          return mAllBackGroundAudioBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
       */
      public Builder setMAllBackGroundAudio(com.nibiru.creator.data.HotPotData.BackGroundAudio value) {
        if (mAllBackGroundAudioBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mAllBackGroundAudio_ = value;
          onChanged();
        } else {
          mAllBackGroundAudioBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
       */
      public Builder setMAllBackGroundAudio(
          com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder builderForValue) {
        if (mAllBackGroundAudioBuilder_ == null) {
          mAllBackGroundAudio_ = builderForValue.build();
          onChanged();
        } else {
          mAllBackGroundAudioBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
       */
      public Builder mergeMAllBackGroundAudio(com.nibiru.creator.data.HotPotData.BackGroundAudio value) {
        if (mAllBackGroundAudioBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              mAllBackGroundAudio_ != null &&
              mAllBackGroundAudio_ != com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance()) {
            mAllBackGroundAudio_ =
              com.nibiru.creator.data.HotPotData.BackGroundAudio.newBuilder(mAllBackGroundAudio_).mergeFrom(value).buildPartial();
          } else {
            mAllBackGroundAudio_ = value;
          }
          onChanged();
        } else {
          mAllBackGroundAudioBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
       */
      public Builder clearMAllBackGroundAudio() {
        if (mAllBackGroundAudioBuilder_ == null) {
          mAllBackGroundAudio_ = null;
          onChanged();
        } else {
          mAllBackGroundAudioBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder getMAllBackGroundAudioBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMAllBackGroundAudioFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
       */
      public com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder getMAllBackGroundAudioOrBuilder() {
        if (mAllBackGroundAudioBuilder_ != null) {
          return mAllBackGroundAudioBuilder_.getMessageOrBuilder();
        } else {
          return mAllBackGroundAudio_ == null ?
              com.nibiru.creator.data.HotPotData.BackGroundAudio.getDefaultInstance() : mAllBackGroundAudio_;
        }
      }
      /**
       * <pre>
       *背景音乐
       * </pre>
       *
       * <code>required .DataFactory.BackGroundAudio m_allBackGroundAudio = 3;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.BackGroundAudio, com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder, com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder> 
          getMAllBackGroundAudioFieldBuilder() {
        if (mAllBackGroundAudioBuilder_ == null) {
          mAllBackGroundAudioBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.BackGroundAudio, com.nibiru.creator.data.HotPotData.BackGroundAudio.Builder, com.nibiru.creator.data.HotPotData.BackGroundAudioOrBuilder>(
                  getMAllBackGroundAudio(),
                  getParentForChildren(),
                  isClean());
          mAllBackGroundAudio_ = null;
        }
        return mAllBackGroundAudioBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.ProjVersion projVersion_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ProjVersion, com.nibiru.creator.data.HotPotData.ProjVersion.Builder, com.nibiru.creator.data.HotPotData.ProjVersionOrBuilder> projVersionBuilder_;
      /**
       * <pre>
       *工程对应软件版本号
       * </pre>
       *
       * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
       */
      public boolean hasProjVersion() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       *工程对应软件版本号
       * </pre>
       *
       * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.ProjVersion getProjVersion() {
        if (projVersionBuilder_ == null) {
          return projVersion_ == null ? com.nibiru.creator.data.HotPotData.ProjVersion.getDefaultInstance() : projVersion_;
        } else {
          return projVersionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *工程对应软件版本号
       * </pre>
       *
       * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
       */
      public Builder setProjVersion(com.nibiru.creator.data.HotPotData.ProjVersion value) {
        if (projVersionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          projVersion_ = value;
          onChanged();
        } else {
          projVersionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *工程对应软件版本号
       * </pre>
       *
       * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
       */
      public Builder setProjVersion(
          com.nibiru.creator.data.HotPotData.ProjVersion.Builder builderForValue) {
        if (projVersionBuilder_ == null) {
          projVersion_ = builderForValue.build();
          onChanged();
        } else {
          projVersionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *工程对应软件版本号
       * </pre>
       *
       * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
       */
      public Builder mergeProjVersion(com.nibiru.creator.data.HotPotData.ProjVersion value) {
        if (projVersionBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              projVersion_ != null &&
              projVersion_ != com.nibiru.creator.data.HotPotData.ProjVersion.getDefaultInstance()) {
            projVersion_ =
              com.nibiru.creator.data.HotPotData.ProjVersion.newBuilder(projVersion_).mergeFrom(value).buildPartial();
          } else {
            projVersion_ = value;
          }
          onChanged();
        } else {
          projVersionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       *工程对应软件版本号
       * </pre>
       *
       * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
       */
      public Builder clearProjVersion() {
        if (projVersionBuilder_ == null) {
          projVersion_ = null;
          onChanged();
        } else {
          projVersionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       *工程对应软件版本号
       * </pre>
       *
       * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.ProjVersion.Builder getProjVersionBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getProjVersionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *工程对应软件版本号
       * </pre>
       *
       * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
       */
      public com.nibiru.creator.data.HotPotData.ProjVersionOrBuilder getProjVersionOrBuilder() {
        if (projVersionBuilder_ != null) {
          return projVersionBuilder_.getMessageOrBuilder();
        } else {
          return projVersion_ == null ?
              com.nibiru.creator.data.HotPotData.ProjVersion.getDefaultInstance() : projVersion_;
        }
      }
      /**
       * <pre>
       *工程对应软件版本号
       * </pre>
       *
       * <code>optional .DataFactory.ProjVersion projVersion = 4;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ProjVersion, com.nibiru.creator.data.HotPotData.ProjVersion.Builder, com.nibiru.creator.data.HotPotData.ProjVersionOrBuilder> 
          getProjVersionFieldBuilder() {
        if (projVersionBuilder_ == null) {
          projVersionBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.ProjVersion, com.nibiru.creator.data.HotPotData.ProjVersion.Builder, com.nibiru.creator.data.HotPotData.ProjVersionOrBuilder>(
                  getProjVersion(),
                  getParentForChildren(),
                  isClean());
          projVersion_ = null;
        }
        return projVersionBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.WeChatShare mWeChatshare_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.WeChatShare, com.nibiru.creator.data.HotPotData.WeChatShare.Builder, com.nibiru.creator.data.HotPotData.WeChatShareOrBuilder> mWeChatshareBuilder_;
      /**
       * <pre>
       *微信分享内容  	
       * </pre>
       *
       * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
       */
      public boolean hasMWeChatshare() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       *微信分享内容  	
       * </pre>
       *
       * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.WeChatShare getMWeChatshare() {
        if (mWeChatshareBuilder_ == null) {
          return mWeChatshare_ == null ? com.nibiru.creator.data.HotPotData.WeChatShare.getDefaultInstance() : mWeChatshare_;
        } else {
          return mWeChatshareBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *微信分享内容  	
       * </pre>
       *
       * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
       */
      public Builder setMWeChatshare(com.nibiru.creator.data.HotPotData.WeChatShare value) {
        if (mWeChatshareBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mWeChatshare_ = value;
          onChanged();
        } else {
          mWeChatshareBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *微信分享内容  	
       * </pre>
       *
       * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
       */
      public Builder setMWeChatshare(
          com.nibiru.creator.data.HotPotData.WeChatShare.Builder builderForValue) {
        if (mWeChatshareBuilder_ == null) {
          mWeChatshare_ = builderForValue.build();
          onChanged();
        } else {
          mWeChatshareBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *微信分享内容  	
       * </pre>
       *
       * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
       */
      public Builder mergeMWeChatshare(com.nibiru.creator.data.HotPotData.WeChatShare value) {
        if (mWeChatshareBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              mWeChatshare_ != null &&
              mWeChatshare_ != com.nibiru.creator.data.HotPotData.WeChatShare.getDefaultInstance()) {
            mWeChatshare_ =
              com.nibiru.creator.data.HotPotData.WeChatShare.newBuilder(mWeChatshare_).mergeFrom(value).buildPartial();
          } else {
            mWeChatshare_ = value;
          }
          onChanged();
        } else {
          mWeChatshareBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       *微信分享内容  	
       * </pre>
       *
       * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
       */
      public Builder clearMWeChatshare() {
        if (mWeChatshareBuilder_ == null) {
          mWeChatshare_ = null;
          onChanged();
        } else {
          mWeChatshareBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       *微信分享内容  	
       * </pre>
       *
       * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.WeChatShare.Builder getMWeChatshareBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMWeChatshareFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *微信分享内容  	
       * </pre>
       *
       * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
       */
      public com.nibiru.creator.data.HotPotData.WeChatShareOrBuilder getMWeChatshareOrBuilder() {
        if (mWeChatshareBuilder_ != null) {
          return mWeChatshareBuilder_.getMessageOrBuilder();
        } else {
          return mWeChatshare_ == null ?
              com.nibiru.creator.data.HotPotData.WeChatShare.getDefaultInstance() : mWeChatshare_;
        }
      }
      /**
       * <pre>
       *微信分享内容  	
       * </pre>
       *
       * <code>optional .DataFactory.WeChatShare m_WeChatshare = 5;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.WeChatShare, com.nibiru.creator.data.HotPotData.WeChatShare.Builder, com.nibiru.creator.data.HotPotData.WeChatShareOrBuilder> 
          getMWeChatshareFieldBuilder() {
        if (mWeChatshareBuilder_ == null) {
          mWeChatshareBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.WeChatShare, com.nibiru.creator.data.HotPotData.WeChatShare.Builder, com.nibiru.creator.data.HotPotData.WeChatShareOrBuilder>(
                  getMWeChatshare(),
                  getParentForChildren(),
                  isClean());
          mWeChatshare_ = null;
        }
        return mWeChatshareBuilder_;
      }

      private int mAllBackGroundAudioFlag_ ;
      /**
       * <pre>
       *全局背景音乐标志，0应用到图片场景，1应用到所有场景
       * </pre>
       *
       * <code>optional int32 m_allBackGroundAudioFlag = 6;</code>
       */
      public boolean hasMAllBackGroundAudioFlag() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       *全局背景音乐标志，0应用到图片场景，1应用到所有场景
       * </pre>
       *
       * <code>optional int32 m_allBackGroundAudioFlag = 6;</code>
       */
      public int getMAllBackGroundAudioFlag() {
        return mAllBackGroundAudioFlag_;
      }
      /**
       * <pre>
       *全局背景音乐标志，0应用到图片场景，1应用到所有场景
       * </pre>
       *
       * <code>optional int32 m_allBackGroundAudioFlag = 6;</code>
       */
      public Builder setMAllBackGroundAudioFlag(int value) {
        bitField0_ |= 0x00000020;
        mAllBackGroundAudioFlag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *全局背景音乐标志，0应用到图片场景，1应用到所有场景
       * </pre>
       *
       * <code>optional int32 m_allBackGroundAudioFlag = 6;</code>
       */
      public Builder clearMAllBackGroundAudioFlag() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mAllBackGroundAudioFlag_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.sceneGroup> mSceneGroups_ =
        java.util.Collections.emptyList();
      private void ensureMSceneGroupsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          mSceneGroups_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.sceneGroup>(mSceneGroups_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.sceneGroup, com.nibiru.creator.data.HotPotData.sceneGroup.Builder, com.nibiru.creator.data.HotPotData.sceneGroupOrBuilder> mSceneGroupsBuilder_;

      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.sceneGroup> getMSceneGroupsList() {
        if (mSceneGroupsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mSceneGroups_);
        } else {
          return mSceneGroupsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public int getMSceneGroupsCount() {
        if (mSceneGroupsBuilder_ == null) {
          return mSceneGroups_.size();
        } else {
          return mSceneGroupsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.sceneGroup getMSceneGroups(int index) {
        if (mSceneGroupsBuilder_ == null) {
          return mSceneGroups_.get(index);
        } else {
          return mSceneGroupsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public Builder setMSceneGroups(
          int index, com.nibiru.creator.data.HotPotData.sceneGroup value) {
        if (mSceneGroupsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSceneGroupsIsMutable();
          mSceneGroups_.set(index, value);
          onChanged();
        } else {
          mSceneGroupsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public Builder setMSceneGroups(
          int index, com.nibiru.creator.data.HotPotData.sceneGroup.Builder builderForValue) {
        if (mSceneGroupsBuilder_ == null) {
          ensureMSceneGroupsIsMutable();
          mSceneGroups_.set(index, builderForValue.build());
          onChanged();
        } else {
          mSceneGroupsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public Builder addMSceneGroups(com.nibiru.creator.data.HotPotData.sceneGroup value) {
        if (mSceneGroupsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSceneGroupsIsMutable();
          mSceneGroups_.add(value);
          onChanged();
        } else {
          mSceneGroupsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public Builder addMSceneGroups(
          int index, com.nibiru.creator.data.HotPotData.sceneGroup value) {
        if (mSceneGroupsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMSceneGroupsIsMutable();
          mSceneGroups_.add(index, value);
          onChanged();
        } else {
          mSceneGroupsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public Builder addMSceneGroups(
          com.nibiru.creator.data.HotPotData.sceneGroup.Builder builderForValue) {
        if (mSceneGroupsBuilder_ == null) {
          ensureMSceneGroupsIsMutable();
          mSceneGroups_.add(builderForValue.build());
          onChanged();
        } else {
          mSceneGroupsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public Builder addMSceneGroups(
          int index, com.nibiru.creator.data.HotPotData.sceneGroup.Builder builderForValue) {
        if (mSceneGroupsBuilder_ == null) {
          ensureMSceneGroupsIsMutable();
          mSceneGroups_.add(index, builderForValue.build());
          onChanged();
        } else {
          mSceneGroupsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public Builder addAllMSceneGroups(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.sceneGroup> values) {
        if (mSceneGroupsBuilder_ == null) {
          ensureMSceneGroupsIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mSceneGroups_);
          onChanged();
        } else {
          mSceneGroupsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public Builder clearMSceneGroups() {
        if (mSceneGroupsBuilder_ == null) {
          mSceneGroups_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          mSceneGroupsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public Builder removeMSceneGroups(int index) {
        if (mSceneGroupsBuilder_ == null) {
          ensureMSceneGroupsIsMutable();
          mSceneGroups_.remove(index);
          onChanged();
        } else {
          mSceneGroupsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.sceneGroup.Builder getMSceneGroupsBuilder(
          int index) {
        return getMSceneGroupsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.sceneGroupOrBuilder getMSceneGroupsOrBuilder(
          int index) {
        if (mSceneGroupsBuilder_ == null) {
          return mSceneGroups_.get(index);  } else {
          return mSceneGroupsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.sceneGroupOrBuilder> 
           getMSceneGroupsOrBuilderList() {
        if (mSceneGroupsBuilder_ != null) {
          return mSceneGroupsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mSceneGroups_);
        }
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.sceneGroup.Builder addMSceneGroupsBuilder() {
        return getMSceneGroupsFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.sceneGroup.getDefaultInstance());
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public com.nibiru.creator.data.HotPotData.sceneGroup.Builder addMSceneGroupsBuilder(
          int index) {
        return getMSceneGroupsFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.sceneGroup.getDefaultInstance());
      }
      /**
       * <pre>
       *工程中所有场景
       * </pre>
       *
       * <code>repeated .DataFactory.sceneGroup m_sceneGroups = 7;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.sceneGroup.Builder> 
           getMSceneGroupsBuilderList() {
        return getMSceneGroupsFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.sceneGroup, com.nibiru.creator.data.HotPotData.sceneGroup.Builder, com.nibiru.creator.data.HotPotData.sceneGroupOrBuilder> 
          getMSceneGroupsFieldBuilder() {
        if (mSceneGroupsBuilder_ == null) {
          mSceneGroupsBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.sceneGroup, com.nibiru.creator.data.HotPotData.sceneGroup.Builder, com.nibiru.creator.data.HotPotData.sceneGroupOrBuilder>(
                  mSceneGroups_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          mSceneGroups_ = null;
        }
        return mSceneGroupsBuilder_;
      }

      private java.util.List<com.nibiru.creator.data.HotPotData.Category> mCategory_ =
        java.util.Collections.emptyList();
      private void ensureMCategoryIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          mCategory_ = new java.util.ArrayList<com.nibiru.creator.data.HotPotData.Category>(mCategory_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Category, com.nibiru.creator.data.HotPotData.Category.Builder, com.nibiru.creator.data.HotPotData.CategoryOrBuilder> mCategoryBuilder_;

      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.Category> getMCategoryList() {
        if (mCategoryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mCategory_);
        } else {
          return mCategoryBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public int getMCategoryCount() {
        if (mCategoryBuilder_ == null) {
          return mCategory_.size();
        } else {
          return mCategoryBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Category getMCategory(int index) {
        if (mCategoryBuilder_ == null) {
          return mCategory_.get(index);
        } else {
          return mCategoryBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public Builder setMCategory(
          int index, com.nibiru.creator.data.HotPotData.Category value) {
        if (mCategoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMCategoryIsMutable();
          mCategory_.set(index, value);
          onChanged();
        } else {
          mCategoryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public Builder setMCategory(
          int index, com.nibiru.creator.data.HotPotData.Category.Builder builderForValue) {
        if (mCategoryBuilder_ == null) {
          ensureMCategoryIsMutable();
          mCategory_.set(index, builderForValue.build());
          onChanged();
        } else {
          mCategoryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public Builder addMCategory(com.nibiru.creator.data.HotPotData.Category value) {
        if (mCategoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMCategoryIsMutable();
          mCategory_.add(value);
          onChanged();
        } else {
          mCategoryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public Builder addMCategory(
          int index, com.nibiru.creator.data.HotPotData.Category value) {
        if (mCategoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMCategoryIsMutable();
          mCategory_.add(index, value);
          onChanged();
        } else {
          mCategoryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public Builder addMCategory(
          com.nibiru.creator.data.HotPotData.Category.Builder builderForValue) {
        if (mCategoryBuilder_ == null) {
          ensureMCategoryIsMutable();
          mCategory_.add(builderForValue.build());
          onChanged();
        } else {
          mCategoryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public Builder addMCategory(
          int index, com.nibiru.creator.data.HotPotData.Category.Builder builderForValue) {
        if (mCategoryBuilder_ == null) {
          ensureMCategoryIsMutable();
          mCategory_.add(index, builderForValue.build());
          onChanged();
        } else {
          mCategoryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public Builder addAllMCategory(
          java.lang.Iterable<? extends com.nibiru.creator.data.HotPotData.Category> values) {
        if (mCategoryBuilder_ == null) {
          ensureMCategoryIsMutable();
          com.nibiru.protobuf.AbstractMessageLite.Builder.addAll(
              values, mCategory_);
          onChanged();
        } else {
          mCategoryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public Builder clearMCategory() {
        if (mCategoryBuilder_ == null) {
          mCategory_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          mCategoryBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public Builder removeMCategory(int index) {
        if (mCategoryBuilder_ == null) {
          ensureMCategoryIsMutable();
          mCategory_.remove(index);
          onChanged();
        } else {
          mCategoryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Category.Builder getMCategoryBuilder(
          int index) {
        return getMCategoryFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.CategoryOrBuilder getMCategoryOrBuilder(
          int index) {
        if (mCategoryBuilder_ == null) {
          return mCategory_.get(index);  } else {
          return mCategoryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public java.util.List<? extends com.nibiru.creator.data.HotPotData.CategoryOrBuilder> 
           getMCategoryOrBuilderList() {
        if (mCategoryBuilder_ != null) {
          return mCategoryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mCategory_);
        }
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Category.Builder addMCategoryBuilder() {
        return getMCategoryFieldBuilder().addBuilder(
            com.nibiru.creator.data.HotPotData.Category.getDefaultInstance());
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public com.nibiru.creator.data.HotPotData.Category.Builder addMCategoryBuilder(
          int index) {
        return getMCategoryFieldBuilder().addBuilder(
            index, com.nibiru.creator.data.HotPotData.Category.getDefaultInstance());
      }
      /**
       * <pre>
       *导览分类
       * </pre>
       *
       * <code>repeated .DataFactory.Category m_category = 8;</code>
       */
      public java.util.List<com.nibiru.creator.data.HotPotData.Category.Builder> 
           getMCategoryBuilderList() {
        return getMCategoryFieldBuilder().getBuilderList();
      }
      private com.nibiru.protobuf.RepeatedFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Category, com.nibiru.creator.data.HotPotData.Category.Builder, com.nibiru.creator.data.HotPotData.CategoryOrBuilder> 
          getMCategoryFieldBuilder() {
        if (mCategoryBuilder_ == null) {
          mCategoryBuilder_ = new com.nibiru.protobuf.RepeatedFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Category, com.nibiru.creator.data.HotPotData.Category.Builder, com.nibiru.creator.data.HotPotData.CategoryOrBuilder>(
                  mCategory_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          mCategory_ = null;
        }
        return mCategoryBuilder_;
      }

      private com.nibiru.creator.data.HotPotData.Navigation mNavigationOption_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Navigation, com.nibiru.creator.data.HotPotData.Navigation.Builder, com.nibiru.creator.data.HotPotData.NavigationOrBuilder> mNavigationOptionBuilder_;
      /**
       * <pre>
       *导览配置项
       * </pre>
       *
       * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
       */
      public boolean hasMNavigationOption() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       *导览配置项
       * </pre>
       *
       * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Navigation getMNavigationOption() {
        if (mNavigationOptionBuilder_ == null) {
          return mNavigationOption_ == null ? com.nibiru.creator.data.HotPotData.Navigation.getDefaultInstance() : mNavigationOption_;
        } else {
          return mNavigationOptionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *导览配置项
       * </pre>
       *
       * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
       */
      public Builder setMNavigationOption(com.nibiru.creator.data.HotPotData.Navigation value) {
        if (mNavigationOptionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mNavigationOption_ = value;
          onChanged();
        } else {
          mNavigationOptionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *导览配置项
       * </pre>
       *
       * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
       */
      public Builder setMNavigationOption(
          com.nibiru.creator.data.HotPotData.Navigation.Builder builderForValue) {
        if (mNavigationOptionBuilder_ == null) {
          mNavigationOption_ = builderForValue.build();
          onChanged();
        } else {
          mNavigationOptionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *导览配置项
       * </pre>
       *
       * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
       */
      public Builder mergeMNavigationOption(com.nibiru.creator.data.HotPotData.Navigation value) {
        if (mNavigationOptionBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              mNavigationOption_ != null &&
              mNavigationOption_ != com.nibiru.creator.data.HotPotData.Navigation.getDefaultInstance()) {
            mNavigationOption_ =
              com.nibiru.creator.data.HotPotData.Navigation.newBuilder(mNavigationOption_).mergeFrom(value).buildPartial();
          } else {
            mNavigationOption_ = value;
          }
          onChanged();
        } else {
          mNavigationOptionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <pre>
       *导览配置项
       * </pre>
       *
       * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
       */
      public Builder clearMNavigationOption() {
        if (mNavigationOptionBuilder_ == null) {
          mNavigationOption_ = null;
          onChanged();
        } else {
          mNavigationOptionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <pre>
       *导览配置项
       * </pre>
       *
       * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.Navigation.Builder getMNavigationOptionBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getMNavigationOptionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *导览配置项
       * </pre>
       *
       * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
       */
      public com.nibiru.creator.data.HotPotData.NavigationOrBuilder getMNavigationOptionOrBuilder() {
        if (mNavigationOptionBuilder_ != null) {
          return mNavigationOptionBuilder_.getMessageOrBuilder();
        } else {
          return mNavigationOption_ == null ?
              com.nibiru.creator.data.HotPotData.Navigation.getDefaultInstance() : mNavigationOption_;
        }
      }
      /**
       * <pre>
       *导览配置项
       * </pre>
       *
       * <code>optional .DataFactory.Navigation m_navigationOption = 9;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.Navigation, com.nibiru.creator.data.HotPotData.Navigation.Builder, com.nibiru.creator.data.HotPotData.NavigationOrBuilder> 
          getMNavigationOptionFieldBuilder() {
        if (mNavigationOptionBuilder_ == null) {
          mNavigationOptionBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.Navigation, com.nibiru.creator.data.HotPotData.Navigation.Builder, com.nibiru.creator.data.HotPotData.NavigationOrBuilder>(
                  getMNavigationOption(),
                  getParentForChildren(),
                  isClean());
          mNavigationOption_ = null;
        }
        return mNavigationOptionBuilder_;
      }

      private int gId_ ;
      /**
       * <pre>
       *全局资源id 导览分类用
       * </pre>
       *
       * <code>optional int32 g_id = 10;</code>
       */
      public boolean hasGId() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       *全局资源id 导览分类用
       * </pre>
       *
       * <code>optional int32 g_id = 10;</code>
       */
      public int getGId() {
        return gId_;
      }
      /**
       * <pre>
       *全局资源id 导览分类用
       * </pre>
       *
       * <code>optional int32 g_id = 10;</code>
       */
      public Builder setGId(int value) {
        bitField0_ |= 0x00000200;
        gId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *全局资源id 导览分类用
       * </pre>
       *
       * <code>optional int32 g_id = 10;</code>
       */
      public Builder clearGId() {
        bitField0_ = (bitField0_ & ~0x00000200);
        gId_ = 0;
        onChanged();
        return this;
      }

      private com.nibiru.creator.data.HotPotData.ProjectInfo mProjectInfo_ = null;
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ProjectInfo, com.nibiru.creator.data.HotPotData.ProjectInfo.Builder, com.nibiru.creator.data.HotPotData.ProjectInfoOrBuilder> mProjectInfoBuilder_;
      /**
       * <pre>
       *建行信息
       * </pre>
       *
       * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
       */
      public boolean hasMProjectInfo() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       *建行信息
       * </pre>
       *
       * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.ProjectInfo getMProjectInfo() {
        if (mProjectInfoBuilder_ == null) {
          return mProjectInfo_ == null ? com.nibiru.creator.data.HotPotData.ProjectInfo.getDefaultInstance() : mProjectInfo_;
        } else {
          return mProjectInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *建行信息
       * </pre>
       *
       * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
       */
      public Builder setMProjectInfo(com.nibiru.creator.data.HotPotData.ProjectInfo value) {
        if (mProjectInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mProjectInfo_ = value;
          onChanged();
        } else {
          mProjectInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *建行信息
       * </pre>
       *
       * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
       */
      public Builder setMProjectInfo(
          com.nibiru.creator.data.HotPotData.ProjectInfo.Builder builderForValue) {
        if (mProjectInfoBuilder_ == null) {
          mProjectInfo_ = builderForValue.build();
          onChanged();
        } else {
          mProjectInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *建行信息
       * </pre>
       *
       * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
       */
      public Builder mergeMProjectInfo(com.nibiru.creator.data.HotPotData.ProjectInfo value) {
        if (mProjectInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              mProjectInfo_ != null &&
              mProjectInfo_ != com.nibiru.creator.data.HotPotData.ProjectInfo.getDefaultInstance()) {
            mProjectInfo_ =
              com.nibiru.creator.data.HotPotData.ProjectInfo.newBuilder(mProjectInfo_).mergeFrom(value).buildPartial();
          } else {
            mProjectInfo_ = value;
          }
          onChanged();
        } else {
          mProjectInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       *建行信息
       * </pre>
       *
       * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
       */
      public Builder clearMProjectInfo() {
        if (mProjectInfoBuilder_ == null) {
          mProjectInfo_ = null;
          onChanged();
        } else {
          mProjectInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <pre>
       *建行信息
       * </pre>
       *
       * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.ProjectInfo.Builder getMProjectInfoBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getMProjectInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *建行信息
       * </pre>
       *
       * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
       */
      public com.nibiru.creator.data.HotPotData.ProjectInfoOrBuilder getMProjectInfoOrBuilder() {
        if (mProjectInfoBuilder_ != null) {
          return mProjectInfoBuilder_.getMessageOrBuilder();
        } else {
          return mProjectInfo_ == null ?
              com.nibiru.creator.data.HotPotData.ProjectInfo.getDefaultInstance() : mProjectInfo_;
        }
      }
      /**
       * <pre>
       *建行信息
       * </pre>
       *
       * <code>optional .DataFactory.ProjectInfo m_projectInfo = 11;</code>
       */
      private com.nibiru.protobuf.SingleFieldBuilderV3<
          com.nibiru.creator.data.HotPotData.ProjectInfo, com.nibiru.creator.data.HotPotData.ProjectInfo.Builder, com.nibiru.creator.data.HotPotData.ProjectInfoOrBuilder> 
          getMProjectInfoFieldBuilder() {
        if (mProjectInfoBuilder_ == null) {
          mProjectInfoBuilder_ = new com.nibiru.protobuf.SingleFieldBuilderV3<
              com.nibiru.creator.data.HotPotData.ProjectInfo, com.nibiru.creator.data.HotPotData.ProjectInfo.Builder, com.nibiru.creator.data.HotPotData.ProjectInfoOrBuilder>(
                  getMProjectInfo(),
                  getParentForChildren(),
                  isClean());
          mProjectInfo_ = null;
        }
        return mProjectInfoBuilder_;
      }
      public final Builder setUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.nibiru.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataFactory.SkyBoxSceneGroup)
    }

    // @@protoc_insertion_point(class_scope:DataFactory.SkyBoxSceneGroup)
    private static final com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup();
    }

    public static com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.nibiru.protobuf.Parser<SkyBoxSceneGroup>
        PARSER = new com.nibiru.protobuf.AbstractParser<SkyBoxSceneGroup>() {
      public SkyBoxSceneGroup parsePartialFrom(
          com.nibiru.protobuf.CodedInputStream input,
          com.nibiru.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.nibiru.protobuf.InvalidProtocolBufferException {
          return new SkyBoxSceneGroup(input, extensionRegistry);
      }
    };

    public static com.nibiru.protobuf.Parser<SkyBoxSceneGroup> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.nibiru.protobuf.Parser<SkyBoxSceneGroup> getParserForType() {
      return PARSER;
    }

    public com.nibiru.creator.data.HotPotData.SkyBoxSceneGroup getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_ProjVersion_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_ProjVersion_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_Vec2_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_Vec2_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_Vec3_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_Vec3_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_Vec4_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_Vec4_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_Quaternion_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_Quaternion_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_HotPotAppearance_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_HotPotAppearance_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_HotPotAttribute_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_HotPotAttribute_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_ImageHotPot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_ImageHotPot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_VideoImageHotPot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_VideoImageHotPot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_LabelHotPot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_LabelHotPot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_AudioHotPot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_AudioHotPot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_SceneSwitchHotPot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_SceneSwitchHotPot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_ImageTxtHotPot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_ImageTxtHotPot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_ImageListHotPot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_ImageListHotPot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_ModelHotPot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_ModelHotPot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_HyperlinkHotspot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_HyperlinkHotspot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_Exhibits3DHotspot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_Exhibits3DHotspot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_ExhibitsARHotspot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_ExhibitsARHotspot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_HotPot_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_HotPot_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_EventAppearance_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_EventAppearance_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_Event_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_Event_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_BackGroundAudio_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_BackGroundAudio_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_Font_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_Font_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_Component_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_Component_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_SkinSet_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_SkinSet_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_SkyBoxSceneAttribute_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_SkyBoxSceneAttribute_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_WeChatShare_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_WeChatShare_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_sceneContext_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_sceneContext_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_sceneGroup_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_sceneGroup_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_SubCategory_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_SubCategory_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_Category_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_Category_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_Navigation_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_Navigation_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_ToolInfo_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_ToolInfo_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_ProjectInfo_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_ProjectInfo_fieldAccessorTable;
  private static final com.nibiru.protobuf.Descriptors.Descriptor
    internal_static_DataFactory_SkyBoxSceneGroup_descriptor;
  private static final 
    com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataFactory_SkyBoxSceneGroup_fieldAccessorTable;

  public static com.nibiru.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.nibiru.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020DataDefine.proto\022\013DataFactory\"\036\n\013ProjV" +
      "ersion\022\017\n\007version\030\001 \002(\t\" \n\004Vec2\022\013\n\003m_X\030\001" +
      " \002(\002\022\013\n\003m_Y\030\002 \002(\002\"-\n\004Vec3\022\013\n\003m_X\030\001 \002(\002\022\013" +
      "\n\003m_Y\030\002 \002(\002\022\013\n\003m_Z\030\003 \002(\002\":\n\004Vec4\022\013\n\003m_X\030" +
      "\001 \002(\002\022\013\n\003m_Y\030\002 \002(\002\022\013\n\003m_Z\030\003 \002(\002\022\013\n\003m_W\030\004" +
      " \002(\002\"E\n\nQuaternion\022\020\n\010m_Scalar\030\001 \002(\002\022\013\n\003" +
      "m_X\030\002 \002(\002\022\013\n\003m_Y\030\003 \002(\002\022\013\n\003m_Z\030\004 \002(\002\"\253\002\n\020" +
      "HotPotAppearance\022\031\n\021m_AppearanceImage\030\001 " +
      "\002(\t\022(\n\rm_AnchorPoint\030\002 \002(\0132\021.DataFactory" +
      ".Vec2\022\030\n\020m_AppearanceName\030\003 \002(\t\022\023\n\013m_sca",
      "leSize\030\004 \001(\002\022&\n\013m_translate\030\005 \001(\0132\021.Data" +
      "Factory.Vec3\022+\n\nm_rotation\030\006 \001(\0132\027.DataF" +
      "actory.Quaternion\022\021\n\tm_fileUrl\030\007 \001(\t\022\017\n\007" +
      "m_Count\030\010 \001(\005\022*\n\017m_TranslateSize\030\t \001(\0132\021" +
      ".DataFactory.Vec3\"u\n\017HotPotAttribute\022-\n\014" +
      "m_HotPotType\030\001 \002(\0162\027.DataFactory.HotPotE" +
      "num\0223\n\014m_Appearance\030\002 \002(\0132\035.DataFactory." +
      "HotPotAppearance\"\211\001\n\013ImageHotPot\022\023\n\013m_Im" +
      "ageName\030\001 \002(\t\022+\n\013m_ImageType\030\002 \002(\0162\026.Dat" +
      "aFactory.ImageType\022%\n\nm_ShowSize\030\003 \002(\0132\021",
      ".DataFactory.Vec2\022\021\n\tm_fileUrl\030\004 \001(\t\"\351\001\n" +
      "\020VideoImageHotPot\022\023\n\013m_VideoName\030\001 \002(\t\022+" +
      "\n\013m_VideoType\030\002 \002(\0162\026.DataFactory.VideoT" +
      "ype\022%\n\nm_ShowRect\030\003 \002(\0132\021.DataFactory.Ve" +
      "c2\0222\n\014m_SourceMode\030\004 \001(\0162\034.DataFactory.V" +
      "ideoSourceMode\022\022\n\nm_snappath\030\005 \001(\t\022\021\n\tm_" +
      "fileUrl\030\007 \001(\t\022\021\n\tm_iconUrl\030\010 \001(\t\"\357\002\n\013Lab" +
      "elHotPot\022\017\n\007m_Title\030\001 \002(\t\022&\n\013m_FontColor" +
      "\030\002 \002(\0132\021.DataFactory.Vec4\022\022\n\nm_CharSize\030" +
      "\003 \002(\002\022\022\n\nm_MaxWidth\030\004 \002(\002\022\020\n\010m_Family\030\005 ",
      "\002(\t\022\017\n\007m_Bolid\030\006 \002(\005\022\020\n\010m_Italic\030\007 \002(\005\022\023" +
      "\n\013m_Underline\030\010 \002(\005\022,\n\021m_BackgroundColor" +
      "\030\t \002(\0132\021.DataFactory.Vec4\022\033\n\023m_Backgroun" +
      "dOpacity\030\n \002(\002\022%\n\nm_ShowRect\030\013 \002(\0132\021.Dat" +
      "aFactory.Vec2\022\026\n\016m_LineDistance\030\014 \001(\005\022\022\n" +
      "\nm_textFont\030\r \002(\t\022\027\n\017m_textAlignment\030\016 \001" +
      "(\005\"\207\001\n\013AudioHotPot\022\023\n\013m_AudioName\030\001 \002(\t\022" +
      "\022\n\nm_LoopTime\030\002 \002(\005\022\025\n\rm_displayName\030\003 \001" +
      "(\t\022\022\n\nm_iconPath\030\004 \001(\t\022\021\n\tm_fileUrl\030\005 \001(" +
      "\t\022\021\n\tm_iconUrl\030\006 \001(\t\"\356\001\n\021SceneSwitchHotP",
      "ot\022\023\n\013m_NextScene\030\001 \002(\005\022\024\n\014m_StartIndex\030" +
      "\002 \002(\005\022\022\n\nm_EndIndex\030\003 \002(\005\022-\n\014m_SwitchTyp" +
      "e\030\004 \002(\0162\027.DataFactory.SwitchType\022\021\n\tstar" +
      "tTime\030\005 \001(\003\022\024\n\014m_arrowStyle\030\006 \001(\005\022\'\n\014m_a" +
      "rrowColor\030\007 \001(\0132\021.DataFactory.Vec4\022\031\n\021m_" +
      "HotOrEventIndex\030\010 \001(\005\"\356\002\n\016ImageTxtHotPot" +
      "\022\023\n\013m_ImagePath\030\001 \002(\t\022\r\n\005m_Txt\030\002 \002(\t\022+\n\013" +
      "m_ImageType\030\003 \002(\0162\026.DataFactory.ImageTyp" +
      "e\0221\n\016m_ImageTxtMode\030\004 \002(\0162\031.DataFactory." +
      "ImageTxtMode\022&\n\013m_FontColor\030\005 \001(\0132\021.Data",
      "Factory.Vec4\022\022\n\nm_CharSize\030\006 \001(\002\022%\n\nm_Sh" +
      "owRect\030\007 \002(\0132\021.DataFactory.Vec2\022\017\n\007m_Bol" +
      "id\030\010 \001(\005\022\020\n\010m_Italic\030\t \001(\005\022\023\n\013m_Underlin" +
      "e\030\n \001(\005\022\026\n\016m_LineDistance\030\013 \001(\005\022\022\n\nm_tex" +
      "tFont\030\014 \002(\t\022\021\n\tm_fileUrl\030\r \001(\t\"\345\001\n\017Image" +
      "ListHotPot\022+\n\013m_ImageType\030\001 \002(\0162\026.DataFa" +
      "ctory.ImageType\022\024\n\014m_isAutoPlay\030\002 \002(\005\022\024\n" +
      "\014m_ImagePaths\030\003 \003(\t\022%\n\nm_ShowSize\030\004 \002(\0132" +
      "\021.DataFactory.Vec2\022\022\n\nm_ImageSum\030\005 \001(\005\022\024" +
      "\n\014m_materialId\030\006 \003(\005\022\025\n\rm_displayName\030\007 ",
      "\003(\t\022\021\n\tm_fileUrl\030\010 \003(\t\"\306\001\n\013ModelHotPot\022\023" +
      "\n\013m_ModelPath\030\001 \002(\t\022%\n\nm_ShowRect\030\002 \002(\0132" +
      "\021.DataFactory.Vec2\022\023\n\013m_scaleSize\030\003 \002(\002\022" +
      "&\n\013m_translate\030\004 \002(\0132\021.DataFactory.Vec3\022" +
      "+\n\nm_rotation\030\005 \002(\0132\027.DataFactory.Quater" +
      "nion\022\021\n\tm_fileUrl\030\006 \001(\t\"%\n\020HyperlinkHots" +
      "pot\022\021\n\thyperlink\030\001 \002(\t\"~\n\021Exhibits3DHots" +
      "pot\022\026\n\016m_ExhibitsLink\030\001 \001(\t\022\025\n\rm_resourc" +
      "eUrl\030\002 \001(\t\022\014\n\004m_id\030\003 \001(\t\022\025\n\rm_choosenTim" +
      "e\030\004 \001(\t\022\025\n\rm_productName\030\005 \001(\t\"\200\001\n\021Exhib",
      "itsARHotspot\022\030\n\020m_ExhibitsARLink\030\001 \001(\t\022\025" +
      "\n\rm_resourceUrl\030\002 \001(\t\022\014\n\004m_id\030\003 \001(\t\022\025\n\rm" +
      "_choosenTime\030\004 \001(\t\022\025\n\rm_productName\030\005 \001(" +
      "\t\"\243\t\n\006HotPot\022\022\n\nm_HotPotID\030\001 \002(\005\0221\n\013m_At" +
      "tribute\030\002 \002(\0132\034.DataFactory.HotPotAttrib" +
      "ute\022%\n\nm_Position\030\003 \002(\0132\021.DataFactory.Ve" +
      "c2\022\016\n\006m_Name\030\004 \002(\t\022\022\n\nm_ShowName\030\005 \002(\005\022/" +
      "\n\rm_DisplayMode\030\006 \001(\0162\030.DataFactory.Disp" +
      "layMode\0223\n\017m_DisappearMode\030\007 \001(\0162\032.DataF" +
      "actory.DisappearMode\022/\n\rm_ImageHotPot\030\010 ",
      "\001(\0132\030.DataFactory.ImageHotPot\0229\n\022m_Video" +
      "ImageHotPot\030\t \001(\0132\035.DataFactory.VideoIma" +
      "geHotPot\022/\n\rm_LabelHotPot\030\n \001(\0132\030.DataFa" +
      "ctory.LabelHotPot\022/\n\rm_AudioHotPot\030\013 \001(\013" +
      "2\030.DataFactory.AudioHotPot\022;\n\023m_SceneSwi" +
      "tchHotPot\030\014 \001(\0132\036.DataFactory.SceneSwitc" +
      "hHotPot\0227\n\021m_ImageListHotPot\030\r \001(\0132\034.Dat" +
      "aFactory.ImageListHotPot\0225\n\020m_ImageTxtHo" +
      "tPot\030\016 \001(\0132\033.DataFactory.ImageTxtHotPot\022" +
      "\023\n\013m_StartTime\030\017 \001(\003\022\021\n\tm_EndTime\030\020 \001(\003\022",
      "\017\n\007m_State\030\021 \001(\005\022&\n\013m_labelSize\030\022 \001(\0132\021." +
      "DataFactory.Vec2\022\020\n\010m_Radius\030\023 \001(\002\022/\n\rm_" +
      "ModelHotPot\030\024 \001(\0132\030.DataFactory.ModelHot" +
      "Pot\0227\n\020hyperlinkHotspot\030\025 \001(\0132\035.DataFact" +
      "ory.HyperlinkHotspot\022\024\n\014m_materialId\030\026 \001" +
      "(\005\022\025\n\rm_displayName\030\027 \001(\t\022\026\n\016m_DisplayAl" +
      "ign\030\030 \001(\005\022\025\n\rm_ClickLarger\030\031 \001(\003\022\025\n\rm_Cl" +
      "ickRotate\030\032 \001(\003\022\030\n\020m_ClickAudioPath\030\033 \001(" +
      "\t\022\026\n\nm_FontSize\030\034 \001(\005:\00214\0228\n\020m_exhibitsH" +
      "otPot\030\035 \001(\0132\036.DataFactory.Exhibits3DHots",
      "pot\022:\n\022m_exhibitsARHotPot\030\036 \001(\0132\036.DataFa" +
      "ctory.ExhibitsARHotspot\022\032\n\022m_appearanceL" +
      "ayout\030\037 \001(\005\022\022\n\nhoverImage\030\" \001(\t\"\203\001\n\017Even" +
      "tAppearance\022\031\n\021m_AppearanceImage\030\001 \002(\t\022(" +
      "\n\rm_AnchorPoint\030\002 \002(\0132\021.DataFactory.Vec2" +
      "\022\030\n\020m_AppearanceName\030\003 \002(\t\022\021\n\tm_fileUrl\030" +
      "\004 \001(\t\"\344\003\n\005Event\022\014\n\004m_ID\030\001 \001(\005\022\021\n\tm_scene" +
      "Id\030\002 \001(\005\022%\n\nm_Position\030\003 \001(\0132\021.DataFacto" +
      "ry.Vec2\022\016\n\006m_Name\030\004 \001(\t\022\022\n\nm_ShowName\030\005 " +
      "\001(\005\022\025\n\rm_triggerTime\030\006 \001(\003\022\025\n\rm_descript",
      "ion\030\007 \001(\t\022\024\n\014m_startIndex\030\010 \001(\005\022\022\n\nm_end" +
      "Index\030\t \003(\005\022\026\n\016m_nextSceneIds\030\n \003(\005\0221\n\013m" +
      "_Attribute\030\013 \002(\0132\034.DataFactory.EventAppe" +
      "arance\022\024\n\014m_isEndEvent\030\014 \001(\005\022&\n\013m_labelS" +
      "ize\030\r \001(\0132\021.DataFactory.Vec2\022\020\n\010m_Radius" +
      "\030\016 \001(\002\022\017\n\007m_State\030\017 \001(\005\022\021\n\tstartTime\030\020 \001" +
      "(\003\022\024\n\014m_arrowStyle\030\021 \001(\005\022\'\n\014m_arrowColor" +
      "\030\022 \001(\0132\021.DataFactory.Vec4\022\031\n\021m_HotOrEven" +
      "tIndex\030\023 \001(\005\"\267\001\n\017BackGroundAudio\022\022\n\nm_Fi" +
      "leName\030\001 \002(\t\022\022\n\nm_LoopTime\030\002 \002(\005\022\025\n\rm_di",
      "splayName\030\003 \001(\t\022\024\n\014m_materialId\030\004 \001(\005\022\022\n" +
      "\nm_iconPath\030\005 \001(\t\022\021\n\tm_fileUrl\030\006 \001(\t\022\021\n\t" +
      "m_iconUrl\030\007 \001(\t\022\025\n\010m_volume\030\t \001(\005:\003100\"\272" +
      "\001\n\004Font\022\024\n\014m_fontFamily\030\001 \002(\t\022\022\n\nm_fontS" +
      "ize\030\002 \002(\005\022\024\n\014m_lineHeight\030\003 \002(\002\022&\n\013m_fon" +
      "tColor\030\004 \002(\0132\021.DataFactory.Vec4\022\016\n\006m_bol" +
      "d\030\005 \002(\005\022\020\n\010m_italic\030\006 \002(\005\022\023\n\013m_underline" +
      "\030\007 \002(\005\022\023\n\013m_alignment\030\010 \002(\005\"\330\003\n\tComponen" +
      "t\022%\n\nm_Position\030\001 \002(\0132\021.DataFactory.Vec2" +
      "\022!\n\006m_size\030\002 \002(\0132\021.DataFactory.Vec2\022\021\n\tm",
      "_opacity\030\003 \002(\002\022\025\n\rm_rotateAngle\030\004 \002(\002\022!\n" +
      "\006m_font\030\005 \001(\0132\021.DataFactory.Font\022\021\n\tm_co" +
      "ntent\030\006 \001(\t\022\020\n\010m_radius\030\007 \001(\002\022&\n\013m_fillC" +
      "olor\030\010 \001(\0132\021.DataFactory.Vec4\022\021\n\timagePa" +
      "th\030\t \001(\t\022&\n\tm_hotspot\030\n \001(\0132\023.DataFactor" +
      "y.HotPot\022\025\n\rm_jumpSceneId\030\013 \001(\005\022\014\n\004m_Id\030" +
      "\014 \002(\005\022\021\n\tm_sceneId\030\r \002(\005\022\016\n\006m_type\030\016 \002(\005" +
      "\022\020\n\010m_ZValue\030\017 \001(\005\022\024\n\014m_materialId\030\020 \001(\005" +
      "\022\021\n\tm_fileUrl\030\021 \001(\t\022\023\n\013m_attribute\030\022 \001(\005" +
      "\022\024\n\014m_statistics\030\023 \001(\005\"\340\001\n\007SkinSet\022\014\n\004m_",
      "Id\030\001 \002(\005\022\021\n\tm_sceneId\030\002 \002(\005\022\017\n\007m_width\030\003" +
      " \002(\005\022\020\n\010m_height\030\004 \002(\005\022\021\n\tm_opacity\030\005 \002(" +
      "\002\022\"\n\007m_Color\030\006 \001(\0132\021.DataFactory.Vec4\022\034\n" +
      "\024m_userDefineFilePath\030\007 \001(\t\022\024\n\014m_materia" +
      "lId\030\010 \001(\005\022\021\n\tm_fileUrl\030\t \001(\t\022\023\n\013m_attrib" +
      "ute\030\n \001(\005\"\375\007\n\024SkyBoxSceneAttribute\022\014\n\004m_" +
      "ID\030\001 \002(\005\022\023\n\013m_SceneName\030\002 \002(\t\022\022\n\nm_FileN" +
      "ame\030\003 \002(\t\022\030\n\020m_MajorViewAngle\030\004 \002(\002\022%\n\nm" +
      "_ScenePos\030\005 \002(\0132\021.DataFactory.Vec2\0227\n\021m_" +
      "BackGroundAudio\030\006 \002(\0132\034.DataFactory.Back",
      "GroundAudio\022&\n\tm_HotPots\030\007 \003(\0132\023.DataFac" +
      "tory.HotPot\022$\n\010m_events\030\010 \003(\0132\022.DataFact" +
      "ory.Event\022,\n\014m_Components\030\t \003(\0132\026.DataFa" +
      "ctory.Component\022\020\n\010m_adjust\030\n \001(\002\022\'\n\tm_S" +
      "kinSet\030\013 \003(\0132\024.DataFactory.SkinSet\022\025\n\rm_" +
      "FileNameExt\030\014 \001(\t\022\023\n\013m_Scenetype\030\r \001(\005\022\023" +
      "\n\013m_totalTime\030\016 \001(\003\022\024\n\014cutStartTime\030\017 \001(" +
      "\003\022\022\n\ncutEndTime\030\020 \001(\003\022@\n\014m_renderMode\030\021 " +
      "\001(\0162\034.DataFactory.SceneRenderMode:\014Scene" +
      "Type_VR\022\022\n\nm_iconPath\030\022 \001(\t\022\024\n\014m_materia",
      "lId\030\023 \001(\005\022\021\n\tm_fileUrl\030\024 \001(\t\022\021\n\tm_iconUr" +
      "l\030\025 \001(\t\022\021\n\tm_groupId\030\026 \001(\005\022\025\n\rm_ReplayVe" +
      "dio\030\027 \001(\005\022\026\n\016m_selectorFlag\030\030 \001(\005\022\034\n\021m_M" +
      "ajorViewAngleY\030\031 \001(\002:\0010\022\026\n\016m_SkyImagePat" +
      "h\030\032 \001(\t\022\031\n\021m_GroundImagePath\030\033 \001(\t\022*\n\rm_" +
      "SkyImagehot\030\034 \001(\0132\023.DataFactory.HotPot\022-" +
      "\n\020m_GroundImagehot\030\035 \001(\0132\023.DataFactory.H" +
      "otPot\022\021\n\005m_Fov\030\036 \001(\005:\00275\022\023\n\013m_gyroScope\030" +
      "\037 \001(\005\022\020\n\010m_expand\030  \001(\005\022\022\n\nm_hotpotId\030! " +
      "\001(\005\022\024\n\014m_standTable\030\" \001(\005\022\024\n\014m_statistic",
      "s\030# \001(\005\022\030\n\020m_NorthViewAngle\030$ \001(\002\"~\n\013WeC" +
      "hatShare\022\023\n\013m_TitleName\030\001 \001(\t\022\035\n\025m_Proje" +
      "ctIntroduction\030\002 \001(\t\022\023\n\013m_thumbnail\030\003 \001(" +
      "\t\022\022\n\nm_showLogo\030\004 \001(\005\022\022\n\nm_logoPath\030\005 \001(" +
      "\t\"\230\001\n\014sceneContext\022\016\n\006m_name\030\001 \001(\t\022\022\n\nm_" +
      "filePath\030\002 \001(\t\022\023\n\013m_sceneMode\030\003 \001(\005\022\023\n\013m" +
      "_totalTime\030\004 \001(\003\022\023\n\013m_sceneType\030\005 \001(\005\022\021\n" +
      "\tm_groupId\030\006 \001(\005\022\022\n\nm_iconPath\030\007 \001(\t\"\217\001\n" +
      "\nsceneGroup\022\023\n\013m_groupName\030\001 \001(\t\022\014\n\004m_id" +
      "\030\002 \001(\005\022\022\n\nm_sceneIds\030\003 \003(\005\0222\n\017m_sceneCon",
      "texts\030\004 \003(\0132\031.DataFactory.sceneContext\022\026" +
      "\n\016m_defaultGroup\030\005 \001(\010\"\237\001\n\013SubCategory\022\016" +
      "\n\006m_name\030\001 \001(\t\022\016\n\006m_icon\030\002 \001(\t\022\022\n\nm_Link" +
      "Type\030\003 \001(\005\022\021\n\tm_SceneId\030\004 \001(\005\022\023\n\013m_hyper" +
      "link\030\005 \001(\t\022\022\n\nm_parentId\030\006 \001(\005\022\014\n\004m_Id\030\007" +
      " \001(\005\022\022\n\nm_Shoptype\030\010 \001(\005\"i\n\010Category\022\016\n\006" +
      "m_name\030\001 \001(\t\022\016\n\006m_icon\030\002 \001(\t\022/\n\rm_subCat" +
      "egory\030\003 \003(\0132\030.DataFactory.SubCategory\022\014\n" +
      "\004m_Id\030\004 \001(\005\"\226\002\n\nNavigation\022\032\n\022m_showcate" +
      "goryIcon\030\001 \001(\005\022\025\n\rm_hasCategory\030\002 \001(\005\022\030\n",
      "\020m_moreStyleImage\030\003 \001(\t\0226\n\013m_selectors\030\004" +
      " \003(\0132!.DataFactory.SkyBoxSceneAttribute\022" +
      "*\n\010m_backto\030\005 \001(\0132\030.DataFactory.SubCateg" +
      "ory\022&\n\tm_HotPots\030\006 \003(\0132\023.DataFactory.Hot" +
      "Pot\022\025\n\rm_ClickLarger\030\007 \001(\003\022\030\n\020m_ClickAud" +
      "ioPath\030\010 \001(\t\"?\n\010ToolInfo\022\016\n\006m_name\030\001 \001(\t" +
      "\022\020\n\010m_imgUrl\030\002 \001(\t\022\021\n\tm_linkUrl\030\003 \001(\t\"\272\001" +
      "\n\013ProjectInfo\022\021\n\tm_ehallId\030\001 \001(\t\022\022\n\nm_eh" +
      "allUrl\030\002 \001(\t\022\032\n\022m_ehallChoosenTime\030\003 \001(\t" +
      "\022\023\n\013m_ehallName\030\004 \001(\t\022\023\n\013m_jsHeadUrl\030\005 \001",
      "(\t\022\023\n\013m_jsTailUrl\030\006 \001(\t\022)\n\nm_toolInfo\030\007 " +
      "\003(\0132\025.DataFactory.ToolInfo\"\354\003\n\020SkyBoxSce" +
      "neGroup\0223\n\010m_Scenes\030\001 \003(\0132!.DataFactory." +
      "SkyBoxSceneAttribute\022\026\n\016m_FirstSceneID\030\002" +
      " \002(\005\022:\n\024m_allBackGroundAudio\030\003 \002(\0132\034.Dat" +
      "aFactory.BackGroundAudio\022-\n\013projVersion\030" +
      "\004 \001(\0132\030.DataFactory.ProjVersion\022/\n\rm_WeC" +
      "hatshare\030\005 \001(\0132\030.DataFactory.WeChatShare" +
      "\022 \n\030m_allBackGroundAudioFlag\030\006 \001(\005\022.\n\rm_" +
      "sceneGroups\030\007 \003(\0132\027.DataFactory.sceneGro",
      "up\022)\n\nm_category\030\010 \003(\0132\025.DataFactory.Cat" +
      "egory\0223\n\022m_navigationOption\030\t \001(\0132\027.Data" +
      "Factory.Navigation\022\014\n\004g_id\030\n \001(\005\022/\n\rm_pr" +
      "ojectInfo\030\013 \001(\0132\030.DataFactory.ProjectInf" +
      "o*U\n\nSwitchType\022\025\n\021SwitchType_Normal\020\000\022\031" +
      "\n\025SwitchType_Chessboard\020\001\022\025\n\021SwitchType_" +
      "Mosaic\020\002*_\n\013DisplayMode\022\031\n\025DisplayMode_C" +
      "lickShow\020\000\022\032\n\026DisplayMode_AlwaysShow\020\001\022\031" +
      "\n\025DisplayMode_HoverShow\020\002*i\n\rDisappearMo" +
      "de\022\035\n\031DisappearMode_ClickHidden\020\000\022\027\n\023Dis",
      "appearMode_Never\020\001\022 \n\034DisappearMode_OutF" +
      "ocusHidden\020\002*A\n\tImageType\022\020\n\014ImageType_2" +
      "D\020\000\022\020\n\014ImageType_3D\020\001\022\020\n\014ImageType_VR\020\002*" +
      "M\n\tVideoType\022\026\n\022VideoType_2DNormal\020\000\022\026\n\022" +
      "VideoType_3DNormal\020\001\022\020\n\014VideoType_VR\020\002*S" +
      "\n\017SceneRenderMode\022\026\n\022SceneType_2DNormal\020" +
      "\000\022\026\n\022SceneType_3DNormal\020\001\022\020\n\014SceneType_V" +
      "R\020\002*E\n\017VideoSourceMode\022\031\n\025VideoSourceMod" +
      "e_Local\020\000\022\027\n\023VideoSourceMode_Web\020\001*6\n\014Im" +
      "ageTxtMode\022\023\n\017Horizontal_Mode\020\000\022\021\n\rVerti",
      "cal_Mode\020\001*\310\002\n\nHotPotEnum\022\023\n\017HotPotEnum_" +
      "NULL\020\000\022\030\n\024HotPotEnum_Incubator\020\001\022\024\n\020HotP" +
      "otEnum_Label\020\002\022\024\n\020HotPotEnum_Image\020\003\022\024\n\020" +
      "HotPotEnum_Video\020\004\022\024\n\020HotPotEnum_Audio\020\005" +
      "\022\032\n\026HotPotEnum_SceneSwitch\020\006\022\030\n\024HotPotEn" +
      "um_ImageList\020\007\022\027\n\023HotPotEnum_ImageTxt\020\010\022" +
      "\024\n\020HotPotEnum_Model\020\t\022\030\n\024HotPotEnum_Hype" +
      "rLink\020\n\022\031\n\025HotPotEnum_3DExhibits\020\013\022\031\n\025Ho" +
      "tPotEnum_ARExhibits\020\014B%\n\027com.nibiru.crea" +
      "tor.dataB\nHotPotData"
    };
    com.nibiru.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.nibiru.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.nibiru.protobuf.ExtensionRegistry assignDescriptors(
              com.nibiru.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.nibiru.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.nibiru.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_DataFactory_ProjVersion_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_DataFactory_ProjVersion_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_ProjVersion_descriptor,
        new java.lang.String[] { "Version", });
    internal_static_DataFactory_Vec2_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_DataFactory_Vec2_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_Vec2_descriptor,
        new java.lang.String[] { "MX", "MY", });
    internal_static_DataFactory_Vec3_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_DataFactory_Vec3_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_Vec3_descriptor,
        new java.lang.String[] { "MX", "MY", "MZ", });
    internal_static_DataFactory_Vec4_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_DataFactory_Vec4_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_Vec4_descriptor,
        new java.lang.String[] { "MX", "MY", "MZ", "MW", });
    internal_static_DataFactory_Quaternion_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_DataFactory_Quaternion_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_Quaternion_descriptor,
        new java.lang.String[] { "MScalar", "MX", "MY", "MZ", });
    internal_static_DataFactory_HotPotAppearance_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_DataFactory_HotPotAppearance_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_HotPotAppearance_descriptor,
        new java.lang.String[] { "MAppearanceImage", "MAnchorPoint", "MAppearanceName", "MScaleSize", "MTranslate", "MRotation", "MFileUrl", "MCount", "MTranslateSize", });
    internal_static_DataFactory_HotPotAttribute_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_DataFactory_HotPotAttribute_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_HotPotAttribute_descriptor,
        new java.lang.String[] { "MHotPotType", "MAppearance", });
    internal_static_DataFactory_ImageHotPot_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_DataFactory_ImageHotPot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_ImageHotPot_descriptor,
        new java.lang.String[] { "MImageName", "MImageType", "MShowSize", "MFileUrl", });
    internal_static_DataFactory_VideoImageHotPot_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_DataFactory_VideoImageHotPot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_VideoImageHotPot_descriptor,
        new java.lang.String[] { "MVideoName", "MVideoType", "MShowRect", "MSourceMode", "MSnappath", "MFileUrl", "MIconUrl", });
    internal_static_DataFactory_LabelHotPot_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_DataFactory_LabelHotPot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_LabelHotPot_descriptor,
        new java.lang.String[] { "MTitle", "MFontColor", "MCharSize", "MMaxWidth", "MFamily", "MBolid", "MItalic", "MUnderline", "MBackgroundColor", "MBackgroundOpacity", "MShowRect", "MLineDistance", "MTextFont", "MTextAlignment", });
    internal_static_DataFactory_AudioHotPot_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_DataFactory_AudioHotPot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_AudioHotPot_descriptor,
        new java.lang.String[] { "MAudioName", "MLoopTime", "MDisplayName", "MIconPath", "MFileUrl", "MIconUrl", });
    internal_static_DataFactory_SceneSwitchHotPot_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_DataFactory_SceneSwitchHotPot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_SceneSwitchHotPot_descriptor,
        new java.lang.String[] { "MNextScene", "MStartIndex", "MEndIndex", "MSwitchType", "StartTime", "MArrowStyle", "MArrowColor", "MHotOrEventIndex", });
    internal_static_DataFactory_ImageTxtHotPot_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_DataFactory_ImageTxtHotPot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_ImageTxtHotPot_descriptor,
        new java.lang.String[] { "MImagePath", "MTxt", "MImageType", "MImageTxtMode", "MFontColor", "MCharSize", "MShowRect", "MBolid", "MItalic", "MUnderline", "MLineDistance", "MTextFont", "MFileUrl", });
    internal_static_DataFactory_ImageListHotPot_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_DataFactory_ImageListHotPot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_ImageListHotPot_descriptor,
        new java.lang.String[] { "MImageType", "MIsAutoPlay", "MImagePaths", "MShowSize", "MImageSum", "MMaterialId", "MDisplayName", "MFileUrl", });
    internal_static_DataFactory_ModelHotPot_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_DataFactory_ModelHotPot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_ModelHotPot_descriptor,
        new java.lang.String[] { "MModelPath", "MShowRect", "MScaleSize", "MTranslate", "MRotation", "MFileUrl", });
    internal_static_DataFactory_HyperlinkHotspot_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_DataFactory_HyperlinkHotspot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_HyperlinkHotspot_descriptor,
        new java.lang.String[] { "Hyperlink", });
    internal_static_DataFactory_Exhibits3DHotspot_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_DataFactory_Exhibits3DHotspot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_Exhibits3DHotspot_descriptor,
        new java.lang.String[] { "MExhibitsLink", "MResourceUrl", "MId", "MChoosenTime", "MProductName", });
    internal_static_DataFactory_ExhibitsARHotspot_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_DataFactory_ExhibitsARHotspot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_ExhibitsARHotspot_descriptor,
        new java.lang.String[] { "MExhibitsARLink", "MResourceUrl", "MId", "MChoosenTime", "MProductName", });
    internal_static_DataFactory_HotPot_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_DataFactory_HotPot_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_HotPot_descriptor,
        new java.lang.String[] { "MHotPotID", "MAttribute", "MPosition", "MName", "MShowName", "MDisplayMode", "MDisappearMode", "MImageHotPot", "MVideoImageHotPot", "MLabelHotPot", "MAudioHotPot", "MSceneSwitchHotPot", "MImageListHotPot", "MImageTxtHotPot", "MStartTime", "MEndTime", "MState", "MLabelSize", "MRadius", "MModelHotPot", "HyperlinkHotspot", "MMaterialId", "MDisplayName", "MDisplayAlign", "MClickLarger", "MClickRotate", "MClickAudioPath", "MFontSize", "MExhibitsHotPot", "MExhibitsARHotPot", "MAppearanceLayout", "HoverImage", });
    internal_static_DataFactory_EventAppearance_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_DataFactory_EventAppearance_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_EventAppearance_descriptor,
        new java.lang.String[] { "MAppearanceImage", "MAnchorPoint", "MAppearanceName", "MFileUrl", });
    internal_static_DataFactory_Event_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_DataFactory_Event_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_Event_descriptor,
        new java.lang.String[] { "MID", "MSceneId", "MPosition", "MName", "MShowName", "MTriggerTime", "MDescription", "MStartIndex", "MEndIndex", "MNextSceneIds", "MAttribute", "MIsEndEvent", "MLabelSize", "MRadius", "MState", "StartTime", "MArrowStyle", "MArrowColor", "MHotOrEventIndex", });
    internal_static_DataFactory_BackGroundAudio_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_DataFactory_BackGroundAudio_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_BackGroundAudio_descriptor,
        new java.lang.String[] { "MFileName", "MLoopTime", "MDisplayName", "MMaterialId", "MIconPath", "MFileUrl", "MIconUrl", "MVolume", });
    internal_static_DataFactory_Font_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_DataFactory_Font_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_Font_descriptor,
        new java.lang.String[] { "MFontFamily", "MFontSize", "MLineHeight", "MFontColor", "MBold", "MItalic", "MUnderline", "MAlignment", });
    internal_static_DataFactory_Component_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_DataFactory_Component_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_Component_descriptor,
        new java.lang.String[] { "MPosition", "MSize", "MOpacity", "MRotateAngle", "MFont", "MContent", "MRadius", "MFillColor", "ImagePath", "MHotspot", "MJumpSceneId", "MId", "MSceneId", "MType", "MZValue", "MMaterialId", "MFileUrl", "MAttribute", "MStatistics", });
    internal_static_DataFactory_SkinSet_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_DataFactory_SkinSet_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_SkinSet_descriptor,
        new java.lang.String[] { "MId", "MSceneId", "MWidth", "MHeight", "MOpacity", "MColor", "MUserDefineFilePath", "MMaterialId", "MFileUrl", "MAttribute", });
    internal_static_DataFactory_SkyBoxSceneAttribute_descriptor =
      getDescriptor().getMessageTypes().get(25);
    internal_static_DataFactory_SkyBoxSceneAttribute_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_SkyBoxSceneAttribute_descriptor,
        new java.lang.String[] { "MID", "MSceneName", "MFileName", "MMajorViewAngle", "MScenePos", "MBackGroundAudio", "MHotPots", "MEvents", "MComponents", "MAdjust", "MSkinSet", "MFileNameExt", "MScenetype", "MTotalTime", "CutStartTime", "CutEndTime", "MRenderMode", "MIconPath", "MMaterialId", "MFileUrl", "MIconUrl", "MGroupId", "MReplayVedio", "MSelectorFlag", "MMajorViewAngleY", "MSkyImagePath", "MGroundImagePath", "MSkyImagehot", "MGroundImagehot", "MFov", "MGyroScope", "MExpand", "MHotpotId", "MStandTable", "MStatistics", "MNorthViewAngle", });
    internal_static_DataFactory_WeChatShare_descriptor =
      getDescriptor().getMessageTypes().get(26);
    internal_static_DataFactory_WeChatShare_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_WeChatShare_descriptor,
        new java.lang.String[] { "MTitleName", "MProjectIntroduction", "MThumbnail", "MShowLogo", "MLogoPath", });
    internal_static_DataFactory_sceneContext_descriptor =
      getDescriptor().getMessageTypes().get(27);
    internal_static_DataFactory_sceneContext_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_sceneContext_descriptor,
        new java.lang.String[] { "MName", "MFilePath", "MSceneMode", "MTotalTime", "MSceneType", "MGroupId", "MIconPath", });
    internal_static_DataFactory_sceneGroup_descriptor =
      getDescriptor().getMessageTypes().get(28);
    internal_static_DataFactory_sceneGroup_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_sceneGroup_descriptor,
        new java.lang.String[] { "MGroupName", "MId", "MSceneIds", "MSceneContexts", "MDefaultGroup", });
    internal_static_DataFactory_SubCategory_descriptor =
      getDescriptor().getMessageTypes().get(29);
    internal_static_DataFactory_SubCategory_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_SubCategory_descriptor,
        new java.lang.String[] { "MName", "MIcon", "MLinkType", "MSceneId", "MHyperlink", "MParentId", "MId", "MShoptype", });
    internal_static_DataFactory_Category_descriptor =
      getDescriptor().getMessageTypes().get(30);
    internal_static_DataFactory_Category_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_Category_descriptor,
        new java.lang.String[] { "MName", "MIcon", "MSubCategory", "MId", });
    internal_static_DataFactory_Navigation_descriptor =
      getDescriptor().getMessageTypes().get(31);
    internal_static_DataFactory_Navigation_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_Navigation_descriptor,
        new java.lang.String[] { "MShowcategoryIcon", "MHasCategory", "MMoreStyleImage", "MSelectors", "MBackto", "MHotPots", "MClickLarger", "MClickAudioPath", });
    internal_static_DataFactory_ToolInfo_descriptor =
      getDescriptor().getMessageTypes().get(32);
    internal_static_DataFactory_ToolInfo_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_ToolInfo_descriptor,
        new java.lang.String[] { "MName", "MImgUrl", "MLinkUrl", });
    internal_static_DataFactory_ProjectInfo_descriptor =
      getDescriptor().getMessageTypes().get(33);
    internal_static_DataFactory_ProjectInfo_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_ProjectInfo_descriptor,
        new java.lang.String[] { "MEhallId", "MEhallUrl", "MEhallChoosenTime", "MEhallName", "MJsHeadUrl", "MJsTailUrl", "MToolInfo", });
    internal_static_DataFactory_SkyBoxSceneGroup_descriptor =
      getDescriptor().getMessageTypes().get(34);
    internal_static_DataFactory_SkyBoxSceneGroup_fieldAccessorTable = new
      com.nibiru.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataFactory_SkyBoxSceneGroup_descriptor,
        new java.lang.String[] { "MScenes", "MFirstSceneID", "MAllBackGroundAudio", "ProjVersion", "MWeChatshare", "MAllBackGroundAudioFlag", "MSceneGroups", "MCategory", "MNavigationOption", "GId", "MProjectInfo", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
